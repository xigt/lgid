doc_id=42 page=1 block_id=1-1 bbox=203.52,674.1,408.26,706.33 label=ttt 1 2
line=1 fonts=F0-14.4 bbox=203.52,691.98,408.26,706.33           :             Improving the Efficiency of Parsing
line=2 fonts=F0-14.4 iscore=0.00 bbox=226.92,674.1,384.92,688.45:                Discontinuous Constituents

doc_id=42 page=1 block_id=1-2 bbox=243.24,629.22,368.07,667.1 label=ttb 3 5
line=3 fonts=F0-12.0 bbox=273.72,655.14,338.24,667.1             :                         Mike Daniels
line=4 fonts=F2-12.0 iscore=0.00 bbox=243.24,641.22,368.07,653.18:                    daniels@ling.osu.edu
line=5 fonts=F0-12.0 iscore=0.00 bbox=256.56,629.22,355.43,641.18:                      Draft of 6 May 2003

doc_id=42 page=1 block_id=1-3 bbox=126.0,593.58,202.83,605.54 label=tbt 6 6
line=6 fonts=F3-12.0 bbox=126.0,593.58,202.83,605.54:1 Introduction

doc_id=42 page=1 block_id=1-4 bbox=126.0,469.74,484.45,575.34 label=tbbt 7 15
line=7 fonts=F0-10.0 bbox=126.0,565.38,484.3,575.34                     :A prominent tradition within the framework of Head-Driven Phrase Structure Grammar
line=8 fonts=F0-10.0 iscore=0.21 bbox=126.0,553.38,484.12,563.34        :(HPSG,  Pollard and Sag 1994) has argued on linguistic grounds for analyses which license
line=9 fonts=F0-10.0 iscore=0.14 bbox=126.0,541.5,484.45,551.46         :so-called discontinuous constituents (Reape 1993; Kathol 1995; Richter and Sailer 2001;
line=10 fonts=F0-10.0 iscore=0.21 bbox=126.0,529.5,483.92,539.46        :Müller 1999a; Penn 1999; Donohue and Sag 1999; Bonami et al. 1999), joining researchers
line=11 fonts=F0-10.0 iscore=0.14 bbox=126.0,517.5,483.94,527.46        :in other linguistic frameworks, including Dependency Grammar (Bröker 1998; Plátek et al.
line=12 fonts=F0-10.0 iscore=0.08 bbox=126.0,505.62,483.78,515.58       :2001), Tree Adjoining grammar (Kroch and Joshi 1987; Rambow and Joshi 1994), Catego-
line=13 fonts=F0-10.0 iscore=0.23 bbox=126.0,493.62,483.92,503.58       :rial Grammar (Dowty 1996; Hepple 1994; Morrill 1995), and those positing tangled trees
line=14 fonts=F0-10.0 iscore=0.38 bbox=126.0,481.62,484.33,491.58       :(McCawley  1982; Huck 1985; Ojeda 1987; Blevins 1990) in rejecting string concatenation
line=15 fonts=F0-10.0,F0-7.0 iscore=0.17 bbox=126.0,469.74,341.53,480.31:as the fundamental mode of constituent combination.^{1}

doc_id=42 page=1 block_id=1-5 bbox=126.0,368.1,484.57,461.7 label=tbbbt 16 23
line=16 fonts=F0-10.0 bbox=126.0,451.74,484.19,461.7                    :More  recently, Müller (2003) argues that HPSG grammars  for German which  license dis-
line=17 fonts=F0-10.0 iscore=0.15 bbox=126.0,439.86,483.86,449.82       :continuous constituents should also be preferred on computational grounds. The idea un-
line=18 fonts=F0-10.0 iscore=0.21 bbox=126.0,427.86,484.26,437.82       :derlying Müller’s argument is that in order to license the many word order possibilities
line=19 fonts=F0-10.0,F4-10.0 iscore=0.14 bbox=126.0,415.86,484.4,425.82:(as, for instance, are found in the so-called Mittelfeld), a large number of phrase-structure
line=20 fonts=F0-10.0 iscore=0.29 bbox=126.0,403.98,484.14,413.94       :rules or equivalent specifications are needed, resulting in a large number of potential con-
line=21 fonts=F0-10.0 iscore=0.12 bbox=126.0,391.98,484.57,401.94       :stituents. Since there is no need to distinguish these different word orders in terms of the
line=22 fonts=F0-10.0 iscore=0.12 bbox=126.0,380.1,484.5,390.06         :resulting semantics, positing different rules for each order results only in wasted computa-
line=23 fonts=F0-10.0,F0-7.0 iscore=0.08 bbox=126.0,368.1,178.81,378.67 :tional effort.^{2}

doc_id=42 page=1 block_id=1-6 bbox=126.0,218.7,486.06,360.06 label=tbbbb 24 35
line=24 fonts=F0-10.0 bbox=126.0,350.1,484.46,360.06                    :At the same  time, the parsing technology that has been developed to license discontinu-
line=25 fonts=F0-10.0 iscore=0.07 bbox=126.0,338.22,483.84,348.18       :ous constituents (Johnson 1985; Reape  1991a; van Noord  1991; Covington  1990, 1992;
line=26 fonts=F0-10.0 iscore=0.14 bbox=126.0,326.22,484.2,336.18        :Müller 1996) is far less efficient than Earley’s algorithm, the standard parsing algorithm for
line=27 fonts=F0-10.0 iscore=0.14 bbox=126.0,314.34,483.99,324.3        :context-free grammars (Earley 1970), and so the cost of processing such kinds of grammars
line=28 fonts=F0-10.0 iscore=0.14 bbox=126.0,302.34,484.51,312.3        :in practice has outweighed the significant reduction in potential constituents that results
line=29 fonts=F0-10.0 iscore=0.07 bbox=126.0,290.34,484.27,300.3        :from the licensure of discontinuous constituents. The reason for this inefficiency is that dis-
line=30 fonts=F0-10.0,F0-7.0 iscore=0.27 bbox=126.0,278.46,486.06,289.03:continuous constituents must be characterized by the subset of the input they cover, ^{3} while
line=31 fonts=F0-10.0 iscore=0.20 bbox=126.0,266.46,484.13,276.42       :the parsing algorithms for context-free grammars can characterize potential constituents by
line=32 fonts=F0-10.0 iscore=0.43 bbox=126.0,254.46,484.29,264.42       :the string interval they cover (since all potential constituents in a context-free grammar are
line=33 fonts=F0-10.0 iscore=0.21 bbox=126.0,242.58,484.35,252.54       :contiguous). This presents a challenge to efficiency, since the number of possible subsets
line=34 fonts=F0-10.0 iscore=0.11 bbox=126.0,230.58,484.25,240.54       :grows at a much higher rate than the number of possible subintervals as the size of the input
line=35 fonts=F0-10.0 iscore=0.11 bbox=126.0,218.7,340.69,228.66        :increases. The following chart illustrates the problem:

doc_id=42 page=1 block_id=1-7 bbox=129.12,48.06,488.56,189.16 label=b 36 46
line=36 fonts=F0-6.0,F0-8.0 bbox=129.12,180.3,488.26,189.16            : ^{0} I would like to thank Chris Brew, and Bob Levine for their helpful comments. This paper reports joint work
line=37 fonts=F0-8.0 iscore=0.11 bbox=133.92,170.82,449.13,178.79      :  done  with Detmar Meurers and is an extended and revised version of Daniels and Meurers (2002).
line=38 fonts=F0-6.0,F0-8.0 iscore=0.12 bbox=129.12,161.1,488.54,169.96: ^{1} Interestingly, discontinuous constituents are also assumed in the two German treebanks (Skut et al. 1997;
line=39 fonts=F0-8.0 iscore=0.13 bbox=133.92,151.62,201.82,159.59      :  Hinrichs et al. 2000).
line=40 fonts=F0-6.0,F0-8.0 iscore=0.11 bbox=129.12,141.9,488.56,150.76: ^{2} It has been argued that such different word orders correspond to (subtle) semantic differences (see, for instance,
line=41 fonts=F0-8.0 iscore=0.11 bbox=133.92,132.42,488.47,140.39      :  Lenerz  2001). However, until a theory of these differences has been worked out, the only option is to license
line=42 fonts=F0-8.0 iscore=0.26 bbox=133.92,122.94,488.13,130.91      :  the indistinguishable word order variations as instances of the same semantic form. For most computational
line=43 fonts=F0-8.0 iscore=0.13 bbox=133.92,113.46,303.72,121.43      :  purposes this is also likely to be sufficient in general.
line=44 fonts=F0-6.0,F0-8.0 iscore=0.17 bbox=129.12,103.74,488.06,112.6: ^{3} Kasper et al. (1998), Müller (1999b), and Ramsay (1999) discuss some methods for restricting the search space
line=45 fonts=F0-8.0 iscore=0.06 bbox=133.92,94.26,381.66,102.23       :  of discontinuous constituency parsing, but the fundamental problem remains.
line=46 fonts=F0-10.0 iscore=0.00 bbox=303.48,48.06,308.46,58.02       :                                                    1

doc_id=42 page=2 block_id=2-1 bbox=180.48,633.42,430.86,703.5 label=tt 47 52
line=47 fonts=F0-10.0 bbox=180.48,693.54,430.86,703.5                                   :            Length of sentence Possible sub-intervals Possible subsets
line=48 fonts=F0-10.0 iscore=0.00 bbox=215.88,681.18,404.11,691.14                      :                    5                   10                  32
line=49 fonts=F0-10.0 iscore=0.33 bbox=213.36,669.3,409.09,679.26                       :                   10                   45                1024
line=50 fonts=F0-10.0 iscore=1.00 bbox=213.36,657.3,411.49,667.26                       :                   15                   105               32768
line=51 fonts=F0-10.0 iscore=0.67 bbox=213.36,645.3,416.42,655.26                       :                   20                   190              1048576
line=52 fonts=F0-10.0,F0-7.0,F4-10.0,F4-7.0 iscore=0.00 bbox=215.88,633.42,410.72,643.99:                    n                  O(n^{2})           O(2^{n})

doc_id=42 page=2 block_id=2-2 bbox=126.0,474.3,484.5,615.66 label=tbt 53 64
line=53 fonts=F0-10.0 bbox=126.0,605.7,484.5,615.66              :The goal of this paper is to present a general parsing algorithm which is as efficient as Ear-
line=54 fonts=F0-10.0 iscore=0.06 bbox=126.0,593.82,483.76,603.78:ley’s algorithm for context-free grammars when enough word order information is available
line=55 fonts=F0-10.0 iscore=0.40 bbox=126.0,581.82,483.93,591.78:and then degrades gradually in efficiency in relation to the number and kind of discontinu-
line=56 fonts=F0-10.0 iscore=0.12 bbox=126.0,569.94,484.45,579.9 :ities permitted by a grammar. This idea is closely related to the proposal by Suhre (1999).
line=57 fonts=F0-10.0 iscore=0.19 bbox=126.0,557.94,484.08,567.9 :However, while he focuses on formal language properties and provides valuable worst-case
line=58 fonts=F0-10.0 iscore=0.14 bbox=126.0,545.94,484.31,555.9 :complexity results, this paper focuses on the practical aspects of ensuring that order con-
line=59 fonts=F0-10.0 iscore=0.19 bbox=126.0,534.06,484.08,544.02:straints are used for efficient lookup of edges in the chart during completion and to limit
line=60 fonts=F0-10.0 iscore=0.12 bbox=126.0,522.06,483.84,532.02:the number of rules considered for prediction. The algorithm described herein presents a
line=61 fonts=F0-10.0 iscore=0.21 bbox=126.0,510.06,484.31,520.02:method for compiling order constraints into two kinds of bitmasks. By using these bitmasks
line=62 fonts=F0-10.0 iscore=0.14 bbox=126.0,498.18,484.06,508.14:in edge indexing, the algorithm eliminates instances of the generate-and-test paradigm, al-
line=63 fonts=F0-10.0 iscore=0.27 bbox=126.0,486.18,484.07,496.14:lowing the parser to check both dominance and word order relations in a tightly integrated
line=64 fonts=F0-10.0 iscore=0.07 bbox=126.0,474.3,144.37,484.26 :way.

doc_id=42 page=2 block_id=2-3 bbox=126.0,408.54,484.4,466.26 label=tbbt 65 69
line=65 fonts=F0-10.0 bbox=126.0,456.3,484.4,466.26              :The algorithm proposed  here also makes it possible to process the daughters of a given
line=66 fonts=F0-10.0 iscore=0.25 bbox=126.0,444.3,484.03,454.26 :rule in any order. As such, it extends the notion of a head-driven algorithm (Kay 1990;
line=67 fonts=F0-10.0 iscore=0.19 bbox=126.0,432.42,483.68,442.38:van Noord 1991) by additionally ordering the non-head daughters. This gives the grammar
line=68 fonts=F0-10.0 iscore=0.06 bbox=126.0,420.42,484.06,430.38:writer a finer level of control over the parsing strategy used for each rule, to the point where
line=69 fonts=F0-10.0 iscore=0.11 bbox=126.0,408.54,406.42,418.5 :each rule can be presented in the order that most facilitates processing.

doc_id=42 page=2 block_id=2-4 bbox=126.0,354.66,484.21,400.5 label=tbbb 70 73
line=70 fonts=F0-10.0 bbox=126.0,390.54,483.97,400.5             :The paper will first introduce the grammar format assumed throughout, and then present the
line=71 fonts=F0-10.0 iscore=0.14 bbox=126.0,378.66,484.21,388.62:algorithmic building blocks for the parser. This is followed by an outline and illustration
line=72 fonts=F0-10.0 iscore=0.14 bbox=126.0,366.66,484.13,376.62:of the parsing algorithm itself; the paper then concludes with some evaluatory remarks and
line=73 fonts=F0-10.0 iscore=0.14 bbox=126.0,354.66,243.34,364.62:directions for future research.

doc_id=42 page=2 block_id=2-5 bbox=126.0,319.02,341.92,330.98 label=bt 74 74
line=74 fonts=F3-12.0 bbox=126.0,319.02,341.92,330.98:2 Describing Discontinuous Consitituency

doc_id=42 page=2 block_id=2-6 bbox=126.0,153.3,484.59,300.78 label=bbt 75 86
line=75 fonts=F0-10.0 bbox=126.0,290.82,484.56,300.78                    :The idea of discontinuous consitituency was first introduced into HPSG in a series of pa-
line=76 fonts=F0-10.0 iscore=0.20 bbox=126.0,278.82,483.32,288.78        :pers by Reape (1989, 1990, 1991b, 1993, 1994, 1996), who proposed the idea that word
line=77 fonts=F0-10.0,F4-10.0 iscore=0.32 bbox=126.0,266.94,484.43,276.9 :order was determined not at the level of the local tree, but at the level of the order domain
line=78 fonts=F0-10.0 iscore=0.16 bbox=126.0,254.94,484.59,264.9         :which could potentially span multiple local trees. Each pre-terminal has a corresponding
line=79 fonts=F0-10.0 iscore=0.38 bbox=126.0,243.06,484.28,253.02        :order domain; as constituents combine to form larger constituents, so their order domains
line=80 fonts=F0-10.0 iscore=0.54 bbox=126.0,231.06,483.71,241.02        :combine  to form larger order domains. In particular, each daughter’s order domain enters
line=81 fonts=F0-10.0,F4-10.0 iscore=0.13 bbox=126.0,219.06,484.01,229.02:its mother’s order domain in one of two ways: by being set-unioned in (domain union),
line=82 fonts=F0-10.0,F4-10.0 iscore=0.17 bbox=126.0,207.18,484.02,217.14:or by being directly inserted as a unit in which the word order has been fixed (domain in-
line=83 fonts=F0-10.0,F4-10.0 iscore=0.28 bbox=126.0,195.18,483.93,205.14:sertion). Later work (Kathol and Pollard 1995; Kathol 1995; Yatabe 1996) introduced the
line=84 fonts=F0-10.0,F4-10.0 iscore=0.27 bbox=126.0,183.18,483.73,193.14:notion of partial compaction, in which only a portion of the daughter’s order domain is
line=85 fonts=F0-10.0 iscore=0.07 bbox=126.0,171.3,230.88,181.26         :isolated prior to set-union.
line=86 fonts=F0-10.0 iscore=0.40 bbox=126.0,153.3,259.24,163.26         :Domain  insertion has two effects:

doc_id=42 page=2 block_id=2-7 bbox=141.0,48.06,484.43,143.34 label=bbb 87 90
line=87 fonts=F0-10.0,F3-10.0,F5-10.0 bbox=141.0,133.38,484.39,143.34:    • Compaction:  The  terminal yield of a domain-inserted non-terminal contains all and
line=88 fonts=F0-10.0 iscore=0.12 bbox=150.96,121.5,484.43,131.46    :      only the terminal yield of the nodes it dominates – there are no holes or additional
line=89 fonts=F0-10.0 iscore=0.06 bbox=150.96,109.5,180.02,119.46    :      strings.
line=90 fonts=F0-10.0 iscore=0.00 bbox=303.48,48.06,308.46,58.02     :                                          2

doc_id=42 page=3 block_id=3-1 bbox=141.0,668.1,484.63,701.94 label=ttt 91 93
line=91 fonts=F0-10.0,F3-10.0,F5-10.0 bbox=141.0,691.98,484.63,701.94:   •  Isolation: Precedence statements only constrain the order among elements within
line=92 fonts=F0-10.0 iscore=0.15 bbox=150.96,679.98,484.18,689.94   :      a local domain. In other words, precedence constraints can never apply across do-
line=93 fonts=F0-10.0 iscore=0.08 bbox=150.96,668.1,177.25,678.06    :      mains.

doc_id=42 page=3 block_id=3-2 bbox=126.0,600.42,484.74,658.14 label=ttb 94 98
line=94 fonts=F0-10.0,F3-10.0 bbox=126.0,648.18,484.74,658.14                    :To illustrate the second of these effects, consider a local tree A consisting of two daughters:
line=95 fonts=F0-10.0,F3-10.0,F6-10.0 iscore=0.20 bbox=126.0,636.18,483.98,646.14:B has order domain [1, 2] and C has order domain [3, 4]. If B is domain-inserted and A is
line=96 fonts=F0-10.0,F3-10.0 iscore=0.10 bbox=126.0,624.3,483.9,634.26          :domain-unioned, then the only possible orders for A are as shown in Figure 1. If both were
line=97 fonts=F0-10.0 iscore=0.24 bbox=126.0,612.3,484.07,622.26                 :domain-unioned, all twenty-four orderings would be licensed. Thus every domain-unioned
line=98 fonts=F0-10.0 iscore=0.10 bbox=126.0,600.42,306.11,610.38                :constituent may potentially be discontinuous.

doc_id=42 page=3 block_id=3-3 bbox=175.92,570.3,404.87,583.62 label=tbt 99 99
line=99 fonts=F0-10.0 bbox=175.92,570.3,404.87,583.62:         A)     A       B)      A       C)     A

doc_id=42 page=3 block_id=3-4 bbox=176.16,481.26,291.84,555.54 label=tbbtl 100 103
line=100 fonts=F0-10.0 bbox=192.36,545.58,289.01,555.54            :           B        C     B
line=101 fonts=F0-10.0 iscore=0.75 bbox=189.48,520.74,291.84,530.82:           12   3   4     12
line=102 fonts=F0-10.0 iscore=0.00 bbox=176.16,505.98,276.16,519.3 :        D)     A        E)
line=103 fonts=F0-10.0 iscore=0.00 bbox=189.72,481.26,285.89,491.22:           B        C     B

doc_id=42 page=3 block_id=3-5 bbox=303.84,481.26,432.17,555.54 label=tbbtr 104 107
line=104 fonts=F0-10.0 bbox=335.04,545.58,432.17,555.54           :                                   C     B        C
line=105 fonts=F0-10.0 iscore=0.60 bbox=310.8,520.74,431.1,530.82 :                               4   3     3   12   4
line=106 fonts=F0-10.0 iscore=0.20 bbox=303.84,505.98,402.71,519.3:                              A        F)    A
line=107 fonts=F0-10.0 iscore=0.00 bbox=331.8,481.26,430.13,491.22:                                  C      B        C

doc_id=42 page=3 block_id=3-6 bbox=190.56,425.82,432.96,466.5 label=tbbb 108 109
line=108 fonts=F0-10.0 bbox=190.56,456.42,432.96,466.5             :             4    12    3       3    4   12       4    3    12
line=109 fonts=F0-10.0 iscore=0.12 bbox=212.16,425.82,398.87,435.78:                  Figure 1: Domain Insertion and Domain Union

doc_id=42 page=3 block_id=3-7 bbox=126.0,244.86,484.46,393.06 label=bt 110 120
line=110 fonts=F3-10.0 bbox=126.0,383.1,220.66,393.06                            :2.1 Grammar   Format
line=111 fonts=F0-10.0 iscore=0.06 bbox=126.0,358.38,483.86,368.34               :Truly free word order is fairly rare among the world’s languages, however, and so a system
line=112 fonts=F0-10.0 iscore=0.31 bbox=126.0,346.5,483.96,356.46                :for constraining word order within each order domain is needed. Following Suhre (1999),
line=113 fonts=F0-10.0 iscore=0.33 bbox=126.0,334.5,484.21,344.46                :a subset of the linear specification language proposed by Götz and Penn (1997) is used
line=114 fonts=F0-10.0,F1-10.0 iscore=0.13 bbox=126.0,322.5,484.27,332.46        :to serve this purpose. In particular, the syntax of ID/LP rules (as commonly used for
line=115 fonts=F0-10.0 iscore=0.13 bbox=126.0,310.62,484.07,320.58               :describing GPSGs  (Gazdar et al. 1985); see, e.g. (Shieber 1984)) can be augmented with
line=116 fonts=F0-10.0 iscore=0.29 bbox=126.0,298.62,483.99,308.58               :a means for specifying when and how domains are formed. The resulting grammar format
line=117 fonts=F0-10.0 iscore=0.21 bbox=126.0,286.62,484.31,296.58               :is, of course, interpreted differently when discontinuous constitutents are allowed, but the
line=118 fonts=F0-10.0 iscore=0.21 bbox=126.0,274.74,484.46,284.7                :underlying intuition remains the same. As a result, the grammars presented here will be
line=119 fonts=F0-10.0,F0-7.0,F1-10.0 iscore=0.14 bbox=126.0,262.74,343.57,273.31:referred to as Generalized ID/LP (GIDLP) grammars.^{4}
line=120 fonts=F0-10.0 iscore=0.14 bbox=126.0,244.86,291.35,254.82               :A GIDLP  grammar  consists of four parts:

doc_id=42 page=3 block_id=3-8 bbox=137.64,201.06,244.84,234.9 label=bbt 121 123
line=121 fonts=F0-10.0 bbox=137.64,224.94,225.66,234.9             :   1) A root declaration.
line=122 fonts=F0-10.0 iscore=0.50 bbox=137.64,212.94,242.63,222.9 :   2) A set of lexical entries.
line=123 fonts=F0-10.0 iscore=0.83 bbox=137.64,201.06,244.84,211.02:   3) A set of grammar rules.

doc_id=42 page=3 block_id=3-9 bbox=126.0,145.26,484.78,191.1 label=bbbt 124 127
line=124 fonts=F0-10.0 bbox=126.0,181.14,484.38,191.1                                      :The root declaration states the start symbol of the grammar and those order constraints
line=125 fonts=F0-10.0,F4-10.0,F5-10.0 iscore=0.29 bbox=126.0,169.26,484.21,179.22         :which hold in the root domain. Lexical entries have the form A → t, linking the preterminal
line=126 fonts=F0-10.0,F4-10.0,F5-10.0,F6-10.0 iscore=0.30 bbox=126.24,157.26,484.78,167.22:A to the terminal t. Grammar rules have the form A → α; L; I. Here A is a non-terminal,
line=127 fonts=F0-10.0,F0-7.0,F4-10.0,F6-10.0 iscore=0.30 bbox=126.0,145.26,484.71,155.83  :α a list^{5} of non-terminals, L a set of order constraints, and I a set of isolation statements.

doc_id=42 page=3 block_id=3-10 bbox=129.12,48.06,488.8,136.96 label=bbbb 128 133
line=128 fonts=F0-6.0,F0-8.0 bbox=129.12,128.1,487.86,136.96                  : ^{4} Suhre (1999) refers to a similar grammar class as LSL grammars, but this usage is at odds with the much more
line=129 fonts=F0-8.0 iscore=0.05 bbox=133.92,118.62,297.41,126.59            :  extensive LSL described by (Götz and Penn 1997).
line=130 fonts=F0-6.0,F0-8.0,F6-8.0 iscore=0.10 bbox=129.12,108.9,488.8,117.76: ^{5} Note that in contrast to phrase structure rules, the order of the non-terminals in α is irrelevant for the interpre-
line=131 fonts=F0-8.0 iscore=0.35 bbox=133.92,99.42,488.68,107.39             :  tation of the rule; it only determines the order of processing. This will have a significant impact on grammar
line=132 fonts=F0-8.0 iscore=0.11 bbox=133.92,89.94,265.68,97.91              :  development,  as described in section 6.2.
line=133 fonts=F0-10.0 iscore=0.00 bbox=303.48,48.06,308.46,58.02             :                                                    3

doc_id=42 page=4 block_id=4-1 bbox=126.0,656.1,484.55,701.94 label=tt 134 137
line=134 fonts=F0-10.0,F4-10.0,F6-10.0 bbox=126.24,691.98,484.4,701.94    :A and α are the left-hand side (LHS) and right-hand side (RHS) of the rule, L establishes
line=135 fonts=F0-10.0,F4-10.0 iscore=0.24 bbox=126.0,679.98,484.37,689.94:the order constraints under which the rule applies, and I defines the domains that will be
line=136 fonts=F0-10.0,F4-10.0 iscore=0.30 bbox=126.0,668.1,484.55,678.06 :created as a result. Both L and I can be empty; thus the simplest type of rule is shown in
line=137 fonts=F0-10.0 iscore=0.05 bbox=126.0,656.1,140.11,666.06         :(1).

doc_id=42 page=4 block_id=4-2 bbox=126.0,582.42,484.61,641.22 label=tb 138 141
line=138 fonts=F0-10.0,F5-10.0 bbox=131.04,631.26,196.43,641.22          : (1) S → NP, VP
line=139 fonts=F0-10.0,F3-10.0 iscore=0.18 bbox=126.0,606.3,484.61,616.26:This rule says that an S may immediately dominate an NP and a VP, with no constraints
line=140 fonts=F0-10.0,F3-10.0 iscore=0.18 bbox=126.0,594.3,483.86,604.26:on the relative ordering of NP and VP. One may precede the other, or their daughters may
line=141 fonts=F0-10.0 iscore=0.12 bbox=126.0,582.42,184.2,592.38        :be interleaved.

doc_id=42 page=4 block_id=4-3 bbox=126.0,447.54,485.53,559.86 label=btttt 142 149
line=142 fonts=F3-10.0 bbox=126.0,549.9,229.5,559.86                            :2.1.1 Order  Constraints
line=143 fonts=F0-10.0,F4-10.0 iscore=0.13 bbox=126.0,525.18,484.52,535.14      :Order constraints are used in two places within a grammar: on individual rules (as rule-
line=144 fonts=F0-10.0,F0-7.0,F4-10.0 iscore=0.27 bbox=126.0,513.3,485.53,523.87:level constraints) or in isolation statements (as domain-level constraints). In this system,^{6}
line=145 fonts=F0-10.0 iscore=0.14 bbox=126.0,501.3,484.39,511.26               :all order constraints take the form of precedence constraints: given two elements in the
line=146 fonts=F0-10.0 iscore=0.07 bbox=126.0,489.42,484.16,499.38              :same  domain, one must  completely precede the other for the resulting parse to be valid.
line=147 fonts=F0-10.0 iscore=0.27 bbox=126.0,477.42,484.22,487.38              :Precedence constraints may optionally require immediate precedence: not only must the
line=148 fonts=F0-10.0 iscore=0.14 bbox=126.0,465.42,460.91,475.38              :constituents appear in a certain order, but there must also be no intervening material.
line=149 fonts=F0-10.0 iscore=0.14 bbox=126.0,447.54,356.5,457.5                :These two types of precedence are represented as follows:

doc_id=42 page=4 block_id=4-4 bbox=141.0,409.62,284.03,437.58 label=btttbt 150 151
line=150 fonts=F0-10.0,F3-10.0,F5-10.0,F6-10.0 bbox=141.0,427.62,259.53,437.58    :   • Weak precedence: A < B.
line=151 fonts=F0-10.0,F3-10.0,F5-10.0 iscore=0.33 bbox=141.0,409.62,284.03,419.58:   • Immediate precedence: A ≪ B.

doc_id=42 page=4 block_id=4-5 bbox=126.0,377.82,484.18,399.66 label=btttbbt 152 153
line=152 fonts=F0-10.0,F4-10.0 bbox=126.0,389.7,484.18,399.66    :It is assumed that A and B do not overlap, nor may either dominate the other (it would
line=153 fonts=F0-10.0 iscore=0.17 bbox=126.0,377.82,422.3,387.78:otherwise be impossible to express an order constraint on a recursive rule).

doc_id=42 page=4 block_id=4-6 bbox=126.0,276.18,484.79,369.78 label=btttbbbt 154 161
line=154 fonts=F0-10.0,F4-10.0 bbox=126.0,359.82,484.46,369.78            :Here, the symbols A and B may be descriptions or tokens. When parsing atomic categories
line=155 fonts=F0-10.0 iscore=0.19 bbox=126.0,347.94,484.79,357.9         :(as assumed in this paper), a description is simply a category label; as such, a constraint
line=156 fonts=F0-10.0 iscore=0.12 bbox=126.0,335.94,483.74,345.9         :involving descriptions may apply more than once within a given rule or domain. Tokens, on
line=157 fonts=F0-10.0 iscore=0.27 bbox=126.0,323.94,484.34,333.9         :the other hand, are used in rule-level constraints to indicate a particular RHS member; any
line=158 fonts=F0-10.0 iscore=0.20 bbox=126.0,312.06,484.01,322.02        :constraint. In this paper, tokens are represented by numbers corresponding to superscripted
line=159 fonts=F0-10.0 iscore=0.13 bbox=126.0,300.06,484.59,310.02        :indices on the RHS categories. In this paper, a constraint written exclusively with tokens is
line=160 fonts=F0-10.0,F4-10.0 iscore=0.20 bbox=126.0,288.06,484.26,298.02:called a token-based constraint; one involving (perhaps exclusively) descriptions is called
line=161 fonts=F0-10.0,F4-10.0 iscore=0.09 bbox=126.0,276.18,199.88,286.14:description-based.

doc_id=42 page=4 block_id=4-7 bbox=126.0,234.3,484.22,268.14 label=btttbbbb 162 164
line=162 fonts=F0-10.0 bbox=126.0,258.18,484.14,268.14                   :For instance, in the rule given in (2), the constraint indicates that category marked as 3 in
line=163 fonts=F0-10.0,F3-10.0 iscore=0.29 bbox=126.0,246.3,484.22,256.26:the rule’s RHS (here, the second NP) must precede any consituents labelled V occurring in
line=164 fonts=F0-10.0 iscore=0.20 bbox=126.0,234.3,195.95,244.26        :the same domain.

doc_id=42 page=4 block_id=4-8 bbox=131.04,209.46,255.18,220.03 label=bttb 165 165
line=165 fonts=F0-10.0,F0-7.0,F5-10.0,F6-10.0 bbox=131.04,209.46,255.18,220.03: (2) A → NP^{1}, V^{2}, NP^{3} ; 3 < V

doc_id=42 page=4 block_id=4-9 bbox=126.0,136.74,484.49,194.46 label=btb 166 170
line=166 fonts=F0-10.0 bbox=126.0,184.5,484.49,194.46             :Constraints can therefore be classified along two dimensions: their location, whether rule-
line=167 fonts=F0-10.0 iscore=0.08 bbox=126.0,172.5,484.05,182.46 :level or domain-level; and their composition, description-based (involving at least one de-
line=168 fonts=F0-10.0 iscore=0.08 bbox=126.0,160.62,484.15,170.58:scription) or token-based (involving no descriptions). Note, however, that domain-level
line=169 fonts=F0-10.0 iscore=0.29 bbox=126.0,148.62,484.35,158.58:constraints are never token-based.  The constraint in (2) is an example of a rule-level,
line=170 fonts=F0-10.0 iscore=0.07 bbox=126.0,136.74,240.1,146.7  :description-based constraint.

doc_id=42 page=4 block_id=4-10 bbox=129.12,48.06,488.5,119.44 label=bb 171 174
line=171 fonts=F0-6.0,F0-8.0 bbox=129.12,110.58,488.47,119.44    : ^{6} Order constraints need not be based on precedence. Götz and Penn (1997), for instance, argue for an order
line=172 fonts=F0-8.0 iscore=0.11 bbox=133.92,101.1,488.5,109.07 :  constraint of the form “constituent X occupies nth position within this constituent”. The GIDLP format does
line=173 fonts=F0-8.0 iscore=0.19 bbox=133.92,91.62,240.09,99.59 :  not make use of such constraints.
line=174 fonts=F0-10.0 iscore=0.00 bbox=303.48,48.06,308.46,58.02:                                                   4

doc_id=42 page=5 block_id=5-1 bbox=126.0,619.5,484.66,701.94 label=ttttt 175 180
line=175 fonts=F3-10.0 bbox=126.0,691.98,237.13,701.94                            :2.1.2 Isolation Statements
line=176 fonts=F0-10.0 iscore=0.14 bbox=126.0,667.26,484.47,677.22                :The fourth rule component, the set of isolation statements, establishes the domains that will
line=177 fonts=F0-10.0,F5-10.0,F6-10.0 iscore=0.10 bbox=126.0,655.38,484.65,665.34:be created by the rule. Each isolation statement has the form 〈α, L, A〉, where α is a list of
line=178 fonts=F0-10.0,F4-10.0 iscore=0.35 bbox=126.0,643.38,484.31,653.34        :tokens, L is a list of domain-level order constraints, and A is the resulting category. Such a
line=179 fonts=F0-10.0,F6-10.0 iscore=0.24 bbox=126.0,631.5,484.66,641.46         :statement indicates that the constituents referenced in α will form a domain with category
line=180 fonts=F0-10.0,F4-10.0 iscore=0.07 bbox=126.24,619.5,286.59,629.46        :A inside which the constraints in L hold.

doc_id=42 page=5 block_id=5-2 bbox=126.0,541.74,484.77,611.58 label=ttttbt 181 186
line=181 fonts=F0-10.0 bbox=126.0,601.62,484.48,611.58            :The  nature of the isolation statement(s) on a rule therefore determines the relationship
line=182 fonts=F0-10.0 iscore=0.21 bbox=126.0,589.62,483.92,599.58:between  the mother’s order domain and the daughters’ order domains. If a given daughter
line=183 fonts=F0-10.0 iscore=0.27 bbox=126.0,577.62,484.54,587.58:is never referenced in an isolation statement, then it will be set-unioned into its mother’s
line=184 fonts=F0-10.0 iscore=0.24 bbox=126.0,565.74,484.77,575.7 :domain;  if it is the sole category in an isolation statement, it will be directly inserted into
line=185 fonts=F0-10.0 iscore=0.12 bbox=126.0,553.74,484.49,563.7 :its mother’s domain; and if it occurs along with other categories in an isolation statement,
line=186 fonts=F0-10.0 iscore=0.07 bbox=126.0,541.74,314.25,551.7 :it will be part of a partially compacted element.

doc_id=42 page=5 block_id=5-3 bbox=126.0,458.1,485.93,533.82 label=ttttbb 187 192
line=187 fonts=F0-10.0 bbox=126.0,523.86,484.39,533.82                   :It is because of partial compaction that the third component in the isolation statement – the
line=188 fonts=F0-10.0 iscore=0.19 bbox=126.0,511.86,484.32,521.82       :result category – is needed: if only singleton constituents could be compacted, the result
line=189 fonts=F0-10.0 iscore=0.25 bbox=126.0,499.98,484.29,509.94       :category would just be the same as the compacted category. But since the the domain that
line=190 fonts=F0-10.0,F0-7.0 iscore=0.31 bbox=126.0,487.98,485.93,498.55:results from partial compaction must be referencable from order constraints, ^{7} it must have
line=191 fonts=F0-10.0 iscore=0.21 bbox=126.0,475.98,450.63,485.94       :a way to respond to descriptions; this is accomplished through the result category.
line=192 fonts=F0-10.0 iscore=0.31 bbox=126.0,458.1,306.44,468.06        :Rules (3) and (4) illustrate these possibilities:

doc_id=42 page=5 block_id=5-4 bbox=131.04,417.3,375.53,443.83 label=tttb 193 194
line=193 fonts=F0-10.0,F0-7.0,F5-10.0 bbox=131.04,433.14,375.53,443.83           : (3) S → S^{1}, Conj^{2}, S^{3} ; 1≪ 2, 2 ≪ 3 ;〈[1], [], S〉, 〈[3], [], S〉
line=194 fonts=F0-10.0,F0-7.0,F5-10.0 iscore=0.28 bbox=131.04,417.3,299.79,427.87: (4) VP →  V^{1}, NP^{2}, NP^{3} ;;〈[1, 2], [], VP〉

doc_id=42 page=5 block_id=5-5 bbox=126.0,380.34,484.33,402.3 label=ttb 195 196
line=195 fonts=F0-10.0,F3-10.0 bbox=126.0,392.34,484.33,402.3            :In (3), each of the S categories forms its own domain; in (4), the V and the initial NP form
line=196 fonts=F0-10.0,F3-10.0 iscore=0.20 bbox=126.0,380.34,345.81,390.3:a domain named VP  to the exclusion of the second NP.

doc_id=42 page=5 block_id=5-6 bbox=126.0,311.34,484.26,357.9 label=tbt 197 199
line=197 fonts=F3-10.0 bbox=126.0,347.94,230.33,357.9             :2.2 Grammar   Examples
line=198 fonts=F0-10.0 iscore=0.13 bbox=126.0,323.22,484.26,333.18:The grammar  in (5) puts the pieces that have been presented together and illustrates how
line=199 fonts=F0-10.0 iscore=0.13 bbox=126.0,311.34,202.61,321.3 :they work together.

doc_id=42 page=5 block_id=5-7 bbox=131.04,247.5,297.67,296.34 label=tbbt 200 203
line=200 fonts=F0-10.0,F6-10.0 bbox=131.04,286.38,235.76,296.34                           : (5)  a) root(A, [B < D])
line=201 fonts=F0-10.0,F0-7.0,F5-10.0,F6-10.0 iscore=0.20 bbox=156.24,273.42,297.67,283.99:      b) A → B^{1}, C^{2} ;;〈[2], [B < D], C〉
line=202 fonts=F0-10.0,F0-7.0,F5-10.0 iscore=0.40 bbox=156.72,260.46,215.41,271.03        :      c) B → F^{1}, G^{2}
line=203 fonts=F0-10.0,F0-7.0,F5-10.0 iscore=0.80 bbox=156.24,247.5,216.01,258.07         :      d) C → D^{1}, E^{2}

doc_id=42 page=5 block_id=5-8 bbox=126.0,174.78,484.59,232.62 label=tbbbt 204 208
line=204 fonts=F0-10.0,F3-10.0 bbox=126.0,222.66,484.47,232.62                    :(5a) is the root declaration, stating that any input string must ultimately parse as an A and
line=205 fonts=F0-10.0 iscore=0.18 bbox=126.0,210.66,484.09,220.62                :giving the order constraints that hold in the root domain. (5b) is a grammar rule stating
line=206 fonts=F0-10.0,F3-10.0 iscore=0.32 bbox=126.0,198.66,484.59,208.62        :that an A may immediately dominate  a B and a C in either order; it further states that the
line=207 fonts=F0-10.0,F3-10.0,F6-10.0 iscore=0.21 bbox=126.0,186.78,484.19,196.74:C forms a domain  within which the constraint B < D holds. (5c) and (5d) give rules for B
line=208 fonts=F0-10.0,F3-10.0 iscore=0.05 bbox=126.0,174.78,204.54,184.74        :and C, respectively.

doc_id=42 page=5 block_id=5-9 bbox=126.0,144.9,484.72,166.86 label=tbbbb 209 210
line=209 fonts=F0-10.0 bbox=126.0,156.9,484.72,166.86                    :This grammar  also illustrates the effect of isolation on constraint application: the string
line=210 fonts=F0-10.0,F3-10.0 iscore=0.15 bbox=126.0,144.9,345.14,154.86:FDEG   (with parse tree (6)) is allowed by the grammar.

doc_id=42 page=5 block_id=5-10 bbox=129.12,48.06,488.3,113.08 label=b 211 213
line=211 fonts=F0-6.0,F0-8.0 bbox=129.12,104.22,488.3,113.08     : ^{7} Thus while normal compaction has the effect of removing elements from higher order constraints’ grasp, so to
line=212 fonts=F0-8.0 iscore=0.29 bbox=133.92,94.74,423.38,102.71:  speak, partial compaction does not affect the accessibility of the non-compacted elements.
line=213 fonts=F0-10.0 iscore=0.00 bbox=303.48,48.06,308.46,58.02:                                                    5

doc_id=42 page=6 block_id=6-1 bbox=131.04,688.74,212.97,701.94 label=tttt 214 214
line=214 fonts=F0-10.0,F4-10.0 bbox=131.04,688.74,212.97,701.94: (6)              A

doc_id=42 page=6 block_id=6-2 bbox=174.96,663.42,237.93,674.1 label=tttb 215 215
line=215 fonts=F0-10.0,F4-10.0 bbox=174.96,663.42,237.93,674.1:          [C]         B

doc_id=42 page=6 block_id=6-3 bbox=126.0,566.46,484.51,648.06 label=ttbtt 216 221
line=216 fonts=F4-10.0 bbox=150.36,638.1,238.0,648.06                             :      F     D      E    G
line=217 fonts=F0-10.0,F3-10.0 iscore=0.12 bbox=126.0,614.22,484.18,624.18        :There are two non-lexical domains in this tree: the root level containing C, F, and G, and
line=218 fonts=F0-10.0,F3-10.0,F6-10.0 iscore=0.33 bbox=126.0,602.22,484.51,612.18:the inner domain containing D and E. In each of these, the constraint B < D is vacuously
line=219 fonts=F0-10.0 iscore=0.22 bbox=126.0,590.34,484.02,600.3                 :obeyed. Thus the string is licensed by this grammar, even though on the surface, the input
line=220 fonts=F0-10.0,F3-10.0 iscore=0.25 bbox=126.0,578.34,484.12,588.3         :material dominated by B does not precede that dominated by D. Domain formation can
line=221 fonts=F0-10.0 iscore=0.14 bbox=126.0,566.46,320.31,576.42                :therefore be seen as a ‘barrier’ to LP application.

doc_id=42 page=6 block_id=6-4 bbox=126.0,524.58,484.21,558.42 label=ttbtb 222 224
line=222 fonts=F0-10.0 bbox=126.0,548.46,484.17,558.42            :As a second example, note that any context-free grammar can be encoded in this format.
line=223 fonts=F0-10.0 iscore=0.13 bbox=126.0,536.58,484.21,546.54:For example, the context-free rule in (7) carries the immediate dominance and precedence
line=224 fonts=F0-10.0 iscore=0.08 bbox=126.0,524.58,243.0,534.54 :relations made explicit in (8).

doc_id=42 page=6 block_id=6-5 bbox=131.04,483.78,460.21,509.58 label=ttbbt 225 226
line=225 fonts=F0-10.0,F5-10.0 bbox=131.04,499.62,215.11,509.58                   : (7) S → Nom  V Acc
line=226 fonts=F0-10.0,F0-7.0,F5-10.0 iscore=0.19 bbox=131.04,483.78,460.21,494.35: (8) S → V^{1}, Nom^{2}, Acc^{3} ; 2≪ 1, 1 ≪ 3 ;〈[1], [], V〉, 〈[2], [], Nom〉, 〈[3], [], Acc〉

doc_id=42 page=6 block_id=6-6 bbox=126.0,434.94,484.32,468.78 label=ttbbb 227 229
line=227 fonts=F0-10.0 bbox=126.0,458.82,484.32,468.78            :In GIDLP  terms, a context-free grammar rule implicitly requires that each element of the
line=228 fonts=F0-10.0 iscore=0.29 bbox=126.0,446.82,484.25,456.78:RHS  immediately  precede the next, and that each constituent be a contiguous portion of
line=229 fonts=F0-10.0 iscore=0.07 bbox=126.0,434.94,188.65,444.9 :the input string.

doc_id=42 page=6 block_id=6-7 bbox=126.0,399.3,239.29,411.26 label=tbt 230 230
line=230 fonts=F3-12.0 bbox=126.0,399.3,239.29,411.26:3 Parser Architecture

doc_id=42 page=6 block_id=6-8 bbox=126.0,359.1,484.22,381.06 label=tbbt 231 232
line=231 fonts=F0-10.0 bbox=126.0,371.1,484.22,381.06            :Now  that the GIDLP grammar format has been completely presented, the paper can address
line=232 fonts=F0-10.0 iscore=0.29 bbox=126.0,359.1,329.57,369.06:some core concepts behind the parsing mechanism.

doc_id=42 page=6 block_id=6-9 bbox=126.0,221.58,484.7,351.06 label=tbbbt 233 243
line=233 fonts=F0-10.0 bbox=126.0,341.1,484.51,351.06             :Traditional approaches to parsing with discontinuous constituents follow the generate-and-
line=234 fonts=F0-10.0 iscore=0.07 bbox=126.0,329.22,484.38,339.18:test model. Reape  (1991a), for instance, presents as a baseline an algorithm which gen-
line=235 fonts=F0-10.0 iscore=0.31 bbox=126.0,317.22,484.7,327.18 :erates all possible permutations of the input string and tests to see which are licensed by
line=236 fonts=F0-10.0 iscore=0.12 bbox=126.0,305.34,484.06,315.3 :a context-free grammar. Similarly, one can take a grammar licensing discontinuous con-
line=237 fonts=F0-10.0 iscore=0.15 bbox=126.0,293.34,484.29,303.3 :stituents and write out the discontinuity. All non-domain introducing rules must be folded
line=238 fonts=F0-10.0 iscore=0.08 bbox=126.0,281.34,483.81,291.3 :into the domain-introducing rules, and then each permutation of a freely-orderable RHS
line=239 fonts=F0-10.0 iscore=0.21 bbox=126.0,269.46,484.44,279.42:must become  a fixed-order rule on its own. With a phrase-structure parser that combines
line=240 fonts=F0-10.0 iscore=0.14 bbox=126.0,257.46,484.14,267.42:a context-free backbone with a relational constraint system, the equivalent approach is to
line=241 fonts=F0-10.0 iscore=0.19 bbox=126.0,245.46,484.2,255.42 :model order domains as a feature like any other, writing relations to express the word order
line=242 fonts=F0-10.0 iscore=0.24 bbox=126.0,233.58,484.08,243.54:requirements. In such a setup, the parser only checks that every part of the input string is
line=243 fonts=F0-10.0 iscore=0.06 bbox=126.0,221.58,302.27,231.54:actually part of the order domain of the root.

doc_id=42 page=6 block_id=6-10 bbox=126.0,167.82,485.17,213.66 label=tbbbb 244 247
line=244 fonts=F0-10.0 bbox=126.0,203.7,484.39,213.66                   :All of these approaches have some sort of permutative aspect to them and are therefore
line=245 fonts=F0-10.0,F0-7.0 iscore=0.06 bbox=126.0,191.7,485.17,202.27:factorial in the worst case.^{8} As a result, this paper approaches the task from a different
line=246 fonts=F0-10.0 iscore=0.25 bbox=126.0,179.82,484.17,189.78      :viewpoint: how  can a context-free parsing algorithm be adapted to handle GIDLP gram-
line=247 fonts=F0-10.0 iscore=0.08 bbox=126.0,167.82,433.66,177.78      :mars? In this case, Earley’s algorithm (Earley 1970) provides a starting point.

doc_id=42 page=6 block_id=6-11 bbox=129.12,48.06,489.05,132.76 label=b 248 252
line=248 fonts=F0-6.0,F0-8.0 bbox=129.12,123.78,488.96,132.76     : ^{8} It should certainly be acknowledged that various researchers have worked on making this kind of approach as
line=249 fonts=F0-8.0 iscore=0.26 bbox=133.92,114.42,488.43,122.39:  efficient as possible – see, e.g. (Kasper et al. 1998). A similar approach from the viewpoint of generation (i.e.
line=250 fonts=F0-8.0 iscore=0.16 bbox=133.92,104.94,489.05,112.91:  constrained permutation) can be found in the literature on ‘Shake and Bake’ machine translation (see (Brew
line=251 fonts=F0-8.0 iscore=0.06 bbox=133.92,95.46,247.92,103.43 :  1992) and references cited therein).
line=252 fonts=F0-10.0 iscore=0.00 bbox=303.48,48.06,308.46,58.02 :                                                    6

doc_id=42 page=7 block_id=7-1 bbox=126.0,619.5,485.77,701.94 label=tt 253 258
line=253 fonts=F3-10.0 bbox=126.0,691.98,222.77,701.94                   :3.1 Earley’s algorithm
line=254 fonts=F0-10.0,F0-7.0 iscore=0.08 bbox=126.0,667.26,485.77,677.95:In general terms, Earley’s algorithm is a memoizing algorithm for context-free parsing. ^{9}
line=255 fonts=F0-10.0 iscore=0.12 bbox=126.0,655.38,484.17,665.34       :As with any parsing algorithm, the problem is to take a grammar and an input string and
line=256 fonts=F0-10.0 iscore=0.12 bbox=126.0,643.38,484.25,653.34       :determine whether the grammar  in question licenses the input string, or in other words,
line=257 fonts=F0-10.0 iscore=0.21 bbox=126.0,631.5,484.41,641.46        :whether a series of context-free rewriting steps could transform the start symbol of the
line=258 fonts=F0-10.0,F0-7.0 iscore=0.07 bbox=126.0,619.5,252.37,630.07 :grammar  into the input string.^{10}

doc_id=42 page=7 block_id=7-2 bbox=126.0,541.74,484.48,611.58 label=tbt 259 264
line=259 fonts=F0-10.0 bbox=126.0,601.62,483.98,611.58                    :The operation of the algorithm description centers around two operations. In the first step,
line=260 fonts=F0-10.0 iscore=0.07 bbox=126.0,589.62,484.11,599.58        :hypotheses are formed  describing the potential expansions of the current target symbol;
line=261 fonts=F0-10.0,F4-10.0 iscore=0.08 bbox=126.0,577.62,484.48,587.58:this process is referred to as prediction. The second step combines information describing
line=262 fonts=F0-10.0 iscore=0.38 bbox=126.0,565.74,484.33,575.7         :the location of a subconstituent into an earlier hypothesis for the dominating constituent,
line=263 fonts=F0-10.0 iscore=0.21 bbox=126.0,553.74,484.14,563.7         :producing either a more specific hypothesis or a well-formed substring; this is referred to
line=264 fonts=F0-10.0,F4-10.0 iscore=0.07 bbox=126.0,541.74,183.58,551.7 :as completion.

doc_id=42 page=7 block_id=7-3 bbox=126.0,416.22,484.79,533.82 label=tbbt 265 274
line=265 fonts=F0-10.0,F4-10.0 bbox=126.0,523.86,484.3,533.82             :In traditional terms, the hypotheses are called active edges. They describe the potential for
line=266 fonts=F0-10.0 iscore=0.12 bbox=126.0,511.86,484.15,521.82        :a category to be found covering a span that includes a given location and state the additional
line=267 fonts=F0-10.0,F4-10.0 iscore=0.18 bbox=126.0,499.98,484.47,509.94:evidence that will be needed to confirm this hypothesis: the location of an active element
line=268 fonts=F0-10.0 iscore=0.13 bbox=126.0,487.98,484.68,497.94        :and the remaining RHS  categories. Active edges are created as the result of a prediction
line=269 fonts=F0-10.0 iscore=0.06 bbox=126.0,475.98,484.75,485.94        :step, and their RHSs grow smaller after each completion step. Once the RHS of an active
line=270 fonts=F0-10.0,F4-10.0 iscore=0.28 bbox=126.0,464.1,484.6,474.06  :edge is empty, the edge is referred to as a passive edge, as it now encodes the information
line=271 fonts=F0-10.0 iscore=0.33 bbox=126.0,452.1,484.28,462.06         :that a category has definitely been found at a certain location in the input; the passive edge
line=272 fonts=F0-10.0 iscore=0.18 bbox=126.0,440.22,484.5,450.18         :is said to ‘provide’ that category. Not all passive edges arise from completions, however;
line=273 fonts=F0-10.0,F4-10.0 iscore=0.17 bbox=126.0,428.22,484.79,438.18:the term lexical edges is used to refer to those passive edges that map lexical items in the
line=274 fonts=F0-10.0 iscore=0.06 bbox=126.0,416.22,274.98,426.18        :input string to preterminal categories.

doc_id=42 page=7 block_id=7-4 bbox=126.0,362.46,484.36,408.3 label=tbbbt 275 278
line=275 fonts=F0-10.0 bbox=126.0,398.34,483.57,408.3                     :Early work on parsing (Younger 1967; Kasami and Torii 1969) made use of the notion of a
line=276 fonts=F0-10.0 iscore=0.24 bbox=126.0,386.34,484.36,396.3         :well-formed substring table: a data structure containing those passive edges that had been
line=277 fonts=F0-10.0 iscore=0.36 bbox=126.0,374.46,484.01,384.42        :found at any given point. Earley’s algorithm extends this concept by storing both passive
line=278 fonts=F0-10.0,F4-10.0 iscore=0.36 bbox=126.0,362.46,368.19,372.42:and active edges in a data structure known as an active chart.

doc_id=42 page=7 block_id=7-5 bbox=126.0,296.7,484.46,354.54 label=tbbbbt 279 283
line=279 fonts=F0-10.0 bbox=126.0,344.58,484.06,354.54            :The parse begins by predicting the root symbol of the grammar. Each time an edge is added
line=280 fonts=F0-10.0 iscore=0.18 bbox=126.0,332.58,483.92,342.54:to the chart, the parser responds by triggering further prediction and completion steps. Once
line=281 fonts=F0-10.0 iscore=0.36 bbox=126.0,320.58,484.21,330.54:the chart has finished responding to the initial prediction and its consequences, every edge
line=282 fonts=F0-10.0 iscore=0.50 bbox=126.0,308.7,484.46,318.66 :in the chart spanning the entire input string whose LHS is the root symbol indicates a
line=283 fonts=F0-10.0 iscore=0.06 bbox=126.0,296.7,217.22,306.66 :successful recognition.

doc_id=42 page=7 block_id=7-6 bbox=126.0,195.06,484.5,288.78 label=tbbbbb 284 291
line=284 fonts=F0-10.0 bbox=126.0,278.82,484.29,288.78            :As a result, the edges in the chart at the end of the parse can be arranged into a tree, with
line=285 fonts=F0-10.0 iscore=0.29 bbox=126.0,266.82,484.5,276.78 :each edge having the active edge that created it as its parent. Each leaf in this tree represents
line=286 fonts=F0-10.0 iscore=0.17 bbox=126.0,254.82,484.16,264.78:an edge for which prediction and completion yielded no new edges. Thus all optimizations
line=287 fonts=F0-10.0 iscore=0.14 bbox=126.0,242.94,484.45,252.9 :will take two forms: reducing the amount of effort needed to compute a newly-predicted
line=288 fonts=F0-10.0 iscore=0.29 bbox=126.0,230.94,484.19,240.9 :or completed edge, and finding ways to make  the search tree smaller. If an edge can be
line=289 fonts=F0-10.0 iscore=0.24 bbox=126.0,219.06,484.13,229.02:identified for which no children will ever contribute to a successful parse, preventing that
line=290 fonts=F0-10.0 iscore=0.24 bbox=126.0,207.06,483.89,217.02:edge from  being added to the chart will prune that entire branch of the tree, leading to
line=291 fonts=F0-10.0 iscore=0.18 bbox=126.0,195.06,255.55,205.02:potentially considerable savings.

doc_id=42 page=7 block_id=7-7 bbox=126.12,48.06,488.8,137.68 label=b 292 296
line=292 fonts=F0-6.0,F0-8.0 bbox=129.12,128.82,488.29,137.68           : ^{9} The notion of a chart parser, introduced in (Kay 1980), postdates Earley’s algorithm. The algorithm is explained
line=293 fonts=F0-8.0 iscore=0.35 bbox=133.92,119.34,419.39,127.31      :  here in chart parsing terms (rather than Earley’s original terminology) to aid tranparency.
line=294 fonts=F0-6.0,F0-8.0 iscore=0.11 bbox=126.12,109.62,488.8,118.48:^{10} The remaining part of the parsing process deals with building the corresponding parse trees; this paper does not
line=295 fonts=F0-8.0 iscore=0.11 bbox=133.92,100.14,229.87,108.11      :  address this aspect of parsing.
line=296 fonts=F0-10.0 iscore=0.00 bbox=303.48,48.06,308.46,58.02       :                                                     7

doc_id=42 page=8 block_id=8-1 bbox=126.0,643.38,484.69,701.94 label=tt 297 300
line=297 fonts=F3-10.0 bbox=126.0,691.98,271.67,701.94            :3.2 Modifying  Earley’s Algorithm
line=298 fonts=F0-10.0 iscore=0.07 bbox=126.0,667.26,484.43,677.22:Before proceeding to the details of the GIDLP parsing algorithm, it is important to high-
line=299 fonts=F0-10.0 iscore=0.31 bbox=126.0,655.38,484.69,665.34:light two ways in which the GIDLP  parser differs at a high level from Earley’s original
line=300 fonts=F0-10.0 iscore=0.06 bbox=126.0,643.38,175.54,653.34:formulation.

doc_id=42 page=8 block_id=8-2 bbox=126.0,529.86,484.5,635.46 label=tbt 301 309
line=301 fonts=F0-10.0,F4-10.0 bbox=126.0,625.5,484.17,635.46     :In Earley’s original algorithm, a third operation – scanning – is used to insert lexical edges
line=302 fonts=F0-10.0 iscore=0.06 bbox=126.0,613.5,484.37,623.46 :into the chart when the active category is a terminal. The parser described here seeds
line=303 fonts=F0-10.0 iscore=0.18 bbox=126.0,601.62,484.5,611.58 :the chart with all of the lexical edges before the parse begins (so that only those lexi-
line=304 fonts=F0-10.0 iscore=0.24 bbox=126.0,589.62,484.48,599.58:cal rules are predicted whose lexical items appear in the input string). This is done to
line=305 fonts=F0-10.0 iscore=0.31 bbox=126.0,577.62,483.92,587.58:strengthen the bottom-up component,  which is important considering the overall goal of
line=306 fonts=F0-10.0 iscore=0.17 bbox=126.0,565.74,484.05,575.7 :parsing linearization-based HPSG grammars, where  much of the information guiding pars-
line=307 fonts=F0-10.0 iscore=0.13 bbox=126.0,553.74,484.28,563.7 :ing originates in the lexicon. Together with the ability (discussed in section 4.2.1) to de-
line=308 fonts=F0-10.0 iscore=0.25 bbox=126.0,541.74,484.16,551.7 :termine the order in which the righthand side categories of a rule are predicted, this allows
line=309 fonts=F0-10.0 iscore=0.19 bbox=126.0,529.86,435.77,539.82:the grammar  writer to, for example, specify a head-corner processing strategy.

doc_id=42 page=8 block_id=8-3 bbox=126.0,452.1,484.53,521.82 label=tbbt 310 315
line=310 fonts=F0-10.0 bbox=126.0,511.86,484.13,521.82            :A similar modification concerns the triggering of prediction and completion steps. In Ear-
line=311 fonts=F0-10.0 iscore=0.19 bbox=126.0,499.98,484.53,509.94:ley’s algorithm, a completion step is triggered each time a passive edge is added to the
line=312 fonts=F0-10.0 iscore=0.25 bbox=126.0,487.98,484.01,497.94:chart: all active edges seeking the category provided by the newly-added edge are com-
line=313 fonts=F0-10.0 iscore=0.19 bbox=126.0,475.98,484.5,485.94 :pleted with that edge. Likewise, a prediction step is triggered each time an active edge is
line=314 fonts=F0-10.0 iscore=0.18 bbox=126.0,464.1,483.98,474.06 :added to the chart, creating a new edge for each grammar rule that can generate the edge’s
line=315 fonts=F0-10.0 iscore=0.12 bbox=126.0,452.1,187.9,462.06  :active category.

doc_id=42 page=8 block_id=8-4 bbox=126.0,326.58,484.45,444.18 label=tbbb 316 325
line=316 fonts=F0-10.0 bbox=126.0,434.22,484.18,444.18            :With the GIDLP   parsing algorithm, however, completion must occur whenever  an edge
line=317 fonts=F0-10.0 iscore=0.19 bbox=126.0,422.22,484.4,432.18 :is added to the chart, regardless of whether the entered edge is active or passive. This
line=318 fonts=F0-10.0 iscore=0.19 bbox=126.0,410.34,484.37,420.3 :occurs as a result of the non-linearity of GIDLP parsing – because context-free parsing
line=319 fonts=F0-10.0 iscore=0.20 bbox=126.0,398.34,484.43,408.3 :effectively proceeds from left to right, Earley can assume that all possible active edges that
line=320 fonts=F0-10.0 iscore=0.17 bbox=126.0,386.34,484.37,396.3 :will need a given category will be present when the passive edge is added to the chart. In
line=321 fonts=F0-10.0 iscore=0.22 bbox=126.0,374.46,484.25,384.42:GIDLP   parsing, however, that assumption is invalid – an individual rule need not impose
line=322 fonts=F0-10.0 iscore=0.24 bbox=126.0,362.46,484.12,372.42:any particular order on its components, and even if it does, that order is by no means
line=323 fonts=F0-10.0 iscore=0.24 bbox=126.0,350.46,484.25,360.42:guaranteed to be compatible with the ordering imposed by any other rule. It is still the
line=324 fonts=F0-10.0 iscore=0.25 bbox=126.0,338.58,484.45,348.54:case, however, that active edges are only completed with passive edges, and passive edges
line=325 fonts=F0-10.0 iscore=0.14 bbox=126.0,326.58,217.11,336.54:only with active edges.

doc_id=42 page=8 block_id=8-5 bbox=126.0,233.58,484.42,304.02 label=bt 326 330
line=326 fonts=F3-10.0 bbox=126.0,294.06,304.15,304.02            :3.3 From  CFG  parsing to GIDLP  parsing
line=327 fonts=F0-10.0 iscore=0.07 bbox=126.0,269.46,484.2,279.42 :In the abstract form presented above, the algorithm can be applied to both context-free
line=328 fonts=F0-10.0 iscore=0.13 bbox=126.0,257.46,484.42,267.42:and GIDLP  grammars. To turn it into a concrete algorithm, two things must be addressed:
line=329 fonts=F0-10.0 iscore=0.29 bbox=126.0,245.58,484.25,255.54:how  the coverage of an edge is encoded, and how it is determined that two edges are
line=330 fonts=F0-10.0 iscore=0.06 bbox=126.0,233.58,172.77,243.54:compatible.

doc_id=42 page=8 block_id=8-6 bbox=126.0,48.06,486.04,225.54 label=bb 331 342
line=331 fonts=F0-10.0 bbox=126.0,215.58,484.03,225.54                                                 :For the ordinary context-free grammar case, the answers were provided by Earley (1970).
line=332 fonts=F0-10.0,F4-10.0,F4-7.0,F5-10.0,F6-10.0 iscore=0.11 bbox=126.0,202.26,485.29,213.66      :Edges have the form _{i}[A → α •_{j} β], which indicates a parse state in which the string from
line=333 fonts=F0-10.0,F4-10.0,F6-10.0 iscore=0.15 bbox=126.0,191.7,484.32,201.66                      :i to j is covered by α and an A will have been found if β is found immediately following
line=334 fonts=F0-10.0,F4-10.0,F6-10.0 iscore=0.35 bbox=127.44,179.82,484.17,189.78                    :j. In a passive edge, β is empty. An active edge, on the other hand, has a nonempty β, the
line=335 fonts=F0-10.0,F4-10.0 iscore=0.30 bbox=126.0,167.82,484.92,177.78                             :initial element of which is the active element, with j the active position. Newly-predicted
line=336 fonts=F0-10.0,F4-10.0,F4-7.0,F5-10.0,F6-10.0 iscore=0.32 bbox=126.0,154.38,485.25,165.78      :edges are of the form _{i}[A → •_{i} β], where i is the active position of the edge triggering
line=337 fonts=F0-10.0,F4-10.0,F4-7.0,F5-10.0,F6-10.0 iscore=0.30 bbox=126.0,142.5,486.04,153.9        :prediction. A passive edge _{k}[C → γ •_{l} ] is compatible with an active edge _{i}[A → α •_{j} Bβ]
line=338 fonts=F0-10.0,F1-10.0,F4-10.0,F4-7.0,F5-10.0,F6-10.0 iscore=0.17 bbox=126.0,130.5,451.42,141.9:when  j = k and C = B; the new edge _{i}[A → αB •_{l} β] covers the string from i to l.
line=339 fonts=F0-10.0 iscore=0.22 bbox=126.0,114.06,484.29,124.02                                     :For GIDLP   grammars, a discussion of edge coverage and edge compatibility must start
line=340 fonts=F0-10.0 iscore=0.18 bbox=126.0,102.06,484.06,112.02                                     :by describing the data structure used to encode the coverage of an edge in light of the
line=341 fonts=F0-10.0 iscore=0.06 bbox=126.0,90.06,288.23,100.02                                      :possibility of discontinuous constituents.
line=342 fonts=F0-10.0 iscore=0.00 bbox=303.48,48.06,308.46,58.02                                      :                                         8

doc_id=42 page=9 block_id=9-1 bbox=126.0,607.5,484.46,701.94 label=ttt 343 349
line=343 fonts=F3-10.0 bbox=126.0,691.98,288.15,701.94                    :3.3.1 Efficient edge coverage encoding
line=344 fonts=F0-10.0,F4-10.0 iscore=0.11 bbox=126.0,667.26,484.05,677.22:The single interval formed by i and j that was used to encode the coverage of the edges in
line=345 fonts=F0-10.0 iscore=0.26 bbox=126.0,655.38,484.34,665.34        :the context-free case is not sufficient to model edge coverage in a grammar that licenses
line=346 fonts=F0-10.0 iscore=0.20 bbox=126.0,643.38,484.46,653.34        :discontinuous constituents, as each edge may potentially be covered by a discontinuous
line=347 fonts=F0-10.0 iscore=0.20 bbox=126.0,631.5,484.45,641.46         :subset of the string. Johnson (1985) showed that this issue can be addressed by generalizing
line=348 fonts=F0-10.0,F4-10.0 iscore=0.33 bbox=126.0,619.5,484.39,629.46 :from single intervals to lists of intervals: for example, [1-3, 5] represents an edge that
line=349 fonts=F0-10.0 iscore=0.13 bbox=126.0,607.5,355.83,617.46         :covers the first, second, third, and fifth words of the input.

doc_id=42 page=9 block_id=9-2 bbox=126.0,493.98,485.86,599.58 label=ttbt 350 358
line=350 fonts=F0-10.0,F4-10.0 bbox=126.0,589.62,484.16,599.58            :As Johnson  (1985) pointed out, such lists of intervals are conceptually equivalent to bitvec-
line=351 fonts=F0-10.0,F4-10.0 iscore=0.14 bbox=126.0,577.62,484.93,587.58:tors – finite lists where each position holds a bit indicating whether the corresponding
line=352 fonts=F0-10.0 iscore=0.21 bbox=126.0,565.74,483.95,575.7         :string position is included. Reape (1991a), in an early paper on discontinuous parsing, uses
line=353 fonts=F0-10.0 iscore=0.25 bbox=126.0,553.74,484.24,563.7         :prolog lists to encode bitvectors, so that each position may be either ‘true’, ‘false’, or an
line=354 fonts=F0-10.0 iscore=0.25 bbox=126.0,541.74,484.1,551.7          :anonymous   prolog variable. As is known from  other applications, bitvectors can also be
line=355 fonts=F0-10.0,F0-7.0 iscore=0.23 bbox=126.0,529.86,485.86,540.43 :encoded  as integers by representing them as binary numbers, ^{11} with the least-significant
line=356 fonts=F0-10.0 iscore=0.06 bbox=126.0,517.86,484.06,527.82        :bit of the number corresponding to the leftmost word in the input string. (Note that this
line=357 fonts=F0-10.0 iscore=0.25 bbox=126.0,505.98,484.42,515.94        :representation can be confusing at first, as the leftmost word in the string is represented by
line=358 fonts=F0-10.0 iscore=0.38 bbox=126.0,493.98,474.21,503.94        :the rightmost digit in the standard representation of the vector’s corresponding number.)

doc_id=42 page=9 block_id=9-3 bbox=126.0,404.34,485.76,485.94 label=ttbb 359 365
line=359 fonts=F0-10.0 bbox=126.0,475.98,484.29,485.94                                  :The merits of each style of representation can best be determined by considering a set of
line=360 fonts=F0-10.0 iscore=0.12 bbox=126.0,464.1,484.24,474.06                       :relevant bitvector operations necessary for GIDLP parsing; these are given in the table that
line=361 fonts=F0-10.0,F0-7.0,F4-10.0,F8-10.0 iscore=0.28 bbox=126.0,452.1,485.76,462.67:follows. Here, x and y are bitvectors, p is a 0-based position index,^{12} and AND, OR, XOR, and
line=362 fonts=F0-10.0,F4-10.0,F8-10.0 iscore=0.28 bbox=126.0,440.22,484.47,450.18      :NOT are the ordinary bitwise operators. A position set to 1 is referred to as occupied instead
line=363 fonts=F0-10.0,F4-10.0 iscore=0.18 bbox=126.0,428.22,483.77,438.18              :of the more common  term active, which is avoided here in order to prevent confusion with
line=364 fonts=F0-10.0 iscore=0.19 bbox=126.0,416.22,484.21,426.18                      :the use of ‘active’ in the terms ‘active category’ and ‘active edge’. In the examples, the
line=365 fonts=F0-10.0 iscore=0.25 bbox=126.0,404.34,302.54,414.3                       :bitvectors are assumed to be five digits long.

doc_id=42 page=9 block_id=9-4 bbox=141.0,360.42,397.52,394.38 label=tbt 366 368
line=366 fonts=F0-10.0,F4-10.0,F5-10.0,F8-10.0 bbox=141.0,384.42,397.52,394.38:   •  SINGLETON(p): Gives the bitvector in which only p is occupied.
line=367 fonts=F0-10.0,F4-7.0 iscore=0.10 bbox=150.96,372.42,214.69,382.99    :      Computed  as 2^{p}
line=368 fonts=F0-10.0 iscore=0.25 bbox=150.96,360.42,278.9,370.38            :      Example: singleton(1) is 00010.

doc_id=42 page=9 block_id=9-5 bbox=141.0,318.66,467.05,352.5 label=tbbt 369 371
line=369 fonts=F0-10.0,F4-10.0,F5-10.0,F6-10.0,F8-10.0 bbox=141.0,342.54,392.86,352.5             :   •  OVERLAP(x, y): Is there any position occupied in both x and y?
line=370 fonts=F0-10.0,F4-10.0,F6-10.0,F8-10.0,F9-10.0 iscore=0.17 bbox=150.96,330.54,256.88,340.5:      Computed  as AND(x, y) 󿿼 0
line=371 fonts=F0-10.0 iscore=0.08 bbox=150.96,318.66,467.05,328.62                               :      Example: 10111 and 01010 have a bitwise-AND of 00010, and therefore overlap.

doc_id=42 page=9 block_id=9-6 bbox=141.0,276.78,358.73,310.62 label=tbbbt 372 374
line=372 fonts=F0-10.0,F4-10.0,F5-10.0,F6-10.0,F8-10.0 bbox=141.0,300.66,314.99,310.62     :   • COMBINE(x, y): Gives the union of x and y.
line=373 fonts=F0-10.0,F4-10.0,F6-10.0,F8-10.0 iscore=0.22 bbox=150.96,288.78,235.58,298.74:     Computed  as OR(x, y)
line=374 fonts=F0-10.0 iscore=0.25 bbox=150.96,276.78,358.73,286.74                        :     Example:  10110 and 01010 combine to form 11110.

doc_id=42 page=9 block_id=9-7 bbox=141.0,244.38,333.73,268.86 label=tbbbbt 375 376
line=375 fonts=F0-10.0,F4-10.0,F5-10.0,F8-10.0 bbox=141.0,258.9,333.73,268.86             :    • RBOUND(x): Most-significant occupied bit in x.
line=376 fonts=F0-10.0,F0-7.0,F4-10.0,F5-10.0 iscore=0.17 bbox=150.96,244.38,241.31,256.86:      Computed  as ⌊log_{2}(x)⌋

doc_id=42 page=9 block_id=9-8 bbox=141.0,181.14,449.15,226.98 label=tbbbbb 377 380
line=377 fonts=F0-10.0,F4-10.0,F5-10.0,F8-10.0 bbox=141.0,217.02,333.99,226.98                     :   •  LBOUND(x): Least-significant occupied bit in x.
line=378 fonts=F0-10.0,F4-10.0,F5-10.0,F6-10.0,F8-10.0 iscore=0.50 bbox=150.96,205.02,292.43,214.98:      Computed  as RBOUND(XOR(x, x − 1))
line=379 fonts=F0-10.0,F1-10.0 iscore=0.12 bbox=150.96,193.14,449.15,203.1                         :      Example: the left bound of 01010 is 1, which is the right bound of 00011 =
line=380 fonts=F0-10.0,F8-10.0 iscore=0.06 bbox=150.96,181.14,229.31,191.1                         :      XOR(01010, 01001).

doc_id=42 page=9 block_id=9-9 bbox=126.12,48.06,488.87,143.2 label=b 381 386
line=381 fonts=F0-6.0,F0-8.0 bbox=126.12,134.34,488.68,143.2             :^{11} For example, Davis (2002) mentions the use of integer representations of bit-vectors in the context of ma-
line=382 fonts=F0-8.0 iscore=0.24 bbox=133.92,124.86,488.37,132.83       :  chine translation, and some of the inspiration for the bitvector computations below stems from bitboard-based
line=383 fonts=F0-8.0,F2-8.0 iscore=0.20 bbox=133.92,115.38,299.2,123.35 :  computer  chess discussions on rec.games.chess.
line=384 fonts=F0-6.0,F0-8.0 iscore=0.06 bbox=126.12,105.54,488.87,114.52:^{12} The term 0-based (in contrast with 1-based), frequently used in computer science literature, means that the first
line=385 fonts=F0-8.0 iscore=0.12 bbox=133.92,96.18,264.83,104.15        :  element of the list is assigned position 0.
line=386 fonts=F0-10.0 iscore=0.00 bbox=303.48,48.06,308.46,58.02        :                                                    9

doc_id=42 page=10 block_id=10-1 bbox=141.0,668.1,375.7,701.94 label=ttt 387 389
line=387 fonts=F0-10.0,F4-10.0,F5-10.0,F8-10.0 bbox=141.0,691.98,375.7,701.94                   :    • PREFIX(p): Gives the bitvector covering all positions ≤ p.
line=388 fonts=F0-10.0,F0-7.0,F1-7.0,F4-7.0,F5-10.0 iscore=0.33 bbox=150.96,679.98,238.86,690.55:      Computed  as 2^{p}^{+}^{1} − 1
line=389 fonts=F0-10.0,F8-10.0 iscore=0.20 bbox=150.96,668.1,285.84,678.06                      :      Example: PREFIX(3) is 01111 (15).

doc_id=42 page=10 block_id=10-2 bbox=141.0,626.22,375.34,660.06 label=ttbt 390 392
line=390 fonts=F0-10.0,F4-10.0,F5-10.0,F8-10.0 bbox=141.0,650.1,375.34,660.06             :   •  SUFFIX(p): Gives the bitvector covering all positions ≥ p.
line=391 fonts=F0-10.0,F4-7.0,F5-10.0,F8-10.0 iscore=0.33 bbox=150.96,638.22,250.94,648.79:      Computed  as NOT(2^{x} − 1)
line=392 fonts=F0-10.0,F1-10.0,F8-10.0 iscore=0.17 bbox=150.96,626.22,322.87,636.18       :      Example: SUFFIX(3) is NOT(00111) = 11000.

doc_id=42 page=10 block_id=10-3 bbox=141.0,572.46,459.79,618.3 label=ttbbt 393 396
line=393 fonts=F0-10.0,F4-10.0,F5-10.0,F6-10.0,F8-10.0 bbox=141.0,608.34,459.79,618.3:   •  PRECEDE(x, y): Does x completely precede y (where x and y are assumed not to
line=394 fonts=F0-10.0 iscore=0.07 bbox=150.96,596.34,188.34,606.3                   :      overlap)?
line=395 fonts=F0-10.0,F4-10.0,F6-10.0 iscore=0.20 bbox=150.96,584.34,227.16,594.3   :      Equivalent to x < y
line=396 fonts=F0-10.0 iscore=0.17 bbox=150.96,572.46,316.39,582.42                  :      Example: 00011 (3) precedes 01100 (12).

doc_id=42 page=10 block_id=10-4 bbox=141.0,506.7,479.0,564.42 label=ttbbbt 397 401
line=397 fonts=F0-10.0,F4-10.0,F5-10.0,F6-10.0,F8-10.0 bbox=141.0,554.46,467.84,564.42             :   •  IPRECEDE(x, y): Does x immediately precede y (where x and y are assumed not to
line=398 fonts=F0-10.0 iscore=0.07 bbox=150.96,542.58,188.34,552.54                                :      overlap)?
line=399 fonts=F0-10.0,F1-10.0,F4-10.0,F5-10.0,F8-10.0 iscore=0.14 bbox=150.96,530.58,313.57,540.54:      Equivalent to RBOUND(x) = LBOUND(y) − 1
line=400 fonts=F0-10.0 iscore=0.11 bbox=150.96,518.58,479.0,528.54                                 :      Example: the right bound of 00011 is 1, and the left bound of 01100 is 2, so 00011
line=401 fonts=F0-10.0 iscore=0.06 bbox=150.96,506.7,267.58,516.66                                 :      immediately precedes 01100.

doc_id=42 page=10 block_id=10-5 bbox=141.0,452.82,483.32,498.66 label=ttbbbb 402 405
line=402 fonts=F0-10.0,F4-10.0,F5-10.0,F8-10.0 bbox=141.0,488.7,325.6,498.66               :   •  ISOLATED(x): Does x form a continuous unit?
line=403 fonts=F0-10.0,F1-10.0,F4-10.0,F8-10.0 iscore=0.14 bbox=150.96,476.82,390.28,486.78:      Equivalent to x = AND(PREFIX(RBOUND(x)), SUFFIX(LBOUND(x)))
line=404 fonts=F0-10.0,F8-10.0,F9-10.0 iscore=0.14 bbox=150.96,464.82,483.32,474.78        :      Example: With the vector 01101, AND(01111, 11111) is 01111 󿿼 01101, so 01101 is
line=405 fonts=F0-10.0 iscore=0.07 bbox=150.96,452.82,199.46,462.78                        :      not isolated.

doc_id=42 page=10 block_id=10-6 bbox=126.0,349.26,484.52,442.86 label=tbt 406 413
line=406 fonts=F0-10.0 bbox=126.0,432.9,484.4,442.86                      :The  primary advantage of lists of intervals is constant-time checking for isolation: if the
line=407 fonts=F0-10.0 iscore=0.21 bbox=126.0,421.02,484.46,430.98        :cardinality of the list of intervals is one, the edge is isolated. On the other hand, all of the
line=408 fonts=F0-10.0,F8-10.0 iscore=0.32 bbox=126.0,409.02,484.21,418.98:other operations needed to retrieve and use edges in parsing, such as OVERLAP and COMBINE,
line=409 fonts=F0-10.0 iscore=0.16 bbox=126.0,397.14,484.42,407.1         :are linear in the length of the lists of intervals (which, in the worst case, only differs from the
line=410 fonts=F0-10.0 iscore=0.21 bbox=126.0,385.14,484.52,395.1         :length of the input string by a constant multiple). Reape cites the flexibility of the list-based
line=411 fonts=F0-10.0 iscore=0.06 bbox=126.0,373.14,484.3,383.1          :representation (i.e. the possibility to mark a position as unknown by using an anonymous
line=412 fonts=F0-10.0 iscore=0.29 bbox=126.0,361.26,484.13,371.22        :variable) as an advantage of that method of representation, but the list representation incurs
line=413 fonts=F0-10.0 iscore=0.21 bbox=126.0,349.26,386.11,359.22        :the same efficiency penalty as the lists of intervals representation.

doc_id=42 page=10 block_id=10-7 bbox=126.0,259.62,484.36,341.34 label=tbb 414 420
line=414 fonts=F0-10.0 bbox=126.0,331.38,484.27,341.34                    :In contrast, with an integer representation all necessary bitvector operations can be com-
line=415 fonts=F0-10.0 iscore=0.13 bbox=126.0,319.38,484.01,329.34        :puted as numeric expressions that require time proportional to a logarithm of the length of
line=416 fonts=F0-10.0 iscore=0.12 bbox=126.0,307.38,484.36,317.34        :the input string (where the base of the logarithm is the word size of the executing processor;
line=417 fonts=F0-10.0 iscore=0.29 bbox=126.0,295.5,484.21,305.46         :the exact details depend on the interaction between the processor and the language support
line=418 fonts=F0-10.0 iscore=0.21 bbox=126.0,283.5,484.19,293.46         :for large integers, sometimes referred to as ‘bignums’). In the linearization parsing litera-
line=419 fonts=F0-10.0 iscore=0.13 bbox=126.0,271.5,484.27,281.46         :ture, Ramsay (1999) seems to be the only one to explore this possibility, giving definitions
line=420 fonts=F0-10.0,F8-10.0 iscore=0.20 bbox=126.0,259.62,404.18,269.58:of OVERLAP and COMBINE and an alternative way of computing ISOLATED.

doc_id=42 page=10 block_id=10-8 bbox=126.0,118.74,484.7,237.06 label=bt 421 429
line=421 fonts=F3-10.0 bbox=126.0,227.1,326.61,237.06             :3.3.2 Bitmasks  as Compiled  Order  Constraints
line=422 fonts=F0-10.0 iscore=0.12 bbox=126.0,202.38,483.99,212.34:The strategy for prediction used by Suhre (1999) is to predict every rule at every position.
line=423 fonts=F0-10.0 iscore=0.12 bbox=126.0,190.5,484.7,200.46  :While this strategy ensures that no possibility is overlooked, it fails to integrate and use the
line=424 fonts=F0-10.0 iscore=0.31 bbox=126.0,178.5,483.91,188.46 :information provided by the word order constraints attached to the rules – in other words,
line=425 fonts=F0-10.0 iscore=0.13 bbox=126.0,166.62,484.09,176.58:the parser receives no top-down guidance.  Some  of the edges generated by prediction
line=426 fonts=F0-10.0 iscore=0.14 bbox=126.0,154.62,484.03,164.58:therefore fall prey to the word order constraints later, in a generate-and-test fashion. This
line=427 fonts=F0-10.0 iscore=0.17 bbox=126.0,142.62,483.97,152.58:need not be the case. Once a daughter of an active edge has been found, the other daughters
line=428 fonts=F0-10.0 iscore=0.28 bbox=126.0,130.74,484.17,140.7 :should only be predicted to occur in string positions which are compatible with the word
line=429 fonts=F0-10.0 iscore=0.07 bbox=126.0,118.74,420.63,128.7 :order constraints of the active edge. For example, consider the edge in (9).

doc_id=42 page=10 block_id=10-9 bbox=131.04,48.06,310.92,104.47 label=bb 430 431
line=430 fonts=F0-10.0,F0-7.0,F5-10.0,F6-10.0 bbox=131.04,93.9,229.57,104.47: (9) A → B^{1} • C^{2} ; 1 < 2
line=431 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02           :                                  10

doc_id=42 page=11 block_id=11-1 bbox=126.0,632.22,484.51,701.94 label=tttt 432 437
line=432 fonts=F0-10.0 bbox=126.0,691.98,484.43,701.94                    :Recall that this notation represents the point in the parse during which the application of
line=433 fonts=F0-10.0,F3-10.0 iscore=0.12 bbox=126.0,679.98,484.51,689.94:this rule has been predicted, and a B has already been located. Assuming that B has been
line=434 fonts=F0-10.0 iscore=0.35 bbox=126.0,668.1,483.98,678.06         :found to cover the third position of a five-word string, two facts are known. From the order
line=435 fonts=F0-10.0,F3-10.0 iscore=0.24 bbox=126.0,656.1,483.97,666.06 :constraint, C cannot precede B, and from the general principle that a category may only be
line=436 fonts=F0-10.0,F3-10.0 iscore=0.12 bbox=126.0,644.1,484.05,654.06 :dominated by one mother constituent, C cannot overlap B. Thus C cannot cover positions
line=437 fonts=F0-10.0 iscore=0.07 bbox=126.0,632.22,198.1,642.18         :one, two, or three.

doc_id=42 page=11 block_id=11-2 bbox=126.0,578.46,484.69,624.18 label=tttbt 438 441
line=438 fonts=F0-10.0 bbox=126.0,614.22,484.69,624.18                    :A central insight of this algorithm is that the same data structure used to describe the cov-
line=439 fonts=F0-10.0 iscore=0.24 bbox=126.0,602.34,484.16,612.3         :erage of an edge can additionally encode these kinds of restrictions on the parser’s search.
line=440 fonts=F0-10.0,F4-10.0 iscore=0.13 bbox=126.0,590.34,484.37,600.3 :This is done by adding two additional bitvectors to each edge: a negative mask (n-mask)
line=441 fonts=F0-10.0,F4-10.0 iscore=0.07 bbox=126.0,578.46,244.57,588.42:and a positive mask (p-mask).

doc_id=42 page=11 block_id=11-3 bbox=126.0,452.82,484.59,570.42 label=tttbbt 442 451
line=442 fonts=F0-10.0,F3-10.0 bbox=126.0,560.46,484.59,570.42            :Negative Masks.  The n-mask  constrains the set of possible coverage vectors which could
line=443 fonts=F0-10.0 iscore=0.29 bbox=126.0,548.46,484.35,558.42        :complete the edge. The  1-positions in a masking vector represent the positions that are
line=444 fonts=F0-10.0 iscore=0.21 bbox=126.0,536.58,484.45,546.54        :masked  out: the positions that cannot be filled when completing this edge. The 0-positions
line=445 fonts=F0-10.0 iscore=0.13 bbox=126.0,524.58,484.39,534.54        :in the negative mask represent positions that may potentially be part of the edge’s coverage.
line=446 fonts=F0-10.0 iscore=0.06 bbox=126.0,512.7,483.8,522.66          :For the example above, the coverage vector for the edge is 00100 since only the third word
line=447 fonts=F0-10.0,F3-10.0 iscore=0.35 bbox=126.0,500.7,484.3,510.66  :B has been found so far. Assuming no restrictions from a higher rule in the same domain,
line=448 fonts=F0-10.0,F3-10.0 iscore=0.16 bbox=126.0,488.7,483.76,498.66 :the n-mask for C is 00111, encoding the fact that the final coverage vector of the edge for A
line=449 fonts=F0-10.0,F3-10.0 iscore=0.16 bbox=126.0,476.82,483.75,486.78:must be either 01000, 10000, or 11000 (that is, C must occupy position four, position five,
line=450 fonts=F0-10.0 iscore=0.06 bbox=126.0,464.82,484.18,474.78        :or both of these positions). The negative mask in essence encodes information on where
line=451 fonts=F0-10.0 iscore=0.14 bbox=126.0,452.82,269.12,462.78        :the active category cannot be found.

doc_id=42 page=11 block_id=11-4 bbox=126.0,411.06,484.49,444.9 label=tttbbb 452 454
line=452 fonts=F0-10.0,F3-10.0 bbox=126.0,434.94,484.49,444.9            :Positive Masks. The p-mask  encodes information about the positions the active category
line=453 fonts=F0-10.0,F3-10.0 iscore=0.25 bbox=126.0,422.94,484.42,432.9:must occupy. This knowledge arises from immediate precedence constraints. For example,
line=454 fonts=F0-10.0 iscore=0.09 bbox=126.0,411.06,227.06,421.02       :consider the edge in (10).

doc_id=42 page=11 block_id=11-5 bbox=126.0,386.1,230.77,396.67 label=ttb 455 455
line=455 fonts=F0-10.0,F0-7.0,F5-10.0 bbox=126.0,386.1,230.77,396.67:(10) D → E^{1} • F^{2} ; 1≪ 2

doc_id=42 page=11 block_id=11-6 bbox=126.0,349.26,484.47,371.22 label=tb 456 457
line=456 fonts=F0-10.0,F3-10.0 bbox=126.0,361.26,484.47,371.22    :If E occupies position one, then F must at least occupy position two; the second position
line=457 fonts=F0-10.0 iscore=0.12 bbox=126.0,349.26,323.31,359.22:in the positive mask would therefore be occupied.

doc_id=42 page=11 block_id=11-7 bbox=126.0,256.26,484.71,326.7 label=bt 458 462
line=458 fonts=F3-10.0 bbox=126.0,316.74,177.87,326.7                    :3.4 The  Dot
line=459 fonts=F0-10.0 iscore=0.06 bbox=126.0,292.14,484.53,302.1        :It should be observed at this point that this parser retains the notion of a single active
line=460 fonts=F0-10.0 iscore=0.18 bbox=126.0,280.14,484.13,290.1        :element per edge, even though any of the RHS categories might occur leftmost in the input
line=461 fonts=F0-10.0,F1-10.0 iscore=0.12 bbox=126.0,268.14,484.71,278.1:string; this is in contrast to Suhre (1999), who essentially follows the direct ID/LP parsing
line=462 fonts=F0-10.0 iscore=0.13 bbox=126.0,256.26,345.45,266.22       :tradition (see (Volk 1996) and references cited therein).

doc_id=42 page=11 block_id=11-8 bbox=126.0,190.5,484.72,248.22 label=bbt 463 467
line=463 fonts=F0-10.0 bbox=126.0,238.26,484.72,248.22                    :Recall that the dot in Earley’s original parser serves two purposes: (1) it indicates the
line=464 fonts=F0-10.0,F4-10.0 iscore=0.19 bbox=126.0,226.38,484.13,236.34:portion of the string that has already been incorporated into chart edges; and (2) it distin-
line=465 fonts=F0-10.0,F4-10.0 iscore=0.31 bbox=126.0,214.38,484.18,224.34:guishes the categories that have been found from those that are left, highlighting the active
line=466 fonts=F0-10.0 iscore=0.40 bbox=126.0,202.38,484.09,212.34        :category as the category to next be located. In this generalization of Earley’s algorithm, the
line=467 fonts=F0-10.0 iscore=0.19 bbox=126.0,190.5,472.87,200.46         :first purpose is served by the coverage vector; thus the dot only has the second purpose.

doc_id=42 page=11 block_id=11-9 bbox=126.0,48.06,484.5,182.46 label=bbb 468 475
line=468 fonts=F0-10.0 bbox=126.0,172.5,484.32,182.46             :Conceptually, using a single dot is sufficient, as for an edge to be completed, every element
line=469 fonts=F0-10.0 iscore=0.15 bbox=126.0,160.62,484.29,170.58:on the righthand side has to be found at some point. Thus a GIDLP parser is free to use the
line=470 fonts=F0-10.0 iscore=0.25 bbox=126.0,148.62,484.45,158.58:RHS  order for other purposes. This parser described here uses the RHS order to determine
line=471 fonts=F0-10.0 iscore=0.07 bbox=126.0,136.74,484.4,146.7  :the order in which the righthand side categories are predicted. As a result, the grammar
line=472 fonts=F0-10.0 iscore=0.25 bbox=126.0,124.74,484.5,134.7  :writer can use the order to specify those daughters to be searched first which are most
line=473 fonts=F0-10.0 iscore=0.12 bbox=126.0,112.74,484.11,122.7 :likely to cause an early failure. For example, a rule introducing a conjunction of sentences
line=474 fonts=F0-10.0 iscore=0.07 bbox=126.0,100.86,221.76,110.82:can be specified as (11).
line=475 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02 :                                         11

doc_id=42 page=12 block_id=12-1 bbox=126.0,691.98,375.53,702.55 label=tt 476 476
line=476 fonts=F0-10.0,F0-7.0,F5-10.0 bbox=126.0,691.98,375.53,702.55:(11) S → Conj^{1}, S^{2}, S^{3} ; 2≪ 1, 1 ≪ 3 ;〈[2], [], S〉, 〈[3], [], S〉

doc_id=42 page=12 block_id=12-2 bbox=126.0,655.14,484.22,676.98 label=tbt 477 478
line=477 fonts=F0-10.0 bbox=126.0,667.02,484.22,676.98           :This causes the parser to look for the easy-to-identify conjunction before it tries to find the
line=478 fonts=F0-10.0 iscore=0.12 bbox=126.0,655.14,285.31,665.1:potentially-complex conjunct sentences.

doc_id=42 page=12 block_id=12-3 bbox=126.0,541.5,484.55,647.1 label=tbb 479 487
line=479 fonts=F0-10.0 bbox=126.0,637.14,484.29,647.1                    :One might object that it is unreasonable to expect a grammar writer to take processing con-
line=480 fonts=F0-10.0 iscore=0.12 bbox=126.0,625.26,484.3,635.22        :siderations into account. It must be observed, however, that the RHS order has no impact
line=481 fonts=F0-10.0 iscore=0.12 bbox=126.0,613.26,484.18,623.22       :on the correctness of the resulting parse. Much of the work of finding the optimal ordering
line=482 fonts=F0-10.0 iscore=0.38 bbox=126.0,601.26,484.35,611.22       :for the categories in a rule could be accomplished either at compile time by heuristics of
line=483 fonts=F0-10.0 iscore=0.31 bbox=126.0,589.38,483.96,599.34       :varying complexity or by hand as the grammar is written. For the grammars presented in
line=484 fonts=F0-10.0 iscore=0.20 bbox=126.0,577.38,484.15,587.34       :this paper, two heuristics were followed: categories should be ordered by the number of
line=485 fonts=F0-10.0 iscore=0.29 bbox=126.0,565.5,484.55,575.46        :times each is mentioned in an order constraint in that rule, and exclusively pre-terminal
line=486 fonts=F0-10.0 iscore=0.07 bbox=126.0,553.5,484.04,563.46        :categories should be ordered before other categories. Both of these considerations lead to
line=487 fonts=F0-10.0,F3-10.0 iscore=0.15 bbox=126.0,541.5,281.12,551.46:ordering the Conj element first in (11).

doc_id=42 page=12 block_id=12-4 bbox=126.0,436.62,484.69,518.94 label=bt 488 493
line=488 fonts=F3-10.0 bbox=126.0,508.98,275.97,518.94            :3.5 Domains  in Earley’s Algorithm
line=489 fonts=F0-10.0 iscore=0.06 bbox=126.0,484.38,484.24,494.34:One  of the primary advantages of a chart parser like Earley’s algorithm is the fact that
line=490 fonts=F0-10.0 iscore=0.19 bbox=126.0,472.38,484.38,482.34:passive edges need only be constructed once; if a given passive edge doesn’t immediately
line=491 fonts=F0-10.0 iscore=0.31 bbox=126.0,460.5,483.93,470.46 :trigger a completion, it remains in the chart to be picked up during future completions. As
line=492 fonts=F0-10.0 iscore=0.29 bbox=126.0,448.5,484.69,458.46 :a result, it won’t always be the case that the parser knows what domain a given passive
line=493 fonts=F0-10.0 iscore=0.18 bbox=126.0,436.62,331.53,446.58:edge will be used in. Consider the grammar in (12):

doc_id=42 page=12 block_id=12-5 bbox=126.0,359.82,280.29,421.62 label=bbt 494 498
line=494 fonts=F0-10.0 bbox=126.0,411.66,209.98,421.62                                    :(12)  a) root(A, [])
line=495 fonts=F0-10.0,F0-7.0,F5-10.0,F6-10.0 iscore=0.22 bbox=156.24,398.7,246.61,409.27 :      b) A → B^{1}, C^{2} ; 1 < 2
line=496 fonts=F0-10.0,F0-7.0,F5-10.0 iscore=0.44 bbox=156.72,385.74,200.89,396.31        :      c) B → D^{1}
line=497 fonts=F0-10.0,F0-7.0,F5-10.0,F6-10.0 iscore=0.44 bbox=156.24,372.78,280.29,383.35:      d) C → D^{1} ;;〈[1], [E < F], D〉
line=498 fonts=F0-10.0,F0-7.0,F5-10.0 iscore=0.44 bbox=156.72,359.82,214.81,370.39        :      e) D → E^{1}, F^{2}

doc_id=42 page=12 block_id=12-6 bbox=126.0,251.22,485.08,344.94 label=bbbt 499 506
line=499 fonts=F0-10.0,F3-10.0 bbox=126.0,334.98,485.08,344.94            :This grammar  accepts the strings EFEF  and FEEF   and rejects the strings EFFE and
line=500 fonts=F0-10.0,F3-10.0 iscore=0.20 bbox=126.0,322.98,484.81,332.94:FEFE.  Consider  the parse of the string FEFE. Given rule (12e), the last two symbols
line=501 fonts=F0-10.0,F3-10.0 iscore=0.14 bbox=126.0,310.98,484.76,320.94:of the string constitute a D. By rule (12c), this D is also a B. It is not, however, a C: rule
line=502 fonts=F0-10.0,F3-10.0 iscore=0.18 bbox=126.0,299.1,484.7,309.06  :(12d) states that Cs dominate contiguous sections of the input within which all Es precede
line=503 fonts=F0-10.0,F3-10.0 iscore=0.20 bbox=126.0,287.1,484.84,297.06 :all Fs. As presented so far, a passive edge stores relatively little information: a category
line=504 fonts=F0-10.0 iscore=0.13 bbox=126.0,275.22,484.08,285.18        :label and a bitvector representing the edge’s coverage. In the example above, the passive
line=505 fonts=F0-10.0,F3-10.0 iscore=0.26 bbox=126.0,263.22,484.38,273.18:edge would simply say that a D has a coverage of 1100. It is impossible to tell from this
line=506 fonts=F0-10.0,F3-10.0 iscore=0.21 bbox=126.0,251.22,352.18,261.18:alone whether such a D would be an acceptable C or not.

doc_id=42 page=12 block_id=12-7 bbox=126.0,197.46,484.53,243.3 label=bbbbt 507 510
line=507 fonts=F0-10.0 bbox=126.0,233.34,484.2,243.3              :The parser could simply store each edge’s parse tree (leaving out daughters of compacted
line=508 fonts=F0-10.0 iscore=0.36 bbox=126.0,221.34,484.53,231.3 :constituents) and examine that tree each time a new domain constraint becomes relevant
line=509 fonts=F0-10.0 iscore=0.17 bbox=126.0,209.46,484.32,219.42:(as in the example above). This is inefficient in general, though – the parse tree of a given
line=510 fonts=F0-10.0 iscore=0.06 bbox=126.0,197.46,291.7,207.42 :edge might turn out to be arbitrarily deep.

doc_id=42 page=12 block_id=12-8 bbox=126.0,48.06,484.61,189.54 label=bbbbb 511 518
line=511 fonts=F0-10.0,F4-10.0 bbox=126.0,179.58,484.44,189.54    :Instead, the parser uses the notion of dormant (contrasted with active) order constraints.
line=512 fonts=F0-10.0 iscore=0.07 bbox=126.0,167.58,484.61,177.54:When  the grammar  is compiled, all domain-local LP constraints (that is, those not intro-
line=513 fonts=F0-10.0 iscore=0.21 bbox=126.0,155.58,483.93,165.54:duced  on individual rules) are added as dormant constraints in every other domain (as
line=514 fonts=F0-10.0 iscore=0.29 bbox=126.0,143.7,484.32,153.66 :long as both components  are reachable within that domain; see section 4.5). A dormant
line=515 fonts=F0-10.0 iscore=0.20 bbox=126.0,131.7,484.45,141.66 :constraint is still tracked and updated (as described in section 4.3.1) as normal, with the
line=516 fonts=F0-10.0 iscore=0.31 bbox=126.0,119.7,483.99,129.66 :exception that a constraint violation does not prevent an edge from being created (as a vio-
line=517 fonts=F0-10.0 iscore=0.19 bbox=126.0,107.82,484.11,117.78:lation in an active constraint does). Instead, it merely reduces the number of domains that
line=518 fonts=F0-10.0 iscore=0.12 bbox=300.96,48.06,310.92,58.02 :                                          12

doc_id=42 page=13 block_id=13-1 bbox=126.0,668.1,483.98,701.94 label=ttt 519 521
line=519 fonts=F0-10.0 bbox=126.0,691.98,483.95,701.94            :the edge could be completed into in the future. When a domain-introducing rule is pre-
line=520 fonts=F0-10.0 iscore=0.38 bbox=126.0,679.98,483.98,689.94:dicted from a mother edge, if any of the dormant constraints for that domain had already
line=521 fonts=F0-10.0 iscore=0.25 bbox=126.0,668.1,414.71,678.06 :been violated on that edge, that prediction will not create any new edges.

doc_id=42 page=13 block_id=13-2 bbox=126.0,626.22,484.5,660.06 label=ttb 522 524
line=522 fonts=F0-10.0 bbox=126.0,650.1,484.5,660.06              :In essence, the set of dormant constraints can be seen as a ‘distilled’ version of the edge’s
line=523 fonts=F0-10.0 iscore=0.24 bbox=126.0,638.22,483.95,648.18:parse tree: the minimal amount of information needed to determine future domain mem-
line=524 fonts=F0-10.0 iscore=0.08 bbox=126.0,626.22,161.7,636.18 :berships.

doc_id=42 page=13 block_id=13-3 bbox=126.0,545.1,484.18,603.66 label=tbtt 525 528
line=525 fonts=F3-10.0 bbox=126.0,593.7,302.97,603.66            :3.6 Non-overlapping   bitvector generation
line=526 fonts=F0-10.0 iscore=0.14 bbox=126.0,569.1,484.09,579.06:An  important aspect of the parsing algorithm requires the generation of all bitvectors that
line=527 fonts=F0-10.0 iscore=0.22 bbox=126.0,557.1,484.18,567.06:do not overlap with a given bitvector. This is done in a memoizing fashion: each time a new
line=528 fonts=F0-10.0 iscore=0.39 bbox=126.0,545.1,471.06,555.06:list of vectors is requested, the parser checks to see if that list has already been created.

doc_id=42 page=13 block_id=13-4 bbox=126.0,479.34,484.3,537.18 label=tbtbt 529 533
line=529 fonts=F0-10.0 bbox=126.0,527.22,484.3,537.18                     :If not, the task is as follows: for a given bitvector, there will be a certain number of un-
line=530 fonts=F0-10.0,F4-10.0 iscore=0.21 bbox=126.0,515.22,484.23,525.18:occupied positions, or holes. Each of the holes could be either filled or empty in a non-
line=531 fonts=F0-10.0 iscore=0.35 bbox=126.0,503.34,483.95,513.3         :overlapping bitvector. In contrast, each occupied position in the bitvector cannot be occu-
line=532 fonts=F0-10.0 iscore=0.20 bbox=126.0,491.34,484.09,501.3         :pied in a non-overlapping bitvector. Thus each subset of the holes in the original bitvector
line=533 fonts=F0-10.0 iscore=0.13 bbox=126.0,479.34,337.59,489.3         :corresponds to one of the non-overlapping bitvectors.

doc_id=42 page=13 block_id=13-5 bbox=126.0,437.58,484.36,471.42 label=tbtbbt 534 536
line=534 fonts=F0-10.0 bbox=126.0,461.46,484.09,471.42                   :The parser generates these bitvectors in a Gray code order: an order of the binary numbers
line=535 fonts=F0-10.0 iscore=0.18 bbox=126.0,449.46,484.36,459.42       :in which only one digit changes at each step. Since only one position changes at a time,
line=536 fonts=F0-10.0,F0-7.0 iscore=0.18 bbox=126.0,437.58,397.09,448.15:the full list of potential subsets is generated in an efficient manner.^{13}

doc_id=42 page=13 block_id=13-6 bbox=126.0,371.82,484.32,429.54 label=tbtbbbt 537 541
line=537 fonts=F0-10.0 bbox=126.0,419.58,483.91,429.54            :The procedure, then, for generating non-overlapping bitvectors is as follows. Consider the
line=538 fonts=F0-10.0 iscore=0.17 bbox=126.0,407.7,484.23,417.66 :target bitvector and calculate the mapping between holes and bitvector positions, counting
line=539 fonts=F0-10.0 iscore=0.12 bbox=126.0,395.7,484.19,405.66 :the number of holes in the process. Then generate the Gray code instructions (a list of posi-
line=540 fonts=F0-10.0 iscore=0.12 bbox=126.0,383.7,484.32,393.66 :tions to successively toggle) for that length, and use the hole:position mapping to translate
line=541 fonts=F0-10.0 iscore=0.14 bbox=126.0,371.82,317.79,381.78:these instructions into actual bitvector positions.

doc_id=42 page=13 block_id=13-7 bbox=126.0,258.18,484.94,363.78 label=tbtbbbb 542 550
line=542 fonts=F0-10.0 bbox=126.0,353.82,484.24,363.78                   :For example, take the vector 010100. Since the holes in this vector occur in the first, second,
line=543 fonts=F0-10.0 iscore=0.35 bbox=126.0,341.94,483.94,351.9        :fourth, and sixth positions, the hole:position mapping is 0:0, 1:1, 2:3, 3:5 (in other words,
line=544 fonts=F0-10.0 iscore=0.19 bbox=126.0,329.94,484.37,339.9        :hole 0 is at position 0, hole 1 is at position 1, etc.). There are four holes in total; the Grey
line=545 fonts=F0-10.0 iscore=0.36 bbox=126.0,318.06,483.49,328.02       :code instructions on input 4 are (0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0) (in other words, first
line=546 fonts=F0-10.0 iscore=0.28 bbox=126.0,306.06,484.06,316.02       :toggle hole 0, then hole 1, then hole 0 again, and so on). Using the hole:position mapping,
line=547 fonts=F0-10.0 iscore=0.17 bbox=126.0,294.06,484.03,304.02       :the list of instructions becomes (0, 1, 0, 3, 0, 1, 0, 5, 0, 1, 0, 3, 0, 1, 0). From this list,
line=548 fonts=F0-10.0 iscore=0.35 bbox=126.0,282.18,484.14,292.14       :the set of non-overlapping bitvectors can be generated: starting with the bitvector 000000,
line=549 fonts=F0-10.0 iscore=0.22 bbox=126.0,270.18,484.94,280.14       :the parser toggles the positions in the list one at a time. This process is illustrated in the
line=550 fonts=F0-10.0,F0-7.0 iscore=0.11 bbox=126.0,258.18,475.81,268.87:diagram in Figure 2, where the underlined position is the one that’s about to be toggled. ^{14}

doc_id=42 page=13 block_id=13-8 bbox=126.0,165.18,486.05,235.74 label=tbb 551 555
line=551 fonts=F3-10.0 bbox=126.0,225.78,218.04,235.74                           :3.7 Bitvector hashing
line=552 fonts=F0-10.0 iscore=0.07 bbox=126.0,201.06,484.38,211.02               :Because the number of such bitvectors grows exponentially with the length of the bitvector,
line=553 fonts=F0-10.0 iscore=0.12 bbox=126.0,189.06,484.3,199.02                :there is a need to ensure that the generation procedure is constrained. This is done by
line=554 fonts=F0-10.0,F4-10.0,F5-7.0 iscore=0.17 bbox=126.0,177.18,486.05,187.75:working with bitvector hashes: smaller bitvectors such that, if a^{′} is the hash of a and b^{′} is
line=555 fonts=F0-10.0,F4-10.0,F5-7.0 iscore=0.22 bbox=126.0,165.18,358.44,175.75:the hash of b, a^{′} overlaps with b^{′} only if a overlaps with b.

doc_id=42 page=13 block_id=13-9 bbox=126.12,48.06,488.68,132.52 label=b 556 560
line=556 fonts=F0-6.0,F0-8.0 bbox=126.12,123.66,488.68,132.52            :^{13} A full discussion of the motivation and algorithms for Gray code generation can be found in Knuth (2002); my
line=557 fonts=F0-8.0 iscore=0.05 bbox=133.92,114.18,432.98,122.15       :  implementation  of the parser adopts Algorithm L from that source to generate the Gray code.
line=558 fonts=F0-6.0,F0-8.0 iscore=0.27 bbox=126.12,104.34,488.55,113.32:^{14} If the pattern of dashes looks familiar, note that it’s the solution to the Towers of Hanoi with four discs, where
line=559 fonts=F0-8.0 iscore=0.09 bbox=133.92,94.98,479.11,102.95        :  the rule that only one disc may move at a time corresponds to the constraint that only one bit flips at a time.
line=560 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02        :                                                   13

doc_id=42 page=14 block_id=14-1 bbox=216.84,454.26,394.14,699.18 label=t 561 579
line=561 fonts=F0-10.0 bbox=268.8,689.22,298.69,699.18                    :                        543210
line=562 fonts=F0-10.0 iscore=1.00 bbox=268.8,676.86,298.69,686.82        :                        010100
line=563 fonts=F0-10.0 iscore=0.50 bbox=268.8,664.86,342.97,674.82        :                        0000→  000000
line=564 fonts=F0-10.0,F5-10.0 iscore=0.67 bbox=268.8,652.98,342.97,662.94:                        0001 → 000001
line=565 fonts=F0-10.0 iscore=0.67 bbox=268.8,640.98,342.97,650.94        :                        0011→  000011
line=566 fonts=F0-10.0,F5-10.0 iscore=0.67 bbox=268.8,628.98,342.97,638.94:                        0010 → 000010
line=567 fonts=F0-10.0 iscore=0.67 bbox=268.8,617.1,342.97,627.06         :                        0110→  001010
line=568 fonts=F0-10.0,F5-10.0 iscore=0.67 bbox=268.8,605.1,342.97,615.06 :                        0111 → 001011
line=569 fonts=F0-10.0 iscore=0.67 bbox=268.8,593.1,342.97,603.06         :                        0101→  001001
line=570 fonts=F0-10.0 iscore=0.67 bbox=268.8,581.22,342.97,591.18        :                        0 100→ 001000
line=571 fonts=F0-10.0 iscore=0.67 bbox=268.8,569.22,342.97,579.18        :                        1100→  101000
line=572 fonts=F0-10.0,F5-10.0 iscore=0.67 bbox=268.8,557.34,342.97,567.3 :                        1101 → 101001
line=573 fonts=F0-10.0 iscore=0.67 bbox=268.8,545.34,342.97,555.3         :                        1111→  101011
line=574 fonts=F0-10.0,F5-10.0 iscore=0.67 bbox=268.8,533.34,342.97,543.3 :                        1110 → 101010
line=575 fonts=F0-10.0 iscore=0.67 bbox=268.8,521.46,342.97,531.42        :                        1010→  100010
line=576 fonts=F0-10.0,F5-10.0 iscore=0.67 bbox=268.8,509.46,342.97,519.42:                        1011 → 100011
line=577 fonts=F0-10.0 iscore=0.67 bbox=268.8,497.46,342.97,507.42        :                        1001→  100001
line=578 fonts=F0-10.0 iscore=1.00 bbox=268.8,485.58,342.97,495.54        :                        1000→  100000
line=579 fonts=F0-10.0 iscore=0.00 bbox=216.84,454.26,394.14,464.22       :               Figure 2: Non-overlappingvector generation

doc_id=42 page=14 block_id=14-2 bbox=126.0,396.42,484.31,430.26 label=bttt 580 582
line=580 fonts=F0-10.0 bbox=126.0,420.3,484.26,430.26             :The parser indexes all edges by the hash of their n-mask. When attempting to complete an
line=581 fonts=F0-10.0 iscore=0.19 bbox=126.0,408.42,484.31,418.38:edge, the parser retrieves all edges with non-overlappinghashes. For each edge so retrieved,
line=582 fonts=F0-10.0 iscore=0.15 bbox=126.0,396.42,421.15,406.38:its actual n-mask is tested for overlap with the edge triggering completion.

doc_id=42 page=14 block_id=14-3 bbox=126.0,354.54,485.52,388.5 label=bttbt 583 585
line=583 fonts=F0-10.0,F0-7.0,F4-10.0,F4-7.0,F6-10.0 bbox=126.0,377.1,485.52,388.5                    :The hash function is as follows. Given an input vector v_{0}v_{1}v_{2} ... v_{x−1} and a target length m,
line=584 fonts=F0-10.0,F0-7.0,F1-10.0,F4-10.0,F4-7.0,F6-10.0 iscore=0.28 bbox=126.0,365.1,485.14,376.5:the hashed vector h_{0}h_{1} ... h_{m−1} is desired. First compute the group width r = ⌈x/m⌉. Then
line=585 fonts=F0-10.0 iscore=0.18 bbox=126.0,354.54,257.28,364.5                                     :the hashed vector is described by

doc_id=42 page=14 block_id=14-4 bbox=126.0,299.46,344.3,345.79 label=bttbbt 586 589
line=586 fonts=F0-7.0,F4-7.0,F4-9.2 bbox=310.08,336.54,336.24,345.79                     :                                              rn+(∧r−1)
line=587 fonts=F0-7.0,F1-10.0,F4-10.0,F4-7.0 iscore=0.00 bbox=267.24,324.9,344.3,336.3   :                                   h_{(}_{m−1}_{)}_{−n} = v_{i}
line=588 fonts=F1-7.0,F4-7.0 iscore=0.00 bbox=316.8,315.06,329.5,322.03                  :                                               i=rn
line=589 fonts=F0-10.0,F4-10.0,F5-10.0,F6-10.0 iscore=0.00 bbox=126.0,299.46,180.1,309.42:as 0 ≤ n < m.

doc_id=42 page=14 block_id=14-5 bbox=126.0,269.58,483.35,291.42 label=bttbbb 590 591
line=590 fonts=F0-10.0 bbox=126.0,281.46,483.35,291.42            :For example, the computation of the 8-digit hash of 00111101111000010100 is given in
line=591 fonts=F0-10.0 iscore=0.08 bbox=126.0,269.58,140.11,279.54:(3).

doc_id=42 page=14 block_id=14-6 bbox=228.72,160.62,383.29,254.22 label=btb 592 599
line=592 fonts=F0-10.0,F5-10.0 bbox=228.72,244.26,347.25,254.22            :                   00111101111000010100 → 0
line=593 fonts=F0-10.0,F5-10.0 iscore=1.00 bbox=228.72,232.26,352.4,242.22 :                   00111101111000010    → 00
line=594 fonts=F0-10.0,F5-10.0 iscore=1.00 bbox=228.72,220.38,357.56,230.34:                   00111101111000       → 000
line=595 fonts=F0-10.0,F5-10.0 iscore=1.00 bbox=228.72,208.38,362.72,218.34:                   00111101111          → 0001
line=596 fonts=F0-10.0,F5-10.0 iscore=1.00 bbox=228.72,196.38,367.88,206.34:                   00111101             → 00010
line=597 fonts=F0-10.0,F5-10.0 iscore=1.00 bbox=228.72,184.5,373.03,194.46 :                   00111                → 000101
line=598 fonts=F0-10.0,F5-10.0 iscore=1.00 bbox=228.72,172.5,378.19,182.46 :                   00                   → 0001010
line=599 fonts=F0-10.0,F5-10.0 iscore=1.00 bbox=331.08,160.62,383.29,170.58:                                        → 00010100

doc_id=42 page=14 block_id=14-7 bbox=126.0,48.06,484.27,139.26 label=bb 600 603
line=600 fonts=F0-10.0 bbox=230.04,129.3,381.38,139.26           :                         Figure 3: Example of hash calculation
line=601 fonts=F0-10.0 iscore=0.06 bbox=126.0,101.94,484.27,111.9:In summary, the use of bitvector hashes allows the parser to replace the process on the left
line=602 fonts=F0-10.0 iscore=0.24 bbox=126.0,89.94,284.23,99.9  :with that on the right in the table below.
line=603 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02:                                         14

doc_id=42 page=15 block_id=15-1 bbox=170.4,620.22,309.62,703.5 label=tttlt 604 610
line=604 fonts=F0-10.0 bbox=170.4,693.54,261.61,703.5              :           Step   Without hashes
line=605 fonts=F0-10.0 iscore=0.00 bbox=176.76,681.18,181.74,691.14:            1
line=606 fonts=F0-10.0 iscore=0.20 bbox=176.76,668.82,309.62,678.78:            2     Generate all bitvectors that
line=607 fonts=F0-10.0 iscore=0.20 bbox=200.52,656.94,309.55,666.9 :                  do not overlap the target’s
line=608 fonts=F0-10.0 iscore=0.20 bbox=200.52,644.94,232.34,654.9 :                  n-mask.
line=609 fonts=F0-10.0 iscore=0.20 bbox=176.76,632.58,294.45,642.54:            3     Retrieve all such edges.
line=610 fonts=F0-10.0 iscore=0.20 bbox=176.76,620.22,181.74,630.18:            4

doc_id=42 page=15 block_id=15-2 bbox=176.76,583.98,309.46,605.94 label=tttlb 611 612
line=611 fonts=F0-10.0 bbox=176.76,595.98,309.46,605.94            :            5    Test  each edge  found for
line=612 fonts=F0-10.0 iscore=0.00 bbox=200.52,583.98,255.55,593.94:                  compatibility.

doc_id=42 page=15 block_id=15-3 bbox=321.85,656.94,441.2,703.5 label=tttrt 613 616
line=613 fonts=F0-10.0 bbox=321.85,693.54,370.38,703.5             :                                               With hashes
line=614 fonts=F0-10.0 iscore=0.25 bbox=322.02,681.18,433.74,691.14:                                               Compute  the bitvector  hash.
line=615 fonts=F0-10.0 iscore=0.80 bbox=322.08,668.82,441.2,678.78 :                                               Generate all bitvectors that do
line=616 fonts=F0-10.0 iscore=0.20 bbox=322.08,656.94,435.9,666.9  :                                               not overlap the target’s hash.

doc_id=42 page=15 block_id=15-4 bbox=321.69,583.98,441.03,642.54 label=tttrb 617 621
line=617 fonts=F0-10.0 bbox=321.69,632.58,415.69,642.54            :                                               Retrieve all such edges.
line=618 fonts=F0-10.0 iscore=0.17 bbox=322.02,620.22,440.95,630.18:                                               See if each edge found actu-
line=619 fonts=F0-10.0 iscore=0.50 bbox=322.08,608.34,434.96,618.3 :                                               ally overlaps with the target.
line=620 fonts=F0-10.0 iscore=0.20 bbox=322.08,595.98,441.03,605.94:                                               Test each remaining edge for
line=621 fonts=F0-10.0 iscore=0.20 bbox=322.08,583.98,377.11,593.94:                                               compatibility.

doc_id=42 page=15 block_id=15-5 bbox=126.0,532.86,484.29,566.7 label=ttb 622 624
line=622 fonts=F0-10.0 bbox=126.0,556.74,484.12,566.7            :While  step 3 returns more edges in the procedure on the right than in that on the left, step
line=623 fonts=F0-10.0 iscore=0.10 bbox=126.0,544.74,484.29,554.7:2 is much simpler on the right than on the left. The effect of the latter far outweighs that of
line=624 fonts=F0-10.0 iscore=0.10 bbox=126.0,532.86,305.0,542.82:the former in practice, resulting in a net gain.

doc_id=42 page=15 block_id=15-6 bbox=126.0,497.22,293.78,509.18 label=tbttt 625 625
line=625 fonts=F3-12.0 bbox=126.0,497.22,293.78,509.18:4 The GIDLP parsing algorithm

doc_id=42 page=15 block_id=15-7 bbox=126.0,445.02,484.19,478.98 label=tbttb 626 628
line=626 fonts=F0-10.0 bbox=126.0,469.02,484.15,478.98            :Now  that the building blocks have been presented, the algorithm for parsing GIDLP gram-
line=627 fonts=F0-10.0 iscore=0.31 bbox=126.0,457.02,484.19,466.98:mars can now be given in full. This chapter presents the complete algorithm; chapter 5 will
line=628 fonts=F0-10.0 iscore=0.12 bbox=126.0,445.02,375.68,454.98:provide two example parses illustrating the steps shown below.

doc_id=42 page=15 block_id=15-8 bbox=126.0,364.02,484.25,422.46 label=tbtbt 629 632
line=629 fonts=F3-10.0 bbox=126.0,412.5,198.06,422.46             :4.1 Initialization
line=630 fonts=F0-10.0 iscore=0.12 bbox=126.0,387.9,484.25,397.86 :The chart is seeded with passive edges corresponding to each word in the input. The parse
line=631 fonts=F0-10.0 iscore=0.31 bbox=126.0,375.9,484.2,385.86  :then begins by predicting an isolated instance of the start symbol covering the entire input;
line=632 fonts=F0-10.0 iscore=0.27 bbox=126.0,364.02,410.86,373.98:each final completion of this edge will correspond to a successful parse.

doc_id=42 page=15 block_id=15-9 bbox=126.0,235.14,484.47,341.46 label=tbtbb 633 640
line=633 fonts=F3-10.0 bbox=126.0,331.5,187.41,341.46                    :4.2 Prediction
line=634 fonts=F0-10.0 iscore=0.07 bbox=126.0,306.78,484.47,316.74       :Recall that prediction takes an active edge seeking its active category and produces a new
line=635 fonts=F0-10.0 iscore=0.40 bbox=126.0,294.9,484.35,304.86        :edge that will provide that category if successfully completed. The parser considers each
line=636 fonts=F0-10.0 iscore=0.19 bbox=126.0,282.9,484.04,292.86        :rule in the grammar that provides the symbol being predicted, and for each rule, it generates
line=637 fonts=F0-10.0 iscore=0.19 bbox=126.0,270.9,483.93,280.86        :the masks for the new edge, taking both rule-based and domain-based order constraints into
line=638 fonts=F0-10.0 iscore=0.07 bbox=126.0,259.02,484.17,268.98       :account (as described in section 4.2.1). The resulting masks are checked to ensure that there
line=639 fonts=F0-10.0 iscore=0.20 bbox=126.0,247.02,483.99,256.98       :is enough space in the resulting mask for the minimum number of categories required by
line=640 fonts=F0-10.0,F0-7.0 iscore=0.07 bbox=126.0,235.14,165.73,245.71:the rule.^{15}

doc_id=42 page=15 block_id=15-10 bbox=126.0,154.02,484.2,212.58 label=tbb 641 644
line=641 fonts=F3-10.0 bbox=126.0,202.62,233.5,212.58             :4.2.1 Mask  Computation
line=642 fonts=F0-10.0 iscore=0.07 bbox=126.0,177.9,484.2,187.86  :To compute the new masks, the parser examines each order constraint in turn for references
line=643 fonts=F0-10.0 iscore=0.13 bbox=126.0,166.02,483.69,175.98:to the category currently being predicted. Each references provides a component of the final
line=644 fonts=F0-10.0 iscore=0.07 bbox=126.0,154.02,228.42,163.98:mask, as indicated below:

doc_id=42 page=15 block_id=15-11 bbox=126.12,48.06,387.64,106.96 label=b 645 646
line=645 fonts=F0-6.0,F0-8.0 bbox=126.12,98.1,387.64,106.96      :^{15} Note that this optimization assumes epsilon rules are absent from the grammar.
line=646 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02:                                                  15

doc_id=42 page=16 block_id=16-1 bbox=181.92,645.3,314.2,703.5 label=tttl 647 651
line=647 fonts=F0-10.0 bbox=238.32,693.54,314.2,703.5                              :                        n-mask component
line=648 fonts=F0-10.0,F6-10.0,F8-10.0 iscore=0.25 bbox=181.92,681.18,310.49,691.14:            Cat < Loc   SUFFIX(LBOUND(C))
line=649 fonts=F0-10.0,F6-10.0,F8-10.0 iscore=1.00 bbox=181.92,669.3,311.81,679.26 :            Loc < Cat   PREFIX(RBOUND(C))
line=650 fonts=F0-10.0,F5-10.0,F8-10.0 iscore=1.00 bbox=181.92,657.3,310.49,667.26 :            Cat ≪ Loc   SUFFIX(LBOUND(C))
line=651 fonts=F0-10.0,F5-10.0,F8-10.0 iscore=0.75 bbox=181.92,645.3,311.81,655.26 :            Loc ≪  Cat  PREFIX(RBOUND(C))

doc_id=42 page=16 block_id=16-2 bbox=325.72,645.3,429.82,703.5 label=tttr 652 654
line=652 fonts=F0-10.0 bbox=325.72,693.54,401.61,703.5                            :                                            p-mask component
line=653 fonts=F0-10.0,F8-10.0 iscore=0.33 bbox=326.09,657.3,425.94,667.26        :                                            SINGLETON(LBOUND(C) - 1)
line=654 fonts=F0-10.0,F1-10.0,F8-10.0 iscore=0.67 bbox=326.09,645.3,429.82,655.26:                                            SINGLETON(RBOUND(C) + 1)

doc_id=42 page=16 block_id=16-3 bbox=126.0,582.18,484.05,628.02 label=ttbtt 655 658
line=655 fonts=F0-10.0 bbox=126.0,618.06,484.05,628.02            :Here, Cat refers to the category being predicted (in the form of either a description or a
line=656 fonts=F0-10.0 iscore=0.29 bbox=126.0,606.18,484.04,616.14:token), and Loc  refers to the location of an already-located category. (Thus constraints
line=657 fonts=F0-10.0 iscore=0.12 bbox=126.0,594.18,483.95,604.14:that do not mention the category being predicted and constraints that do not refer to any
line=658 fonts=F0-10.0 iscore=0.12 bbox=126.0,582.18,346.76,592.14:already-located categories are irrelevant for prediction.)

doc_id=42 page=16 block_id=16-4 bbox=126.0,540.42,484.38,574.26 label=ttbtbt 659 661
line=659 fonts=F0-10.0 bbox=126.0,564.3,484.38,574.26                   :Each constraint in turn is checked to see which (if any) of these patterns it matches, and the
line=660 fonts=F0-10.0,F8-10.0 iscore=0.06 bbox=126.0,552.3,484.2,562.26:relevant mask components are calculated. At the end, all n-mask components are COMBINEd,
line=661 fonts=F0-10.0 iscore=0.23 bbox=126.0,540.42,347.44,550.38      :as are all p-mask components: these are the new masks.

doc_id=42 page=16 block_id=16-5 bbox=126.0,510.54,484.37,532.38 label=ttbtbb 662 663
line=662 fonts=F0-10.0,F4-10.0 bbox=126.0,522.42,484.37,532.38   :For example, if the parser is predicting verb as token 2, it would respond to some sample
line=663 fonts=F0-10.0 iscore=0.12 bbox=126.0,510.54,214.68,520.5:constraints as follows:

doc_id=42 page=16 block_id=16-6 bbox=190.56,434.1,420.69,495.06 label=ttbb 664 668
line=664 fonts=F0-10.0 bbox=257.28,485.1,420.69,495.06                     :                           n-mask component  p-mask component
line=665 fonts=F0-10.0,F6-10.0 iscore=0.25 bbox=190.56,472.74,281.72,482.7 :             00010 < verb  00011
line=666 fonts=F0-10.0,F6-10.0 iscore=0.25 bbox=190.56,460.74,225.0,470.7  :             3 < verb
line=667 fonts=F0-10.0,F5-10.0 iscore=0.60 bbox=190.56,448.86,369.62,458.82:             2 ≪ 01000     11000             00100
line=668 fonts=F0-10.0 iscore=0.60 bbox=190.56,434.1,369.91,444.06         :             result        11011             00100

doc_id=42 page=16 block_id=16-7 bbox=126.0,335.1,484.71,416.82 label=tbttt 669 675
line=669 fonts=F0-10.0,F4-10.0 bbox=126.0,406.86,484.71,416.82    :For the first constraint, the parser sees that categories matching the description verb must
line=670 fonts=F0-10.0 iscore=0.29 bbox=126.0,394.86,483.77,404.82:follow the position 00010, generating the negative mask component 00011. The  second
line=671 fonts=F0-10.0 iscore=0.29 bbox=126.0,382.86,484.12,392.82:constraint doesn’t contribute anything, as it does not refer to any as-yet determined loca-
line=672 fonts=F0-10.0 iscore=0.14 bbox=126.0,370.98,484.06,380.94:tions. The third constraint requires category number 2 to immediately precede the position
line=673 fonts=F0-10.0 iscore=0.15 bbox=126.0,358.98,483.75,368.94:01000.  This generates both a negative mask component (11000), which encodes the fact
line=674 fonts=F0-10.0 iscore=0.14 bbox=126.0,347.1,484.05,357.06 :that the category cannot follow the position given, and a positive mask component (00100),
line=675 fonts=F0-10.0 iscore=0.14 bbox=126.0,335.1,411.07,345.06 :which encodes the fact that the category must include the third position.

doc_id=42 page=16 block_id=16-8 bbox=126.0,281.34,484.5,327.18 label=tbttb 676 679
line=676 fonts=F0-10.0 bbox=126.0,317.22,484.5,327.18             :Once  the new masks have been calculated, the parser ensures that an edge is only entered
line=677 fonts=F0-10.0 iscore=0.25 bbox=126.0,305.22,484.08,315.18:into the chart if the n-mask has enough space for the rule being considered. For instance,
line=678 fonts=F0-10.0 iscore=0.06 bbox=126.0,293.22,484.04,303.18:a rule like (13) cannot apply within a mask that has only one unoccupied position, so such
line=679 fonts=F0-10.0 iscore=0.18 bbox=126.0,281.34,374.54,291.3 :an edge would be blocked from entering the chart at this point.

doc_id=42 page=16 block_id=16-9 bbox=126.0,256.38,194.53,266.95 label=tbtb 680 680
line=680 fonts=F0-10.0,F0-7.0,F5-10.0 bbox=126.0,256.38,194.53,266.95:(13) A → B^{1}, C^{2}

doc_id=42 page=16 block_id=16-10 bbox=126.0,207.54,484.44,241.5 label=tbb 681 683
line=681 fonts=F0-10.0 bbox=126.0,231.54,484.44,241.5            :If it passes this check, the newly-predicted edge is entered into the chart with an empty cov-
line=682 fonts=F0-10.0 iscore=0.18 bbox=126.0,219.54,484.23,229.5:erage vector; as usual, the chart will respond to this by applying completion and prediction
line=683 fonts=F0-10.0 iscore=0.13 bbox=126.0,207.54,174.37,217.5:to this edge.

doc_id=42 page=16 block_id=16-11 bbox=126.0,175.02,193.07,184.98 label=bt 684 684
line=684 fonts=F3-10.0 bbox=126.0,175.02,193.07,184.98:4.3 Completion

doc_id=42 page=16 block_id=16-12 bbox=126.0,48.06,484.74,160.38 label=bb 685 691
line=685 fonts=F0-10.0 bbox=126.0,150.42,484.44,160.38            :Recall that completion is the process of combining a compatible pair of active and passive
line=686 fonts=F0-10.0 iscore=0.20 bbox=126.0,138.42,484.18,148.38:edges to produce a new edge. The  parser considers each edge compatible with the edge
line=687 fonts=F0-10.0 iscore=0.27 bbox=126.0,126.54,484.35,136.5 :that triggered completion. For each such edge, the parser constructs the LP statements for
line=688 fonts=F0-10.0 iscore=0.25 bbox=126.0,114.54,484.1,124.5  :the new edge (as described in section 4.3.1), the new n-mask, and the new coverage vector.
line=689 fonts=F0-10.0 iscore=0.31 bbox=126.0,102.54,484.74,112.5 :If this was a final completion (the resulting edge is passive), the parser must additionally
line=690 fonts=F0-10.0 iscore=0.20 bbox=126.0,90.66,298.56,100.62 :check to see that the p-mask was respected.
line=691 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02 :                                         16

doc_id=42 page=17 block_id=17-1 bbox=126.0,644.1,484.52,701.94 label=t 692 696
line=692 fonts=F0-10.0 bbox=126.0,691.98,484.3,701.94             :Edges  are indexed by their n-mask hash and active element, so the parser can efficiently
line=693 fonts=F0-10.0 iscore=0.27 bbox=126.0,679.98,484.31,689.94:retrieve only those edges which are likely to yield successful completions. In particular, the
line=694 fonts=F0-10.0 iscore=0.27 bbox=126.0,668.1,484.52,678.06 :parser takes the n-mask hash of the triggering edge and generates a set of non-overlapping
line=695 fonts=F0-10.0 iscore=0.19 bbox=126.0,656.1,484.22,666.06 :bitvectors. All edges having such a bitvector as their n-mask hash are then examined to see
line=696 fonts=F0-10.0 iscore=0.06 bbox=126.0,644.1,464.51,654.06 :if they are category-compatible, and then if their actual n-masks are non-overlapping.

doc_id=42 page=17 block_id=17-2 bbox=126.0,515.22,484.53,621.66 label=btt 697 704
line=697 fonts=F3-10.0 bbox=126.0,611.7,267.76,621.66                     :4.3.1 Order  Constraint Updating
line=698 fonts=F0-10.0 iscore=0.12 bbox=126.0,586.98,484.04,596.94        :For each edge retrieved, the parser must update the word order constraints of the active edge
line=699 fonts=F0-10.0 iscore=0.19 bbox=126.0,575.1,484.45,585.06         :with the coverage of the passive edge. As edges are initially constructed from grammar
line=700 fonts=F0-10.0 iscore=0.14 bbox=126.0,563.1,484.48,573.06         :rules, all order constraints are initially expressed in terms of either descriptions or tokens.
line=701 fonts=F0-10.0 iscore=0.13 bbox=126.0,551.1,484.53,561.06         :As the parse proceeds, these constraints are updated in terms of the actual locations where
line=702 fonts=F0-10.0,F6-10.0 iscore=0.18 bbox=126.0,539.22,483.86,549.18:matching constituents have been found. For example, a constraint like 1 < 2 (where 1 and 2
line=703 fonts=F0-10.0 iscore=0.12 bbox=126.0,527.22,483.93,537.18        :are tokens) can be updated with the information that the constituent corresponding to token
line=704 fonts=F0-10.0 iscore=0.14 bbox=126.0,515.22,352.11,525.18        :1 has been found as the first word, i.e. as position 00001.

doc_id=42 page=17 block_id=17-3 bbox=126.0,389.7,484.61,507.3 label=btbt 705 714
line=705 fonts=F0-10.0,F3-10.0 bbox=126.0,497.34,484.42,507.3     :Activating dormant  constraints. Before this can be done, however, the parser must first
line=706 fonts=F0-10.0 iscore=0.29 bbox=126.0,485.34,484.21,495.3 :check to see if any dormant constraints on the passive edge need to be activated, based on
line=707 fonts=F0-10.0 iscore=0.22 bbox=126.0,473.46,484.61,483.42:the active edge’s domain. The first step of this process is to find the domain that the passive
line=708 fonts=F0-10.0 iscore=0.17 bbox=126.0,461.46,484.26,471.42:edge is being completed into. If the active element of the active edge is referred to in an
line=709 fonts=F0-10.0 iscore=0.17 bbox=126.0,449.46,484.61,459.42:isolation statement, then that domain is the relevant one. Otherwise, the passive edge is
line=710 fonts=F0-10.0 iscore=0.40 bbox=126.0,437.58,484.07,447.54:assumed  to be completed into the active edge’s own domain. Once the relevant domain has
line=711 fonts=F0-10.0 iscore=0.20 bbox=126.0,425.58,484.17,435.54:been determined, the constraints for that domain will be either active or dormant on the
line=712 fonts=F0-10.0 iscore=0.13 bbox=126.0,413.7,484.27,423.66 :passive edge. If dormant, they must be merged with the active edge’s active constraints; all
line=713 fonts=F0-10.0 iscore=0.13 bbox=126.0,401.7,484.29,411.66 :other dormant constraints on the passive edge are merged with the active edge’s dormant
line=714 fonts=F0-10.0 iscore=0.29 bbox=126.0,389.7,425.54,399.66 :constraints. The procedure for merging constraints will be discussed below.

doc_id=42 page=17 block_id=17-4 bbox=126.0,359.82,484.9,381.78 label=btbb 715 716
line=715 fonts=F0-10.0,F3-10.0 bbox=126.0,371.82,484.9,381.78     :Updating  token-based  constraints. Each update step will take one of the following
line=716 fonts=F0-10.0 iscore=0.08 bbox=126.0,359.82,152.01,369.78:forms:

doc_id=42 page=17 block_id=17-5 bbox=141.0,304.02,484.6,349.86 label=bbtt 717 720
line=717 fonts=F0-10.0,F5-10.0 bbox=141.0,339.9,484.45,349.86              :    • The first time one of the categories mentioned in a precedence constraint has been
line=718 fonts=F0-10.0 iscore=0.13 bbox=150.96,328.02,484.6,337.98         :      found, the constraint is updated as above and tested to see whether there is enough
line=719 fonts=F0-10.0,F5-10.0 iscore=0.20 bbox=150.96,316.02,484.34,325.98:      space for the other category. For example, if, given the constraint 1 ≪ 2, constituent
line=720 fonts=F0-10.0 iscore=0.18 bbox=150.96,304.02,478.27,313.98        :      2 is found as the first word of the string, the constraint will be impossible to fulfill.

doc_id=42 page=17 block_id=17-6 bbox=141.0,250.26,484.66,296.1 label=bbtb 721 724
line=721 fonts=F0-10.0,F5-10.0 bbox=141.0,286.14,484.2,296.1       :    • When  the remaining category of a precedence constraint is found, the parser checks
line=722 fonts=F0-10.0 iscore=0.31 bbox=150.96,274.14,484.66,284.1 :      that the constraint actually holds; if it does, then that constraint will not appear as part
line=723 fonts=F0-10.0 iscore=0.19 bbox=150.96,262.26,484.55,272.22:      of the word order constraint set of the resulting edge. If the constraint is discovered
line=724 fonts=F0-10.0 iscore=0.25 bbox=150.96,250.26,479.41,260.22:      to have been violated, the completion step aborts and no edge is added to the chart.

doc_id=42 page=17 block_id=17-7 bbox=126.0,218.34,460.7,240.3 label=bbbt 725 726
line=725 fonts=F0-10.0,F3-10.0 bbox=126.0,230.34,446.99,240.3   :Updating  and merging description-based constraints. With description-based
line=726 fonts=F0-10.0 iscore=0.10 bbox=126.0,218.34,460.7,228.3:constraints, weak and immediate precedence constraints must be handled separately.

doc_id=42 page=17 block_id=17-8 bbox=126.0,140.7,484.7,210.42 label=bbbbt 727 732
line=727 fonts=F0-10.0 bbox=126.0,200.46,484.26,210.42                            :In a weak  precedence constraint, the parser need only keep track of the most extreme
line=728 fonts=F0-10.0,F4-10.0,F6-10.0 iscore=0.07 bbox=126.0,188.46,484.69,198.42:matching cases (the frontiers), if any. For example, the constraint NP < VP needs to
line=729 fonts=F0-10.0,F3-10.0 iscore=0.33 bbox=126.0,176.58,484.4,186.54         :keep track of the rightmost NP and the leftmost VP seen in the domain so far. As long
line=730 fonts=F0-10.0,F3-10.0 iscore=0.17 bbox=126.0,164.58,484.7,174.54         :as the rightmost NP remains to the left of the leftmost VP, the constraint will never cause
line=731 fonts=F0-10.0 iscore=0.18 bbox=126.0,152.58,484.38,162.54                :completion to fail. Similarly, when merging two weak precedence constraints, the most
line=732 fonts=F0-10.0 iscore=0.08 bbox=126.0,140.7,283.82,150.66                 :extreme version of each frontier is kept.

doc_id=42 page=17 block_id=17-9 bbox=126.0,48.06,483.77,132.66 label=bbbbb 733 735
line=733 fonts=F0-10.0 bbox=126.0,122.7,483.77,132.66             :Immediate precedence constraints, on the other hand, need only keep track of whether zero,
line=734 fonts=F0-10.0 iscore=0.12 bbox=126.0,110.82,474.46,120.78:one, or many of each part of the constraint has been seen. The possibilities are as follows:
line=735 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02 :                                         17

doc_id=42 page=18 block_id=18-1 bbox=180.84,645.3,430.92,703.5 label=tt 736 740
line=736 fonts=F0-10.0 bbox=328.08,693.54,334.73,703.5                     :                                        B
line=737 fonts=F0-10.0,F5-10.0 iscore=0.00 bbox=200.04,681.66,428.53,691.62:               A ≪ B   Zero            One             Many
line=738 fonts=F0-10.0 iscore=0.60 bbox=209.64,669.3,424.13,679.26         :                 Zero  OK              OK               OK
line=739 fonts=F0-10.0 iscore=0.22 bbox=180.84,657.3,430.58,667.26         :           A     One   OK    OK if precedence is respected Failure
line=740 fonts=F0-10.0 iscore=0.25 bbox=205.44,645.3,430.92,655.26         :                Many   OK             Failure          Failure

doc_id=42 page=18 block_id=18-2 bbox=126.0,570.3,484.82,628.02 label=tbtt 741 745
line=741 fonts=F0-10.0 bbox=126.0,618.06,484.52,628.02                    :Here, the rows represent the status of the lefthand side of the constraint, and the columns
line=742 fonts=F0-10.0 iscore=0.25 bbox=126.0,606.18,484.6,616.14         :represent the status of the righthand side; the cells then encode whether that particular
line=743 fonts=F0-10.0,F5-10.0 iscore=0.20 bbox=126.0,594.18,484.82,604.14:status indicates a constraint violation. For instance, if the parser knows that NP ≪ VP
line=744 fonts=F0-10.0,F3-10.0 iscore=0.32 bbox=126.0,582.18,484.67,592.14:in this domain, it is acceptable for there to be several VPs, as long as no NPs are present
line=745 fonts=F0-10.0 iscore=0.21 bbox=126.0,570.3,444.76,580.26         :(since, by definition, a category cannot immediately precede multiple locations).

doc_id=42 page=18 block_id=18-3 bbox=126.0,498.54,484.34,562.26 label=tbtb 746 750
line=746 fonts=F0-10.0 bbox=126.0,552.3,484.34,562.26             :To summarize,  immediate  precedence constraint violations can be detected by keeping
line=747 fonts=F0-10.0 iscore=0.12 bbox=126.0,540.42,484.32,550.38:count of the occurences of each side of the constraint; the one exception is the situation
line=748 fonts=F0-10.0 iscore=0.19 bbox=126.0,528.42,484.33,538.38:represented by the center cell, where each side has been observed once. In this case, the
line=749 fonts=F0-10.0 iscore=0.25 bbox=126.0,516.54,373.51,526.5 :parser must check whether the locations are properly adjacent.
line=750 fonts=F0-10.0 iscore=0.10 bbox=126.0,498.54,416.88,508.5 :The corresponding chart for merging two count values is straightforward:

doc_id=42 page=18 block_id=18-4 bbox=231.12,422.82,380.77,481.02 label=tbbt 751 755
line=751 fonts=F0-10.0 bbox=330.96,471.06,337.61,481.02                   :                                     B
line=752 fonts=F0-10.0,F1-10.0 iscore=0.00 bbox=250.2,459.18,380.77,469.14:                      A + B  Zero   One  Many
line=753 fonts=F0-10.0 iscore=0.60 bbox=256.56,446.82,380.58,456.78       :                       Zero  Zero   One  Many
line=754 fonts=F0-10.0 iscore=0.40 bbox=231.12,434.82,380.63,444.78       :                   A    One  One   Many  Many
line=755 fonts=F0-10.0 iscore=0.75 bbox=252.24,422.82,380.49,432.78       :                       Many  Many  Many  Many

doc_id=42 page=18 block_id=18-5 bbox=126.0,311.82,484.56,405.54 label=tbbb 756 763
line=756 fonts=F0-10.0,F3-10.0 bbox=126.0,395.58,484.44,405.54           :Final Steps. Once  the word order constraints have been successfully updated, the rest of
line=757 fonts=F0-10.0 iscore=0.11 bbox=126.0,383.58,484.35,393.54       :the new edge  is easy to compute: the category of the edge is the category of the active
line=758 fonts=F0-10.0 iscore=0.22 bbox=126.0,371.7,484.42,381.66        :edge, the missing righthand side is the tail of the active edge’s righthand side, and the
line=759 fonts=F0-10.0,F8-10.0 iscore=0.18 bbox=126.0,359.7,484.49,369.66:coverage vector is the bitwise OR of the two edges’ coverage vectors. Finally, if this was a
line=760 fonts=F0-10.0 iscore=0.35 bbox=126.0,347.7,484.56,357.66        :final completion (that is, the edge being created is passive), the parser checks to see if the
line=761 fonts=F0-10.0 iscore=0.29 bbox=126.0,335.82,484.29,345.78       :p-mask  was respected: in other words, every occupied bit in the p-mask must be occupied
line=762 fonts=F0-10.0 iscore=0.18 bbox=126.0,323.82,484.18,333.78       :in the new coverage vector. The resulting edge is then added to the chart and itself triggers
line=763 fonts=F0-10.0 iscore=0.12 bbox=126.0,311.82,300.93,321.78       :another round of completion and prediction.

doc_id=42 page=18 block_id=18-6 bbox=126.0,230.82,484.6,289.38 label=bt 764 767
line=764 fonts=F3-10.0 bbox=126.0,279.42,267.13,289.38            :4.4 Agendas  and  the Search Tree
line=765 fonts=F0-10.0 iscore=0.18 bbox=126.0,254.7,484.6,264.66  :The overall search strategy of the parser is as follows: Seed the chart with passive edges for
line=766 fonts=F0-10.0 iscore=0.18 bbox=126.0,242.7,484.01,252.66 :each word of the input. Initiate the parse by predicting the root category; each edge added
line=767 fonts=F0-10.0 iscore=0.12 bbox=126.0,230.82,349.68,240.78:to the chart triggers further completions and predictions.

doc_id=42 page=18 block_id=18-7 bbox=126.0,48.06,484.65,222.78 label=bb 768 776
line=768 fonts=F0-10.0 bbox=126.0,212.82,484.48,222.78                   :In each of these steps, the parser will often have many possibilities to explore. For instance,
line=769 fonts=F0-10.0 iscore=0.29 bbox=126.0,200.94,483.88,210.9        :there may be many  rules in the grammar that provide the root category, or there may be
line=770 fonts=F0-10.0 iscore=0.24 bbox=126.0,188.94,484.13,198.9        :many  compatible edges in the chart to complete with. A recurring concept in parser design
line=771 fonts=F0-10.0,F4-10.0 iscore=0.29 bbox=126.0,176.94,484.17,186.9:is that of an agenda – a data structure that keeps track of the as-yet unexplored possibilities
line=772 fonts=F0-10.0 iscore=0.29 bbox=126.0,165.06,484.16,175.02       :at each point and decides which will be explored next. Since the current implementation of
line=773 fonts=F0-10.0 iscore=0.25 bbox=126.0,153.06,484.27,163.02       :this algorithm is an all-paths parser, the nature of the agenda plays a relatively minor role,
line=774 fonts=F0-10.0 iscore=0.19 bbox=126.0,141.18,484.65,151.14       :and so Prolog’s call stack implicitly represents the parsing agenda. Thus the consequences
line=775 fonts=F0-10.0 iscore=0.15 bbox=126.0,129.18,416.38,139.14       :of any choice are explored before alternatives to that choice are explored.
line=776 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02        :                                          18

doc_id=42 page=19 block_id=19-1 bbox=126.0,583.62,484.4,701.94 label=tt 777 785
line=777 fonts=F3-10.0 bbox=126.0,691.98,241.95,701.94            :4.5 Grammar    Compilation
line=778 fonts=F0-10.0 iscore=0.12 bbox=126.0,667.26,484.4,677.22 :As can be seen from  the algorithm presented so far, the parser spends a significant time
line=779 fonts=F0-10.0 iscore=0.12 bbox=126.0,655.38,484.03,665.34:on keeping track of order constraints. It is therefore desirable to be enable to ensure that
line=780 fonts=F0-10.0 iscore=0.18 bbox=126.0,643.38,484.08,653.34:each constraint stored on an edge is one that could potentially be relevant to that edge. This
line=781 fonts=F0-10.0 iscore=0.18 bbox=126.0,631.5,484.36,641.46 :is accomplished through a compilation phase. This phase, along with allowing grammar
line=782 fonts=F0-10.0 iscore=0.14 bbox=126.0,619.5,484.18,629.46 :writers to use a more natural input syntax (including, for instance, global order constraints),
line=783 fonts=F0-10.0 iscore=0.21 bbox=126.0,607.5,484.19,617.46 :ensures that constraints only appear on domains in which both components of the constraint
line=784 fonts=F0-10.0 iscore=0.07 bbox=126.0,595.62,483.85,605.58:are reachable (i.e. could potentially appear in that domain). For example, the grammar in
line=785 fonts=F0-10.0 iscore=0.07 bbox=126.0,583.62,283.85,593.58:Figure 4 is compiled to that in Figure 5.

doc_id=42 page=19 block_id=19-2 bbox=137.64,466.74,415.65,568.38 label=tb 786 792
line=786 fonts=F0-10.0,F6-10.0 bbox=138.24,558.42,268.6,568.38                            :   a) root(A, [E < B, J < I, J < G])
line=787 fonts=F0-10.0,F0-7.0,F5-10.0 iscore=0.18 bbox=137.64,546.42,198.37,556.99        :   b) A → B^{1}, C^{2}
line=788 fonts=F0-10.0,F0-7.0,F5-10.0,F6-10.0 iscore=0.21 bbox=138.24,534.54,406.01,545.11:   c) C → D^{1}, E^{2}, F^{3} ; 〈[1,3], [D < J, E ≪ F, E < B, J < I, J < G], K〉
line=789 fonts=F0-10.0,F0-7.0,F5-10.0,F6-10.0 iscore=0.21 bbox=137.64,522.54,225.13,533.11:   d) E → J^{1}, G^{2} ; 1 < 2
line=790 fonts=F0-10.0,F0-7.0,F5-10.0 iscore=0.56 bbox=138.24,510.54,194.53,521.23        :   e) E → H^{1}, I^{2}
line=791 fonts=F0-10.0,F0-7.0,F5-10.0,F6-10.0 iscore=0.25 bbox=139.32,498.66,357.48,509.23:   f) F → J^{1}, C^{2} ; 〈[1,2], [E ≪ 1, E < B, J < I, J < G], F〉
line=792 fonts=F0-10.0 iscore=0.33 bbox=195.48,466.74,415.65,476.7                        :               Figure 4: The Effects of Grammar Compilation: Before

doc_id=42 page=19 block_id=19-3 bbox=137.64,371.34,331.19,441.18 label=bt 793 798
line=793 fonts=F0-10.0,F6-10.0 bbox=138.24,431.22,244.64,441.18                           :   a) root(A, [E < B, J < G])
line=794 fonts=F0-10.0,F0-7.0,F5-10.0 iscore=0.12 bbox=137.64,419.22,198.37,429.79        :  b) A →  B^{1}, C^{2}
line=795 fonts=F0-10.0,F0-7.0,F5-10.0,F6-10.0 iscore=0.27 bbox=138.24,407.22,326.25,417.91:   c) C → D^{1}, E^{2}, F^{3} ; 〈[1,3], [D < F, E ≪ F], K〉
line=796 fonts=F0-10.0,F0-7.0,F5-10.0,F6-10.0 iscore=0.40 bbox=137.64,395.34,225.13,405.91:  d) E →  J^{1}, G^{2} ; 1 < 2
line=797 fonts=F0-10.0,F0-7.0,F5-10.0 iscore=0.50 bbox=138.24,383.34,194.53,393.91        :   e) E → H^{1}, I^{2}
line=798 fonts=F0-10.0,F0-7.0,F5-10.0,F6-10.0 iscore=0.24 bbox=139.32,371.34,331.19,382.03:   f) F → J^{1}, C^{2} ; 〈[1,2], [E ≪ 1, F < I, F < G], F〉

doc_id=42 page=19 block_id=19-4 bbox=126.0,275.34,484.58,349.5 label=bbtt 799 803
line=799 fonts=F0-10.0 bbox=198.48,339.54,412.56,349.5            :                 Figure 5: The Effects of Grammar Compilation: After
line=800 fonts=F0-10.0 iscore=0.13 bbox=126.0,311.22,484.23,321.18:The first step in grammar compilation is to compute the reachability of each category and
line=801 fonts=F0-10.0 iscore=0.40 bbox=126.0,299.22,484.58,309.18:domain.  By  definition, the LHS category reaches all non-isolated RHS categories and
line=802 fonts=F0-10.0 iscore=0.08 bbox=126.0,287.34,484.08,297.3 :everything they reach. This can be calculated through an iterative procedure, as illustrated
line=803 fonts=F0-10.0 iscore=0.15 bbox=126.0,275.34,263.04,285.3 :in Figure 6 for the grammar in (4).

doc_id=42 page=19 block_id=19-5 bbox=166.56,176.34,282.43,258.42 label=bbtbl 804 810
line=804 fonts=F0-10.0,F5-10.0 bbox=188.76,248.46,282.43,258.42            :             A   {B, C} ∪ reach(C)
line=805 fonts=F0-10.0,F5-10.0 iscore=0.60 bbox=189.24,236.58,269.71,246.54:             C   {E} ∪ reach(E)
line=806 fonts=F0-10.0,F5-10.0 iscore=0.50 bbox=189.84,224.58,265.74,234.54:             E   {J, G} | {H, I}
line=807 fonts=F0-10.0,F5-10.0 iscore=0.33 bbox=190.32,212.58,213.2,222.54 :             F   ∅
line=808 fonts=F0-10.0,F5-10.0 iscore=0.25 bbox=166.56,200.22,271.56,210.18:         dom[0]  {A} ∪  reach(A)
line=809 fonts=F0-10.0,F5-10.0 iscore=0.80 bbox=166.56,188.34,280.46,198.3 :         dom[1]  {D, F} ∪ reach(F)
line=810 fonts=F0-10.0,F5-10.0 iscore=0.80 bbox=166.56,176.34,279.35,186.3 :         dom[2]  {J, C} ∪ reach(C)

doc_id=42 page=19 block_id=19-6 bbox=294.24,176.34,444.56,258.42 label=bbtbr 811 817
line=811 fonts=F0-10.0,F5-10.0 bbox=294.67,248.46,420.69,258.42            :                                      {B, C, E, J, G} | {B, C, E, H, I}
line=812 fonts=F0-10.0,F5-10.0 iscore=0.36 bbox=294.55,236.58,374.07,246.54:                                      {E, J, G} | {E, H, I}
line=813 fonts=F0-10.0,F5-10.0 iscore=0.14 bbox=294.66,224.58,352.1,234.54 :                                      {J, G} | {H, I}
line=814 fonts=F5-10.0 iscore=0.20 bbox=294.86,212.58,299.84,222.54        :                                      ∅
line=815 fonts=F0-10.0,F5-10.0 iscore=0.08 bbox=294.24,200.22,444.56,210.18:                                      {A, B, C, E, J, G} | {A, B, C, E, H, I}
line=816 fonts=F0-10.0 iscore=0.15 bbox=294.26,188.34,321.45,198.3         :                                      {D, F}
line=817 fonts=F0-10.0,F5-10.0 iscore=0.20 bbox=294.35,176.34,406.08,186.3 :                                      {C, E, J, G} | {J, C, E, H, I}

doc_id=42 page=19 block_id=19-7 bbox=126.0,48.06,484.8,155.1 label=bbb 818 822
line=818 fonts=F0-10.0 bbox=235.32,145.14,376.34,155.1                   :                          Figure 6: Reachability computation
line=819 fonts=F0-10.0 iscore=0.07 bbox=126.0,116.82,484.24,126.78       :The process starts by calculating the basic reachability for each category (given in the top-
line=820 fonts=F0-10.0,F3-10.0 iscore=0.25 bbox=126.0,104.94,484.21,114.9:left block of Figure 6). For instance, rule (4f) indicates that F reaches nothing, since all
line=821 fonts=F0-10.0 iscore=0.19 bbox=126.0,92.94,484.8,102.9          :of its RHS categories are referenced in an isolation statement. Since there are two rules
line=822 fonts=F0-10.0 iscore=0.14 bbox=300.96,48.06,310.92,58.02        :                                          19

doc_id=42 page=20 block_id=20-1 bbox=126.0,644.1,484.55,701.94 label=tt 823 827
line=823 fonts=F0-10.0,F3-10.0 bbox=126.0,691.98,484.27,701.94            :expanding E, that symbol has a disjunctive reachability: one disjunct for each rule. Finally,
line=824 fonts=F0-10.0,F3-10.0 iscore=0.33 bbox=126.0,679.98,484.55,689.94:the rules for A and C  indicate that each reaches a non-terminal, so their reachabilities
line=825 fonts=F0-10.0 iscore=0.13 bbox=126.0,668.1,484.32,678.06         :include a transitive component.  Once  the basic reachabilities have been computed, the
line=826 fonts=F0-10.0 iscore=0.25 bbox=126.0,656.1,484.31,666.06         :transitive reachabilities are unioned in. The process cycles through each category until
line=827 fonts=F0-10.0 iscore=0.17 bbox=126.0,644.1,389.55,654.06         :there are no changes, yielding the set of reachabilities on the right.

doc_id=42 page=20 block_id=20-2 bbox=126.0,590.34,484.86,636.18 label=tbt 828 831
line=828 fonts=F0-10.0 bbox=126.0,626.22,484.32,636.18            :At this point, the reachability of each domain can be calculated. Each domain  reaches
line=829 fonts=F0-10.0 iscore=0.18 bbox=126.0,614.22,484.86,624.18:the categories it contains as well as the categories they reach. Since at this point the full
line=830 fonts=F0-10.0 iscore=0.24 bbox=126.0,602.34,484.06,612.3 :reachability of each category is known, the domain reachabilities can be computed in a
line=831 fonts=F0-10.0 iscore=0.07 bbox=126.0,590.34,171.85,600.3 :single pass.

doc_id=42 page=20 block_id=20-3 bbox=126.0,524.58,484.23,582.42 label=tbb 832 836
line=832 fonts=F0-10.0 bbox=126.0,572.46,484.15,582.42                            :Now  the information about each domain’s reachability can be used to optimize the place-
line=833 fonts=F0-10.0 iscore=0.19 bbox=126.0,560.46,484.08,570.42                :ment of the domain-level order constraints. For a constraint to be relevant to a given do-
line=834 fonts=F0-10.0 iscore=0.19 bbox=126.0,548.46,484.14,558.42                :main, both of its components must  be reachable in that domain. In Figure 4, the root
line=835 fonts=F0-10.0,F3-10.0,F6-10.0 iscore=0.24 bbox=126.0,536.58,484.23,546.54:domain  contains the constraint J < I, yet J and I are never simultaneously reachable in that
line=836 fonts=F0-10.0 iscore=0.35 bbox=126.0,524.58,434.42,534.54                :domain; as a result, that constraint is absent from the root domain in Figure 5.

doc_id=42 page=20 block_id=20-4 bbox=126.0,488.94,211.92,500.9 label=btt 837 837
line=837 fonts=F3-12.0 bbox=126.0,488.94,211.92,500.9:5 Sample Parses

doc_id=42 page=20 block_id=20-5 bbox=126.0,448.74,484.26,470.7 label=btb 838 839
line=838 fonts=F0-10.0 bbox=126.0,460.74,484.26,470.7            :Having described the parsing algorithm in general, the paper will now present two concrete
line=839 fonts=F0-10.0 iscore=0.07 bbox=126.0,448.74,414.42,458.7:examples: the parser’s actions on a specific grammar and input sentence.

doc_id=42 page=20 block_id=20-6 bbox=126.0,391.62,407.41,426.3 label=bbtt 840 841
line=840 fonts=F3-10.0 bbox=126.0,416.34,255.78,426.3                    :5.1 Relatively-free word order
line=841 fonts=F0-10.0,F0-7.0 iscore=0.07 bbox=126.0,391.62,407.41,402.19:This sample parse uses the grammar in (14) and the sentence in (15). ^{16}

doc_id=42 page=20 block_id=20-7 bbox=126.0,237.18,383.65,376.74 label=bbtbt 842 852
line=842 fonts=F0-10.0 bbox=126.0,366.78,209.28,376.74                                    :(14)    a) root(s, []).
line=843 fonts=F0-10.0,F0-7.0,F5-10.0,F6-10.0 iscore=0.15 bbox=156.24,353.82,314.14,364.39:        b) s →  verb^{1}, nom^{2}, acc^{3} ; 2 < 1, 3 < 1
line=844 fonts=F0-10.0,F0-7.0,F5-10.0,F6-10.0 iscore=0.54 bbox=156.72,340.86,265.21,351.43:        c) s →  verb^{1}, nom^{2} ; 2 < 1
line=845 fonts=F0-10.0,F0-7.0,F5-10.0 iscore=0.44 bbox=156.24,327.9,383.65,338.47         :        d) s →  conj^{2}, s^{1}, s^{3} ; 1≪ 2, 2 ≪ 3 ;〈[1], 1, s〉, 〈[3], 2, s〉
line=846 fonts=F0-10.0,F0-7.0,F5-10.0 iscore=0.11 bbox=156.72,314.94,234.85,325.51        :        e) acc →  adj^{1}, acc^{2}
line=847 fonts=F0-10.0,F11-6.7,F5-10.0 iscore=0.25 bbox=157.92,301.98,315.79,311.94       :        f) na;l+.s,a → nom ‘Nala’ (a proper name)
line=848 fonts=F0-10.0,F11-6.7,F5-10.0 iscore=0.38 bbox=156.24,289.02,244.27,298.98       :        g) na;ga:=+m,a → acc ‘city’
line=849 fonts=F0-10.0,F11-6.7,F5-10.0 iscore=0.40 bbox=156.24,276.06,261.05,286.02       :        h) A;ga;.cC+.t,a → verb ‘went’
line=850 fonts=F0-10.0,F11-6.7,F5-10.0 iscore=0.40 bbox=158.4,263.1,229.9,273.06          :        i) ..ca → conj  ‘and’
line=851 fonts=F0-10.0,F11-6.7,F5-10.0 iscore=0.60 bbox=158.4,250.14,258.63,260.1         :        j) A;va;d;t,a → verb ‘spoke’
line=852 fonts=F0-10.0,F11-6.7,F5-10.0 iscore=0.40 bbox=156.24,237.18,261.41,247.14       :        k) .fl+:fia;.ca:=+m,a → adj ‘shining’

doc_id=42 page=20 block_id=20-8 bbox=126.0,185.7,336.0,222.3 label=bbtbbt 853 855
line=853 fonts=F0-10.0,F11-6.7 bbox=126.0,212.34,336.0,222.3      :(15)   .fl+:fia;.ca:=+m,a na;l+.s,a na;ga:=+m,a A;ga;.cC+.t,a ..ca na;l+.s,a A;va;d;t,a
line=854 fonts=F0-10.0 iscore=1.00 bbox=147.12,200.34,333.68,210.3:       shining            Nala      city        went          and  Nala      spoke
line=855 fonts=F0-9.0 iscore=0.11 bbox=147.12,185.7,314.16,194.67 :       ‘Nala  went  to the shining  city  and Nala   spoke’

doc_id=42 page=20 block_id=20-9 bbox=126.0,124.98,484.36,170.82 label=bbtbbb 856 859
line=856 fonts=F0-10.0 bbox=126.0,160.86,484.36,170.82            :The grammar  can be summarized as follows: A sentence may consist of a verb and either
line=857 fonts=F0-10.0 iscore=0.12 bbox=126.0,148.86,484.35,158.82:one or two arguments preceding it. A sentence may also consist of a conjunction immedi-
line=858 fonts=F0-10.0 iscore=0.13 bbox=126.0,136.86,484.32,146.82:ately between two (conjunct) sentences, each of which forms an isolated domain. Finally,
line=859 fonts=F0-10.0 iscore=0.14 bbox=126.0,124.98,484.29,134.94:accusatives may be modified by an adjective which may occur anywhere in a sentence,

doc_id=42 page=20 block_id=20-10 bbox=126.12,48.06,377.23,101.68 label=bbb 860 861
line=860 fonts=F0-6.0,F0-8.0,F12-5.5 bbox=126.12,92.58,377.23,101.68:^{16} The example     has  been   tokenized     from    .fl+:fia;.ca:=M na;l+.ea na;ga:=+ma;ga;.cC+.(ã^{É}a na;l+.ea Y;va;d;t,a.
line=861 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02   :                                                                         20

doc_id=42 page=21 block_id=21-1 bbox=126.0,679.98,484.54,701.94 label=tttt 862 863
line=862 fonts=F0-10.0 bbox=126.0,691.98,484.54,701.94                    :before  or after the accusative it modifies.  Note  also that the example  sentence   contains the
line=863 fonts=F0-10.0,F11-6.7 iscore=0.13 bbox=126.0,679.98,342.93,689.94:discontinuous   constituent .fl+:fia;.ca:=+m,a na;ga:=+m,a ‘shining city’.

doc_id=42 page=21 block_id=21-2 bbox=126.0,650.1,484.56,672.06 label=tttb 864 865
line=864 fonts=F0-10.0 bbox=126.0,662.1,484.56,672.06            :Before parsing, the parser seeds the chart with the lexical entries, each covering a singleton
line=865 fonts=F0-10.0 iscore=0.07 bbox=126.0,650.1,152.67,660.06:vector.

doc_id=42 page=21 block_id=21-3 bbox=126.0,584.34,484.63,642.18 label=ttbt 866 870
line=866 fonts=F0-10.0 bbox=126.0,632.22,484.63,642.18            :The parser’s actions at each step are illustrated in the following format: Edge lines begin
line=867 fonts=F0-10.0 iscore=0.38 bbox=126.0,620.22,484.25,630.18:with a line number, followed by  a description of the step that generated that edge, the
line=868 fonts=F0-10.0 iscore=0.25 bbox=126.0,608.34,484.06,618.3 :number  of the resulting edge, three bitvectors representing the edge’s coverage, n-mask,
line=869 fonts=F0-10.0 iscore=0.12 bbox=126.0,596.34,484.44,606.3 :and p-mask, the category of the edge, its RHS, and its order constraints. Failure lines (as
line=870 fonts=F0-10.0 iscore=0.06 bbox=126.0,584.34,433.08,594.3 :number  11 below) only contain a line number and a description of the failure.

doc_id=42 page=21 block_id=21-4 bbox=126.0,518.58,484.49,576.42 label=ttbb 871 875
line=871 fonts=F0-10.0,F11-6.7 bbox=126.0,566.46,484.42,576.42            :For instance, line 1 was created by scanning the input word  .fl+:fia;.ca:=+m,a. The resulting edge,
line=872 fonts=F0-10.0 iscore=0.19 bbox=126.0,554.46,483.88,564.42        :number  1, covers the leftmost word of the input (0000001); as a consequence, it has that
line=873 fonts=F0-10.0 iscore=0.25 bbox=126.0,542.58,484.47,552.54        :position blocked in its n-mask, and like all lexical edges, it has an empty p-mask. The
line=874 fonts=F0-10.0,F4-10.0 iscore=0.18 bbox=126.0,530.58,484.49,540.54:edge provides  the category adj, is passive (since the rhs list is empty), and has no order
line=875 fonts=F0-10.0 iscore=0.06 bbox=126.0,518.58,171.66,528.54        :constraints.

doc_id=42 page=21 block_id=21-5 bbox=140.16,320.34,278.07,497.55 label=tbl 876 891
line=876 fonts=F0-9.0 bbox=140.16,488.46,273.03,497.55                           :    #      Description        E      Cover
line=877 fonts=F0-9.0 iscore=0.33 bbox=162.12,476.7,182.05,485.67                :           RLPs
line=878 fonts=F0-9.0,F13-6.1,F8-9.0 iscore=0.20 bbox=140.16,465.9,278.07,474.87 :    1      SCAN .fl+:fia;.ca:=+m,a 1 0000001
line=879 fonts=F0-9.0 iscore=0.25 bbox=162.12,454.86,168.09,463.83               :           []
line=880 fonts=F0-9.0,F13-6.1,F8-9.0 iscore=0.20 bbox=140.16,443.46,278.03,452.55:    2      SCAN na;l+.s,a     2     0000010
line=881 fonts=F0-9.0 iscore=0.25 bbox=162.12,432.42,168.09,441.39               :           []
line=882 fonts=F0-9.0,F13-6.1,F8-9.0 iscore=0.20 bbox=140.16,421.02,278.03,430.11:    3      SCAN na;ga:=+m,a   3     0000100
line=883 fonts=F0-9.0 iscore=0.25 bbox=162.12,409.98,168.09,418.95               :           []
line=884 fonts=F0-9.0,F13-6.1,F8-9.0 iscore=0.20 bbox=140.16,398.58,278.03,407.67:    4      SCAN A;ga;.cC+.t,a 4     0001000
line=885 fonts=F0-9.0 iscore=0.25 bbox=162.12,387.54,168.09,396.51               :           []
line=886 fonts=F0-9.0,F13-6.1,F8-9.0 iscore=0.20 bbox=140.16,376.14,278.03,385.23:    5      SCAN ..ca          5     0010000
line=887 fonts=F0-9.0 iscore=0.25 bbox=162.12,365.22,168.09,374.19               :           []
line=888 fonts=F0-9.0,F13-6.1,F8-9.0 iscore=0.20 bbox=140.16,353.7,278.03,362.79 :    6      SCAN na;l+.s,a     6     0100000
line=889 fonts=F0-9.0 iscore=0.25 bbox=162.12,342.78,168.09,351.75               :           []
line=890 fonts=F0-9.0,F13-6.1,F8-9.0 iscore=0.20 bbox=140.16,331.26,278.03,340.35:    7      SCAN A;va;d;t,a    7     1000000
line=891 fonts=F0-9.0 iscore=0.25 bbox=162.12,320.34,168.09,329.31               :           []

doc_id=42 page=21 block_id=21-6 bbox=290.17,320.34,424.57,497.43 label=tbr 892 907
line=892 fonts=F0-9.0 bbox=291.39,488.46,424.57,497.43            :                                       N-Mask    P-Mask    LHS    RHS
line=893 fonts=F0-9.0 iscore=0.25 bbox=290.17,476.7,304.62,485.67 :                                       Isos
line=894 fonts=F0-9.0 iscore=0.25 bbox=290.67,465.9,414.04,474.87 :                                       0000001   0000000   adj    []
line=895 fonts=F0-9.0 iscore=0.25 bbox=290.25,454.86,296.22,463.83:                                       []
line=896 fonts=F0-9.0 iscore=0.25 bbox=290.63,443.46,414.06,452.43:                                       0000010   0000000   nom    []
line=897 fonts=F0-9.0 iscore=0.25 bbox=290.25,432.42,296.22,441.39:                                       []
line=898 fonts=F0-9.0 iscore=0.25 bbox=290.63,421.02,414.03,429.99:                                       0000100   0000000   acc    []
line=899 fonts=F0-9.0 iscore=0.25 bbox=290.25,409.98,296.22,418.95:                                       []
line=900 fonts=F0-9.0 iscore=0.25 bbox=290.63,398.58,414.06,407.55:                                       0001000   0000000   verb   []
line=901 fonts=F0-9.0 iscore=0.25 bbox=290.25,387.54,296.22,396.51:                                       []
line=902 fonts=F0-9.0 iscore=0.25 bbox=290.63,376.14,414.04,385.11:                                       0010000   0000000   conj   []
line=903 fonts=F0-9.0 iscore=0.25 bbox=290.25,365.22,296.22,374.19:                                       []
line=904 fonts=F0-9.0 iscore=0.25 bbox=290.63,353.7,414.06,362.67 :                                       0100000   0000000   nom    []
line=905 fonts=F0-9.0 iscore=0.25 bbox=290.25,342.78,296.22,351.75:                                       []
line=906 fonts=F0-9.0 iscore=0.25 bbox=290.63,331.26,414.06,340.23:                                       1000000   0000000   verb   []
line=907 fonts=F0-9.0 iscore=0.25 bbox=290.25,320.34,296.22,329.31:                                       []

doc_id=42 page=21 block_id=21-7 bbox=126.0,224.1,484.52,269.94 label=btt 908 911
line=908 fonts=F0-10.0 bbox=126.0,259.98,484.39,269.94            :In these parse traces, the first row contains the line number of the parsing step and a brief
line=909 fonts=F0-10.0 iscore=0.28 bbox=126.0,247.98,484.52,257.94:description of the parser action. This is followed by either the details of the resulting
line=910 fonts=F0-10.0 iscore=0.13 bbox=126.0,236.1,483.84,246.06 :edge (edge number, coverage vector, n-mask, p-mask, lhs, rhs, rule-based order constraints,
line=911 fonts=F0-10.0 iscore=0.08 bbox=126.0,224.1,364.12,234.06 :isolation statements) or the reason that no edge was created.

doc_id=42 page=21 block_id=21-8 bbox=126.0,146.34,484.56,216.06 label=btb 912 917
line=912 fonts=F0-10.0,F4-10.0 bbox=126.0,206.1,484.23,216.06     :The parse itself begins by predicting the start symbol of the grammar, here s. Each of the
line=913 fonts=F0-10.0 iscore=0.24 bbox=126.0,194.22,484.19,204.18:rules that can generate this symbol are considered in order. The prediction step adds a
line=914 fonts=F0-10.0 iscore=0.25 bbox=126.0,182.22,484.24,192.18:new edge  to the chart based on the rule. All edges generated by prediction have coverage
line=915 fonts=F0-10.0 iscore=0.25 bbox=126.0,170.34,483.62,180.3 :0000000.  The n-mask  0000000  is provided by this step’s trigger (here, the dummy edge
line=916 fonts=F0-10.0 iscore=0.16 bbox=126.0,158.34,484.56,168.3 :0), and the fact that this is a root edge sets its p-mask to 1111111 (since a successful parse
line=917 fonts=F0-10.0 iscore=0.05 bbox=126.0,146.34,240.11,156.3 :must cover the entire string).

doc_id=42 page=21 block_id=21-9 bbox=140.16,48.06,322.01,128.19 label=bbl 918 920
line=918 fonts=F0-9.0,F8-9.0 bbox=140.16,119.1,322.01,128.19             :   8    PRED sin0      8    0000000   0000000
line=919 fonts=F0-9.0,F6-9.0 iscore=0.50 bbox=162.12,108.18,296.44,117.15:        [c2 < c1,c3 < c1]             []
line=920 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02        :                                         21

doc_id=42 page=21 block_id=21-10 bbox=334.73,119.1,471.71,128.32 label=bbr 921 921
line=921 fonts=F0-6.0,F0-9.0 bbox=334.73,119.1,471.71,128.32:                                                     1111111    s       [verb^{1},nom^{2},acc^{3}]

doc_id=42 page=22 block_id=22-1 bbox=126.0,618.78,484.6,701.94 label=ttt 922 928
line=922 fonts=F0-10.0,F4-10.0 bbox=126.0,691.98,484.13,701.94                          :Since the category verb cannot be predicted (no grammar rules provide verb), this addition
line=923 fonts=F0-10.0,F4-10.0 iscore=0.14 bbox=126.0,679.98,484.03,689.94              :triggers completion, and the parser begins to look for passive edges providing verb. Here,
line=924 fonts=F0-10.0 iscore=0.10 bbox=126.0,668.1,484.6,678.06                        :edge 4 is the first edge in the chart for which this is the case, so edge 9 is generated by
line=925 fonts=F0-10.0 iscore=0.19 bbox=126.0,656.1,484.31,666.06                       :completing 8 with 4. The differences between edges 8 and 9 illustrate the process of com-
line=926 fonts=F0-10.0,F0-7.0,F4-10.0,F6-10.0 iscore=0.18 bbox=126.0,644.1,484.37,654.79:pletion: verb^{1} has been removed from the list of daughters and the constraint c2 < c1 has
line=927 fonts=F0-10.0,F6-10.0 iscore=0.24 bbox=126.0,632.22,483.96,642.18              :been updated to c2 < p8 (representing the fact that category 1 has been found at position
line=928 fonts=F0-10.0,F0-7.0,F1-10.0 iscore=0.06 bbox=126.0,618.78,194.45,630.18       :0001000_{2} = 8_{10}).

doc_id=42 page=22 block_id=22-2 bbox=140.16,583.98,450.11,604.24 label=ttb 929 930
line=929 fonts=F0-6.0,F0-9.0,F8-9.0 bbox=140.16,595.02,450.11,604.24     :   9     COMP 8, 4      9    0001000   0001000    1111111    s      [nom^{2},acc^{3}]
line=930 fonts=F0-9.0,F6-9.0 iscore=0.22 bbox=162.12,583.98,296.25,593.19:         [c2 < p8,c3 < p8]             []

doc_id=42 page=22 block_id=22-3 bbox=126.0,522.42,483.96,568.26 label=tb 931 934
line=931 fonts=F0-10.0,F4-10.0 bbox=126.0,558.3,483.91,568.26                    :As before, prediction cannot do anything with nom, so the parser responds to edge 9 with
line=932 fonts=F0-10.0,F4-10.0,F6-10.0 iscore=0.19 bbox=126.0,546.3,483.84,556.26:completion. Here, a nom is found covering position 0000010. The constraint c2 < p8 is
line=933 fonts=F0-10.0,F6-10.0 iscore=0.22 bbox=126.0,534.42,483.96,544.38       :updated to the concrete form p2 < p8. Since position 2 does in fact precede position 8, this
line=934 fonts=F0-10.0 iscore=0.28 bbox=126.0,522.42,296.55,532.38               :constraint will not appear on the new edge.

doc_id=42 page=22 block_id=22-4 bbox=137.88,485.82,428.51,505.96 label=btt 935 936
line=935 fonts=F0-6.0,F0-9.0,F8-9.0 bbox=137.88,496.74,428.51,505.96     :   10    COMP 9, 2      10   0001010   0001010    1111111    s      [acc^{3}]
line=936 fonts=F0-9.0,F6-9.0 iscore=0.22 bbox=162.12,485.82,296.25,495.03:         [c3 < p8]                     []

doc_id=42 page=22 block_id=22-5 bbox=126.0,412.26,484.2,469.98 label=btb 937 941
line=937 fonts=F0-10.0,F4-10.0 bbox=126.0,460.02,484.2,469.98           :The active category is now acc; since rule (14e) provides that category, it is used for pre-
line=938 fonts=F0-10.0,F4-10.0 iscore=0.24 bbox=126.0,448.14,483.9,458.1:diction. From the order information on edge 10, the parser knows that the acc cannot occur
line=939 fonts=F0-10.0 iscore=0.38 bbox=126.0,436.14,483.98,446.1       :after position 8, nor can it overlap with edge 10’s n-mask of 0001010. These facts combine
line=940 fonts=F0-10.0 iscore=0.12 bbox=126.0,424.14,483.95,434.1       :to generate an n-mask of 1111010. Since the category being predicted does not participate
line=941 fonts=F0-10.0 iscore=0.36 bbox=126.0,412.26,371.69,422.22      :in any immediate precedence constraints, its p-mask is empty.

doc_id=42 page=22 block_id=22-6 bbox=137.88,375.66,445.19,395.8 label=bbtt 942 943
line=942 fonts=F0-6.0,F0-9.0,F8-9.0 bbox=137.88,386.58,445.19,395.8:   11    PRED acc in 10  11   0000000    1111010    0000000    acc    [adj^{1},acc^{2}]
line=943 fonts=F0-9.0 iscore=0.20 bbox=162.12,375.66,296.22,384.63 :         []                              []

doc_id=42 page=22 block_id=22-7 bbox=126.0,325.98,484.35,359.82 label=bbtbt 944 946
line=944 fonts=F0-10.0 bbox=126.0,349.86,484.22,359.82            :The parser can now  complete edge 11  with the adjective in position 1. Note that by order-
line=945 fonts=F0-10.0 iscore=0.18 bbox=126.0,337.98,484.35,347.94:ing the adjective first, the parser will not predict another application of the recursive rule
line=946 fonts=F0-10.0 iscore=0.27 bbox=126.0,325.98,375.41,335.94:without first finding an actual adjective to justify the recursion.

doc_id=42 page=22 block_id=22-8 bbox=137.88,289.38,428.51,309.52 label=bbtbbt 947 948
line=947 fonts=F0-6.0,F0-9.0,F8-9.0 bbox=137.88,300.3,428.51,309.52:   12    COMP 11, 1     12   0000001    1111011    0000000   acc    [acc^{2}]
line=948 fonts=F0-9.0 iscore=0.22 bbox=162.12,289.38,296.22,298.35 :         []                             []

doc_id=42 page=22 block_id=22-9 bbox=126.0,251.7,484.27,273.54 label=bbtbbbt 949 950
line=949 fonts=F0-10.0,F4-10.0 bbox=126.0,263.58,484.27,273.54  :The active category in this edge is again acc; this time, prediction from rule (14e) fails, as
line=950 fonts=F0-10.0 iscore=0.24 bbox=126.0,251.7,296.5,261.66:edge 12’s n-mask only has one open space.

doc_id=42 page=22 block_id=22-10 bbox=138.24,225.78,367.4,235.47 label=bbtbbbbt 951 951
line=951 fonts=F0-9.0,F8-9.0 bbox=138.24,225.78,367.4,235.47:   13    PRED acc in 12 fails – no room for 2 elements in 1111011

doc_id=42 page=22 block_id=22-11 bbox=126.0,188.1,484.28,210.06 label=bbtbbbbb 952 953
line=952 fonts=F0-10.0 bbox=126.0,200.1,484.28,210.06            :Now  the accusative noun in position 3 is used for completion. Since the resulting edge is
line=953 fonts=F0-10.0 iscore=0.06 bbox=126.0,188.1,324.63,198.06:passive, its n-mask is reset to the edge’s coverage.

doc_id=42 page=22 block_id=22-12 bbox=137.88,151.5,414.07,171.63 label=bbbt 954 955
line=954 fonts=F0-9.0,F8-9.0 bbox=137.88,162.54,414.07,171.63    :   14    COMP 12, 3     13   0000101   0000101    0000000    acc    []
line=955 fonts=F0-9.0 iscore=0.22 bbox=162.12,151.5,296.22,160.47:         []                            []

doc_id=42 page=22 block_id=22-13 bbox=126.0,48.06,484.58,135.78 label=bbbb 956 960
line=956 fonts=F0-10.0 bbox=126.0,125.82,484.5,135.78             :At this point, the parser can now try to complete edge 10 with the two-word accusative
line=957 fonts=F0-10.0 iscore=0.06 bbox=126.0,113.82,484.46,123.78:noun phrase. This fails because the resulting passive edge does not respect its p-mask. In
line=958 fonts=F0-10.0 iscore=0.12 bbox=126.0,101.94,484.58,111.9 :effect, it claims to have satisfied the root symbol of the grammar, but fails to cover the
line=959 fonts=F0-10.0 iscore=0.06 bbox=126.0,89.94,176.27,99.9   :entire string.
line=960 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02 :                                          22

doc_id=42 page=23 block_id=23-1 bbox=138.24,692.1,339.1,701.31 label=ttt 961 961
line=961 fonts=F0-9.0,F5-9.0,F8-9.0 bbox=138.24,692.1,339.1,701.31:   15    COMP 10, 13 fails – p-mask 1111111 ↛ 0001111.

doc_id=42 page=23 block_id=23-2 bbox=126.0,604.26,484.61,674.1 label=ttbt 962 967
line=962 fonts=F0-10.0 bbox=126.0,664.14,484.02,674.1                     :The parser’s options for completing with edge 13 are now exhausted, and since edge 13
line=963 fonts=F0-10.0 iscore=0.19 bbox=126.0,652.14,484.61,662.1         :is passive, it cannot trigger prediction. As a result, the parser backtracks to the last point
line=964 fonts=F0-10.0 iscore=0.25 bbox=126.0,640.14,484.5,650.1          :where it had unfinished business; in this case, now that it has finished predicting from edge
line=965 fonts=F0-10.0,F4-10.0 iscore=0.11 bbox=126.0,628.26,484.44,638.22:10, it can attempt to complete with edge 10. This edge has acc as its active category, which
line=966 fonts=F0-10.0 iscore=0.22 bbox=126.0,616.26,484.06,626.22        :edge 3 provides. The parser therefore attempts to complete edge 10 and edge 3; this attempt
line=967 fonts=F0-10.0 iscore=0.19 bbox=126.0,604.26,256.46,614.22        :also fails to pass the p-mask test.

doc_id=42 page=23 block_id=23-3 bbox=138.24,577.5,334.5,586.71 label=ttbbt 968 968
line=968 fonts=F0-9.0,F5-9.0,F8-9.0 bbox=138.24,577.5,334.5,586.71:   16    COMP 10, 3 fails – p-mask 1111111 ↛ 0001110.

doc_id=42 page=23 block_id=23-4 bbox=126.0,525.66,484.23,559.5 label=ttbbbtt 969 971
line=969 fonts=F0-10.0 bbox=126.0,549.54,483.96,559.5             :The parser now reverts to the task of finding the verb in edge 8, choosing to complete with
line=970 fonts=F0-10.0 iscore=0.06 bbox=126.0,537.54,484.23,547.5 :the word in final position. From now on, only steps introducing new aspects of the parser
line=971 fonts=F0-10.0 iscore=0.06 bbox=126.0,525.66,197.05,535.62:will be annotated.

doc_id=42 page=23 block_id=23-5 bbox=137.88,399.66,322.05,509.43 label=ttbbbtbl 972 981
line=972 fonts=F0-9.0,F8-9.0 bbox=137.88,500.34,322.05,509.43            :   17    COMP 8, 7     14    1000000   1000000
line=973 fonts=F0-9.0,F6-9.0 iscore=0.33 bbox=162.12,489.42,296.25,498.63:         [c2 < p64,c3 < p64]           []
line=974 fonts=F0-9.0,F8-9.0 iscore=0.29 bbox=137.88,477.9,322.05,486.99 :   18    COMP 14, 2    15    1000010   1000010
line=975 fonts=F0-9.0,F6-9.0 iscore=0.33 bbox=162.12,466.98,296.25,476.19:         [c3 < p64]                    []
line=976 fonts=F0-9.0,F8-9.0 iscore=0.25 bbox=137.88,455.46,322.05,464.55:   19    PRED acc in 15 16   0000000   1000010
line=977 fonts=F0-9.0 iscore=0.29 bbox=162.12,444.54,296.22,453.51       :         []                            []
line=978 fonts=F0-9.0,F8-9.0 iscore=0.29 bbox=137.88,433.02,322.05,442.11:   20    COMP 16, 1    17    0000001   1000011
line=979 fonts=F0-9.0 iscore=0.33 bbox=162.12,422.1,296.22,431.07        :         []                            []
line=980 fonts=F0-9.0,F8-9.0 iscore=0.25 bbox=137.88,410.7,322.05,419.79 :   21    PRED acc in 17 18   0000000   1000011
line=981 fonts=F0-9.0 iscore=0.29 bbox=162.12,399.66,296.22,408.63       :         []                            []

doc_id=42 page=23 block_id=23-6 bbox=334.77,500.34,450.11,509.56 label=ttbbbtbrtt 982 982
line=982 fonts=F0-6.0,F0-9.0 bbox=334.77,500.34,450.11,509.56:                                                    1111111   s       [nom^{2},acc^{3}]

doc_id=42 page=23 block_id=23-7 bbox=334.77,477.9,428.51,487.12 label=ttbbbtbrtbt 983 983
line=983 fonts=F0-6.0,F0-9.0 bbox=334.77,477.9,428.51,487.12:                                                    1111111    s       [acc^{3}]

doc_id=42 page=23 block_id=23-8 bbox=334.77,455.46,445.19,464.68 label=ttbbbtbrtbbt 984 984
line=984 fonts=F0-6.0,F0-9.0 bbox=334.77,455.46,445.19,464.68:                                                       0000000    acc     [adj^{1},acc^{2}]

doc_id=42 page=23 block_id=23-9 bbox=334.77,433.02,428.51,442.36 label=ttbbbtbrtbbb 985 985
line=985 fonts=F0-6.0,F0-9.0 bbox=334.77,433.02,428.51,442.36:                                                    0000000    acc    [acc^{2}]

doc_id=42 page=23 block_id=23-10 bbox=334.77,410.7,445.19,419.92 label=ttbbbtbrb 986 986
line=986 fonts=F0-6.0,F0-9.0 bbox=334.77,410.7,445.19,419.92:                                                       0000000    acc     [adj^{1},acc^{2}]

doc_id=42 page=23 block_id=23-11 bbox=126.0,360.42,484.16,382.26 label=ttbbbb 987 988
line=987 fonts=F0-10.0 bbox=126.0,372.3,484.16,382.26             :At this point, the completion of edge 17 and edge 3 succeeds, but the result is already in
line=988 fonts=F0-10.0 iscore=0.28 bbox=126.0,360.42,453.56,370.38:the chart. The parser acknowledges this, and no new steps are triggered as a result.

doc_id=42 page=23 block_id=23-12 bbox=137.4,181.74,445.19,337.47 label=tb 989 1002
line=989 fonts=F0-9.0,F8-9.0 bbox=137.4,328.26,319.84,337.47                    :   22    COMP 17, 3 is already in the chart as edge 13
line=990 fonts=F0-9.0,F5-9.0,F8-9.0 iscore=0.33 bbox=137.4,316.86,338.26,326.07 :   23    COMP 15, 13 fails – p-mask 1111111 ↛ 1000111.
line=991 fonts=F0-9.0,F5-9.0,F8-9.0 iscore=0.50 bbox=137.4,305.58,333.66,314.79 :   24    COMP 15, 3 fails – p-mask 1111111 ↛ 1000110.
line=992 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.60 bbox=137.88,294.06,428.51,303.28:   25    COMP 14, 6         19 1100000     1100000 1111111   s      [acc^{3}]
line=993 fonts=F0-9.0,F6-9.0 iscore=0.33 bbox=162.12,283.14,296.25,292.35       :         [c3 < p64]                     []
line=994 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.18 bbox=137.88,271.62,445.19,280.84:   26    PRED acc in 19 20   0000000    1100000    0000000   acc     [adj^{1},acc^{2}]
line=995 fonts=F0-9.0 iscore=0.20 bbox=162.12,260.7,296.22,269.67               :         []                             []
line=996 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.20 bbox=137.88,249.18,428.51,258.4 :   27    COMP 20, 1     21   0000001    1100001    0000000   acc     [acc^{2}]
line=997 fonts=F0-9.0 iscore=0.22 bbox=162.12,238.26,296.22,247.23              :         []                             []
line=998 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.18 bbox=137.88,226.74,445.19,235.96:   28    PRED acc in 21 22   0000000    1100001    0000000   acc     [adj^{1},acc^{2}]
line=999 fonts=F0-9.0 iscore=0.20 bbox=162.12,215.82,296.22,224.79              :         []                             []
line=1000 fonts=F0-9.0,F8-9.0 iscore=0.17 bbox=137.4,204.42,319.84,213.63       :   29    COMP 21, 3 is already in the chart as edge 13
line=1001 fonts=F0-9.0,F5-9.0,F8-9.0 iscore=0.33 bbox=137.4,193.14,338.26,202.35:   30    COMP 19, 13 fails – p-mask 1111111 ↛ 1100101.
line=1002 fonts=F0-9.0,F5-9.0,F8-9.0 iscore=0.50 bbox=137.4,181.74,333.66,190.95:   31    COMP 19, 3 fails – p-mask 1111111 ↛ 1100100.

doc_id=42 page=23 block_id=23-13 bbox=126.0,48.06,484.23,140.58 label=b 1003 1006
line=1003 fonts=F0-10.0 bbox=126.0,130.62,484.23,140.58                   :Here, the parser has finally returned to the point where it originally chose a rule from the
line=1004 fonts=F0-10.0 iscore=0.29 bbox=126.0,118.74,484.22,128.7        :grammar  with which  to predict the start symbol, and now turns to the second rule that
line=1005 fonts=F0-10.0,F4-10.0 iscore=0.12 bbox=126.0,106.74,172.27,116.7:generates s.
line=1006 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02        :                                         23

doc_id=42 page=24 block_id=24-1 bbox=137.4,425.94,471.71,693.4 label=t 1007 1030
line=1007 fonts=F0-6.0,F0-9.0,F8-9.0 bbox=137.88,684.18,453.95,693.4             :   32    PRED sin0      23   0000000    0000000   1111111    s      [verb^{1},nom^{2}]
line=1008 fonts=F0-9.0,F6-9.0 iscore=0.25 bbox=162.12,673.26,296.35,682.23       :         [c2 < c1]                      []
line=1009 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.20 bbox=137.88,661.74,432.47,670.96:   33    COMP 23, 4     24   0001000    0001000   1111111    s      [nom^{2}]
line=1010 fonts=F0-9.0,F6-9.0 iscore=0.22 bbox=162.12,650.82,296.25,660.03       :         [c2 < p8]                      []
line=1011 fonts=F0-9.0,F5-9.0,F8-9.0 iscore=0.10 bbox=137.4,639.42,333.66,648.63 :   34    COMP 24, 2 fails – p-mask 1111111 ↛ 0001010.
line=1012 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.50 bbox=137.88,628.02,432.47,637.24:   35    COMP 23, 7     25   1000000    1000000   1111111    s      [nom^{2}]
line=1013 fonts=F0-9.0,F6-9.0 iscore=0.22 bbox=162.12,616.98,296.25,626.19       :         [c2 < p64]                     []
line=1014 fonts=F0-9.0,F5-9.0,F8-9.0 iscore=0.10 bbox=137.4,605.7,333.66,614.91  :   36    COMP 25, 2 fails – p-mask 1111111 ↛ 1000010.
line=1015 fonts=F0-9.0,F5-9.0,F8-9.0 iscore=1.00 bbox=137.4,594.3,333.66,603.51  :   37    COMP 25, 6 fails – p-mask 1111111 ↛ 1100000.
line=1016 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.40 bbox=137.88,582.78,450.35,592.12:   38    PRED sin0      26   0000000    0000000   1111111    s      [conj^{2},s^{1},s^{3}]
line=1017 fonts=F0-9.0,F5-9.0 iscore=0.25 bbox=162.12,571.86,345.51,580.83       :         [c1 ≪ c2,c2 ≪ c3]              [s:[1]:1,s:[3]:2]
line=1018 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.20 bbox=137.88,560.46,429.23,569.68:   39    COMP 26, 5     27   0010000    0010000   1111111    s      [s^{1},s^{3}]
line=1019 fonts=F0-9.0,F5-9.0 iscore=0.22 bbox=162.12,549.42,345.32,558.63       :         [c1 ≪ p16,p16 ≪ c3]            [s:[1]:1,s:[3]:2]
line=1020 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.22 bbox=137.88,538.02,471.71,547.24:   40    PRED sin27     28   0000000    1110000   0001000    s      [verb^{1},nom^{2},acc^{3}]
line=1021 fonts=F0-9.0,F6-9.0 iscore=0.25 bbox=162.12,526.98,296.44,535.95       :         [c2 < c1,c3 < c1]              []
line=1022 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.20 bbox=137.88,515.58,450.11,524.8 :   41    COMP 28, 4     29   0001000    1111000   0001000    s      [nom^{2},acc^{3}]
line=1023 fonts=F0-9.0,F6-9.0 iscore=0.22 bbox=162.12,504.54,296.25,513.75       :         [c2 < p8,c3 < p8]              []
line=1024 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.20 bbox=137.88,493.14,428.51,502.36:   42    COMP 29, 2     30   0001010    1111010   0001000    s      [acc^{3}]
line=1025 fonts=F0-9.0,F6-9.0 iscore=0.22 bbox=162.12,482.22,296.25,491.43       :         [c3 < p8]                      []
line=1026 fonts=F0-9.0,F8-9.0 iscore=0.08 bbox=137.4,470.82,333.0,480.03         :   43    PRED acc in 30 is already in the chart as edge 11
line=1027 fonts=F0-9.0,F8-9.0 iscore=0.38 bbox=137.88,459.3,414.01,468.39        :   44    COMP 30, 13    31   0001111    0001111   0000000    s      []
line=1028 fonts=F0-9.0 iscore=0.22 bbox=162.12,448.38,296.22,457.35              :         []                             []
line=1029 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.20 bbox=137.88,436.86,419.99,446.08:   45    COMP 27, 31    32   0011111    0011111   1111111    s      [s^{3}]
line=1030 fonts=F0-9.0,F5-9.0 iscore=0.33 bbox=162.12,425.94,319.66,435.15       :         [p16 ≪ c3]                     [s:[3]:2]

doc_id=42 page=24 block_id=24-2 bbox=126.0,355.62,484.3,377.58 label=bt 1031 1032
line=1031 fonts=F0-10.0 bbox=126.0,367.62,484.3,377.58             :By line 46, one of the conjuncts has been found. Since only two positions are left uncov-
line=1032 fonts=F0-10.0 iscore=0.12 bbox=126.0,355.62,340.34,365.58:ered, the remaining conjunct must fit in two positions.

doc_id=42 page=24 block_id=24-3 bbox=137.4,48.06,453.95,332.55 label=bb 1033 1055
line=1033 fonts=F0-9.0,F8-9.0 bbox=137.4,322.86,357.98,332.55                    :   46    PRED s in 32 fails – no room for 3 elements in 0011111
line=1034 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.29 bbox=137.88,312.06,453.95,321.28:   47    PRED sin32     33   0000000    0011111   0100000    s      [verb^{1},nom^{2}]
line=1035 fonts=F0-9.0,F6-9.0 iscore=0.25 bbox=162.12,301.14,296.35,310.11       :         [c2 < c1]                      []
line=1036 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.30 bbox=137.88,289.62,432.47,298.84:   48    COMP 33, 7     34   1000000    1011111   0100000    s      [nom^{2}]
line=1037 fonts=F0-9.0,F6-9.0 iscore=0.33 bbox=162.12,278.7,296.25,287.91        :         [c2 < p64]                     []
line=1038 fonts=F0-9.0,F8-9.0 iscore=0.30 bbox=137.88,267.18,414.01,276.27       :   49    COMP 34, 6     35   1100000    1100000   0000000    s      []
line=1039 fonts=F0-9.0 iscore=0.22 bbox=162.12,256.26,296.22,265.23              :         []                             []
line=1040 fonts=F0-9.0,F8-9.0 iscore=0.20 bbox=137.88,244.74,414.01,253.83       :   50    COMP 32, 35    36   1111111    1111111   0000000    s      []
line=1041 fonts=F0-9.0 iscore=0.22 bbox=162.12,233.82,296.22,242.79              :         []                             []
line=1042 fonts=F0-9.0,F8-9.0 iscore=0.07 bbox=137.4,221.7,357.98,231.39         :   51    PRED s in 32 fails – no room for 3 elements in 0011111
line=1043 fonts=F0-9.0,F8-9.0 iscore=0.29 bbox=137.88,211.02,414.01,220.11       :   52    COMP 30, 3     37   0001110    0001110   0000000    s      []
line=1044 fonts=F0-9.0 iscore=0.22 bbox=162.12,199.98,296.22,208.95              :         []                             []
line=1045 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.20 bbox=137.88,188.58,419.99,197.8 :   53    COMP 27, 37    38   0011110    0011110   1111111    s      [s^{3}]
line=1046 fonts=F0-9.0,F5-9.0 iscore=0.22 bbox=162.12,177.54,319.66,186.75       :         [p16 ≪ c3]                     [s:[3]:2]
line=1047 fonts=F0-9.0,F8-9.0 iscore=0.14 bbox=137.4,165.54,357.98,175.23        :   54    PRED s in 38 fails – no room for 3 elements in 0011111
line=1048 fonts=F0-9.0,F8-9.0 iscore=0.57 bbox=137.4,154.86,324.42,164.07        :   55    PRED s in 38 is already in the chart as edge 33
line=1049 fonts=F0-9.0,F8-9.0 iscore=0.57 bbox=137.4,142.86,357.98,152.55        :   56    PRED s in 38 fails – no room for 3 elements in 0011111
line=1050 fonts=F0-9.0,F5-9.0,F8-9.0 iscore=0.43 bbox=137.4,132.18,338.26,141.39 :   57    COMP 38, 35 fails – p-mask 1111111 ↛ 1111110.
line=1051 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.40 bbox=137.88,120.66,453.95,129.88:   58    PRED sin27     39   0000000    1110000   0001000    s      [verb^{1},nom^{2}]
line=1052 fonts=F0-9.0,F6-9.0 iscore=0.25 bbox=162.12,109.74,296.35,118.71       :         [c2 < c1]                      []
line=1053 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.30 bbox=137.88,98.22,432.47,107.56 :   59    COMP 39, 4     40   0001000    1111000   0001000    s      [nom^{2}]
line=1054 fonts=F0-9.0,F6-9.0 iscore=0.33 bbox=162.12,87.3,296.25,96.51          :         [c2 < p8]                      []
line=1055 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02               :                                          24

doc_id=42 page=25 block_id=25-1 bbox=137.88,673.26,414.01,693.27 label=t 1056 1057
line=1056 fonts=F0-9.0,F8-9.0 bbox=137.88,684.18,414.01,693.27     :   60    COMP 40, 2     41   0001010    0001010   0000000    s      []
line=1057 fonts=F0-9.0 iscore=0.11 bbox=162.12,673.26,296.22,682.23:         []                            []

doc_id=42 page=25 block_id=25-2 bbox=126.0,602.94,484.32,624.9 label=btt 1058 1059
line=1058 fonts=F0-10.0 bbox=126.0,614.94,484.32,624.9           :Here, an attempt to treat the second and fourth words as a conjunct fails from a lack of
line=1059 fonts=F0-10.0 iscore=0.06 bbox=126.0,602.94,168.3,612.9:continuity.

doc_id=42 page=25 block_id=25-3 bbox=137.4,541.26,450.35,585.03 label=btbt 1060 1063
line=1060 fonts=F0-9.0,F8-9.0 bbox=137.4,575.82,326.28,585.03                   :   61    COMP 27, 41 fails – 0001010 is not contiguous
line=1061 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.40 bbox=137.88,564.3,450.35,573.52:   62    PRED sin27      42   0000000    1110000     0001000    s      [conj^{2},s^{1},s^{3}]
line=1062 fonts=F0-9.0,F5-9.0 iscore=0.25 bbox=162.12,553.38,345.51,562.35      :         [c1 ≪ c2,c2 ≪ c3]               [s:[1]:1,s:[3]:2]
line=1063 fonts=F0-9.0,F8-9.0 iscore=0.17 bbox=137.4,541.26,202.98,550.95       :   63    SUCCESS: 36

doc_id=42 page=25 block_id=25-4 bbox=126.0,478.86,484.36,524.58 label=btbbt 1064 1067
line=1064 fonts=F0-10.0 bbox=126.0,514.62,484.16,524.58                  :The overall search tree for this parse is given in (7). In this diagram, nodes are given in the
line=1065 fonts=F0-10.0,F4-10.0 iscore=0.11 bbox=126.0,502.74,484.3,512.7:format xi, where x indicates either (c)ompletion or (p)rediction and i is the edge created.
line=1066 fonts=F0-10.0 iscore=0.27 bbox=126.0,490.74,484.36,500.7       :The  boldface node indicates the edge corresponding to a successful parse; its label c36
line=1067 fonts=F0-10.0 iscore=0.14 bbox=126.0,478.86,446.13,488.82      :indicates that it corresponds to edge 36, which was created by a completion step.

doc_id=42 page=25 block_id=25-5 bbox=218.16,435.06,408.18,464.58 label=btbbbtt 1068 1069
line=1068 fonts=F0-10.0 bbox=305.16,454.62,321.21,464.58            :                                      root
line=1069 fonts=F0-10.0 iscore=0.00 bbox=218.16,435.06,408.18,445.02:                    p8                  p23              p26

doc_id=42 page=25 block_id=25-6 bbox=164.76,372.06,448.86,423.42 label=btbbbtbt 1070 1072
line=1070 fonts=F0-10.0 bbox=177.84,413.46,406.67,423.42            :           c9              c14      c24  c25           c27
line=1071 fonts=F0-10.0 iscore=0.11 bbox=174.12,393.78,448.86,403.74:          c10        c15        c19  c   c c   p28         p39  p42
line=1072 fonts=F0-10.0 iscore=0.20 bbox=164.76,372.06,423.95,382.02:        p11  c    p16  c  c p20  c  c          c29         c40

doc_id=42 page=25 block_id=25-7 bbox=158.16,311.22,279.22,360.42 label=btbbbtbbl 1073 1075
line=1073 fonts=F0-10.0 bbox=163.8,350.46,275.15,360.42             :        c12       c17       c21
line=1074 fonts=F0-10.0 iscore=0.00 bbox=158.16,330.9,279.22,340.86 :       p c13    p18  c    p22  c
line=1075 fonts=F0-10.0 iscore=0.00 bbox=176.64,311.22,181.06,321.18:           c

doc_id=42 page=25 block_id=25-8 bbox=315.12,311.22,422.75,360.42 label=btbbbtbbrt 1076 1078
line=1076 fonts=F0-10.0 bbox=348.0,350.46,422.75,360.42             :                                              c30          c41
line=1077 fonts=F0-10.0 iscore=0.00 bbox=315.12,330.9,417.82,340.86 :                                        p c31         c37   c
line=1078 fonts=F0-10.0 iscore=0.33 bbox=327.48,311.22,396.11,321.18:                                          c32        c38

doc_id=42 page=25 block_id=25-9 bbox=313.92,252.42,411.1,301.62 label=btbbbtbbrb 1079 1081
line=1079 fonts=F0-10.0 bbox=313.92,291.66,411.1,301.62             :                                       p  c33 p   p p  p  c
line=1080 fonts=F0-10.0 iscore=0.00 bbox=326.16,272.1,340.55,282.06 :                                         c34
line=1081 fonts=F0-10.0 iscore=1.00 bbox=324.96,252.42,339.35,262.38:                                         c35

doc_id=42 page=25 block_id=25-10 bbox=248.28,207.42,363.39,238.98 label=btbbbb 1082 1083
line=1082 fonts=F3-10.0 bbox=324.84,229.02,339.23,238.98            :                                                c36
line=1083 fonts=F0-10.0 iscore=0.00 bbox=248.28,207.42,363.39,217.38:                             Figure 7: Parser’s search tree

doc_id=42 page=25 block_id=25-11 bbox=126.0,129.9,423.77,164.58 label=bbt 1084 1085
line=1084 fonts=F3-10.0 bbox=126.0,154.62,292.82,164.58                   :5.2 Domains  and Dormant  Constraints
line=1085 fonts=F0-10.0,F3-10.0 iscore=0.15 bbox=126.0,129.9,423.77,139.86:This sample parse uses the grammar in (16) and the input sentence fegefhi.

doc_id=42 page=25 block_id=25-12 bbox=126.0,48.06,310.92,115.02 label=bbb 1086 1088
line=1086 fonts=F0-10.0,F5-10.0,F6-10.0 bbox=126.0,105.06,260.36,115.02                  :(16)   a) root(a, [g ≪ c, d < x]).
line=1087 fonts=F0-10.0,F0-7.0,F5-10.0,F6-10.0 iscore=0.40 bbox=156.24,92.1,253.81,102.67:       b) a → b^{1}, c^{2}, g^{3} ; 1 < 2
line=1088 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02                       :                                        25

doc_id=42 page=26 block_id=26-1 bbox=156.24,666.06,367.28,702.55 label=ttt 1089 1091
line=1089 fonts=F0-10.0,F0-7.0,F5-10.0 bbox=156.72,691.98,197.05,702.55                    :       c) b →  d^{1}
line=1090 fonts=F0-10.0,F0-7.0,F5-10.0,F6-10.0 iscore=0.25 bbox=156.24,679.02,367.28,689.59:       d) c →  h^{1}, d^{2}, i^{3} ;;〈[2], [e < f], d〉, 〈[1,3], [h < i], x〉
line=1091 fonts=F0-10.0,F0-7.0,F5-10.0 iscore=0.31 bbox=156.72,666.06,208.81,676.63        :       e) d →  e^{1}, f^{2}

doc_id=42 page=26 block_id=26-2 bbox=126.0,599.34,484.32,651.18 label=ttb 1092 1095
line=1092 fonts=F0-10.0 bbox=126.0,641.22,484.32,651.18            :This grammar  has been  written to exercise the domain-level constraint handling abilities
line=1093 fonts=F0-10.0 iscore=0.19 bbox=126.0,629.22,484.21,639.18:of the parser; it is a more complicated version of (12). Most importantly, the partial com-
line=1094 fonts=F0-10.0 iscore=0.06 bbox=126.0,617.22,318.64,627.18:paction in (16d) will require a constraint merger.
line=1095 fonts=F0-10.0 iscore=0.18 bbox=126.0,599.34,336.59,609.3 :As before, the parse starts with a set of lexical edges.

doc_id=42 page=26 block_id=26-3 bbox=140.16,311.46,278.03,576.15 label=tbl 1096 1119
line=1096 fonts=F0-9.0 bbox=140.16,567.06,273.03,576.15                   :    #    Description     E     Cover
line=1097 fonts=F0-9.0 iscore=0.33 bbox=162.12,555.42,182.05,564.39       :         RLPs
line=1098 fonts=F0-9.0 iscore=1.00 bbox=162.12,544.38,184.04,553.35       :         MLPs
line=1099 fonts=F0-9.0,F8-9.0 iscore=0.20 bbox=140.16,533.7,278.03,542.79 :    1    SCAN (f)        1    0000001
line=1100 fonts=F0-9.0 iscore=0.25 bbox=162.12,522.78,168.09,531.75       :         []
line=1101 fonts=F0-9.0 iscore=1.00 bbox=162.12,511.74,168.09,520.71       :         []
line=1102 fonts=F0-9.0,F8-9.0 iscore=0.20 bbox=140.16,500.34,278.03,509.43:    2    SCAN (e)        2    0000010
line=1103 fonts=F0-9.0 iscore=0.25 bbox=162.12,489.3,168.09,498.27        :         []
line=1104 fonts=F0-9.0 iscore=1.00 bbox=162.12,478.38,168.09,487.35       :         []
line=1105 fonts=F0-9.0,F8-9.0 iscore=0.20 bbox=140.16,466.86,278.03,475.95:    3    SCAN (g)        3    0000100
line=1106 fonts=F0-9.0 iscore=0.25 bbox=162.12,455.94,168.09,464.91       :         []
line=1107 fonts=F0-9.0 iscore=1.00 bbox=162.12,445.02,168.09,453.99       :         []
line=1108 fonts=F0-9.0,F8-9.0 iscore=0.20 bbox=140.16,433.5,278.03,442.59 :    4    SCAN (e)        4    0001000
line=1109 fonts=F0-9.0 iscore=0.25 bbox=162.12,422.58,168.09,431.55       :         []
line=1110 fonts=F0-9.0 iscore=1.00 bbox=162.12,411.54,168.09,420.51       :         []
line=1111 fonts=F0-9.0,F8-9.0 iscore=0.20 bbox=140.16,400.14,278.03,409.23:    5    SCAN (f)        5    0010000
line=1112 fonts=F0-9.0 iscore=0.25 bbox=162.12,389.22,168.09,398.19       :         []
line=1113 fonts=F0-9.0 iscore=1.00 bbox=162.12,378.18,168.09,387.15       :         []
line=1114 fonts=F0-9.0,F8-9.0 iscore=0.20 bbox=140.16,366.78,278.03,375.87:    6    SCAN (h)        6    0100000
line=1115 fonts=F0-9.0 iscore=0.25 bbox=162.12,355.74,168.09,364.71       :         []
line=1116 fonts=F0-9.0 iscore=1.00 bbox=162.12,344.82,168.09,353.79       :         []
line=1117 fonts=F0-9.0,F8-9.0 iscore=0.20 bbox=140.16,333.3,278.03,342.39 :    7    SCAN (i)        7    1000000
line=1118 fonts=F0-9.0 iscore=0.25 bbox=162.12,322.38,168.09,331.35       :         []
line=1119 fonts=F0-9.0 iscore=1.00 bbox=162.12,311.46,168.09,320.43       :         []

doc_id=42 page=26 block_id=26-4 bbox=290.17,311.46,424.57,576.03 label=tbr 1120 1143
line=1120 fonts=F0-9.0 bbox=291.39,567.06,424.57,576.03            :                                        N-Mask     P-Mask    LHS    RHS
line=1121 fonts=F0-9.0 iscore=0.25 bbox=290.17,555.42,310.6,564.39 :                                        DLPs
line=1122 fonts=F0-9.0 iscore=1.00 bbox=290.24,544.38,304.69,553.35:                                        Isos
line=1123 fonts=F0-9.0 iscore=0.25 bbox=290.63,533.7,413.95,542.67 :                                        0000001   0000000    f      []
line=1124 fonts=F0-9.0 iscore=0.25 bbox=290.25,522.78,296.22,531.75:                                        []
line=1125 fonts=F0-9.0 iscore=1.00 bbox=290.25,511.74,296.22,520.71:                                        []
line=1126 fonts=F0-9.0 iscore=0.25 bbox=290.63,500.34,413.98,509.31:                                        0000010   0000000    e      []
line=1127 fonts=F0-9.0 iscore=0.25 bbox=290.25,489.3,296.22,498.27 :                                        []
line=1128 fonts=F0-9.0 iscore=1.00 bbox=290.25,478.38,296.22,487.35:                                        []
line=1129 fonts=F0-9.0 iscore=0.25 bbox=290.63,466.86,414.01,475.83:                                        0000100   0000000    g      []
line=1130 fonts=F0-9.0 iscore=0.25 bbox=290.25,455.94,296.22,464.91:                                        []
line=1131 fonts=F0-9.0 iscore=1.00 bbox=290.25,445.02,296.22,453.99:                                        []
line=1132 fonts=F0-9.0 iscore=0.25 bbox=290.63,433.5,413.98,442.47 :                                        0001000   0000000    e      []
line=1133 fonts=F0-9.0 iscore=0.25 bbox=290.25,422.58,296.22,431.55:                                        []
line=1134 fonts=F0-9.0 iscore=1.00 bbox=290.25,411.54,296.22,420.51:                                        []
line=1135 fonts=F0-9.0 iscore=0.25 bbox=290.63,400.14,413.95,409.11:                                        0010000   0000000    f      []
line=1136 fonts=F0-9.0 iscore=0.25 bbox=290.25,389.22,296.22,398.19:                                        []
line=1137 fonts=F0-9.0 iscore=1.00 bbox=290.25,378.18,296.22,387.15:                                        []
line=1138 fonts=F0-9.0 iscore=0.25 bbox=290.63,366.78,414.01,375.75:                                        0100000   0000000    h      []
line=1139 fonts=F0-9.0 iscore=0.25 bbox=290.25,355.74,296.22,364.71:                                        []
line=1140 fonts=F0-9.0 iscore=1.00 bbox=290.25,344.82,296.22,353.79:                                        []
line=1141 fonts=F0-9.0 iscore=0.25 bbox=290.63,333.3,413.93,342.27 :                                        1000000   0000000    i      []
line=1142 fonts=F0-9.0 iscore=0.25 bbox=290.25,322.38,296.22,331.35:                                        []
line=1143 fonts=F0-9.0 iscore=1.00 bbox=290.25,311.46,296.22,320.43:                                        []

doc_id=42 page=26 block_id=26-5 bbox=126.0,205.26,484.47,263.1 label=bt 1144 1148
line=1144 fonts=F0-10.0 bbox=126.0,253.14,484.41,263.1                     :The parser begins by predicting the start symbol. Note that in addition to the information
line=1145 fonts=F0-10.0 iscore=0.13 bbox=126.0,241.14,484.47,251.1         :presented in the last example, there are (active) domain constraints (DLPs) and dormant
line=1146 fonts=F0-10.0 iscore=0.12 bbox=126.0,229.26,484.44,239.22        :constraints (MLPs) on each edge. Since the root is always part of domain 0, the constraints
line=1147 fonts=F0-10.0 iscore=0.24 bbox=126.0,217.26,483.97,227.22        :for domain 0 are active and those for domains 1 and 2 are dormant. All order constraints
line=1148 fonts=F0-10.0,F4-10.0 iscore=0.24 bbox=126.0,205.26,390.82,215.22:initially start with frontier labels z (indicating zero instances seen).

doc_id=42 page=26 block_id=26-6 bbox=140.16,156.06,278.03,187.11 label=bbtl 1149 1151
line=1149 fonts=F0-9.0,F8-9.0 bbox=140.16,178.02,278.03,187.11                   :   8     PRED ain0      8    0000000
line=1150 fonts=F0-9.0,F6-9.0 iscore=0.25 bbox=162.12,167.1,195.22,176.07        :         [c1 < c2]
line=1151 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.17 bbox=162.12,156.06,270.92,165.03:         [1→[e:z < f:z], 2→[h:z < i:z]]

doc_id=42 page=26 block_id=26-7 bbox=290.24,156.06,445.43,187.24 label=bbtr 1152 1154
line=1152 fonts=F0-6.0,F0-9.0 bbox=290.63,178.02,445.43,187.24                   :                                          0000000    1111111    a      [b^{1}, c^{2}, g^{3}]
line=1153 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.17 bbox=290.28,167.34,386.11,176.31:                                          [0→[g:z ≪ c:z, d:z < x:z]]
line=1154 fonts=F0-9.0 iscore=0.17 bbox=290.24,156.06,296.21,165.03              :                                          []

doc_id=42 page=26 block_id=26-8 bbox=126.0,48.06,484.06,138.66 label=bbb 1155 1157
line=1155 fonts=F0-10.0 bbox=126.0,128.7,484.06,138.66             :Predicting from edge 8 does not open a new domain, so the active and dormant domain
line=1156 fonts=F0-10.0 iscore=0.25 bbox=126.0,116.82,341.38,126.78:constraints are simply inherited from the mother edge.
line=1157 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02 :                                       26

doc_id=42 page=27 block_id=27-1 bbox=137.88,638.46,278.07,702.87 label=ttl 1158 1163
line=1158 fonts=F0-9.0,F8-9.0 bbox=140.16,693.78,278.03,702.87                   :   9     PRED bin8       9   0000000
line=1159 fonts=F0-9.0 iscore=0.25 bbox=162.12,682.74,168.09,691.71              :         []
line=1160 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.17 bbox=162.12,671.82,270.92,680.79:         [1→[e:z < f:z], 2→[h:z < i:z]]
line=1161 fonts=F0-9.0,F8-9.0 iscore=0.17 bbox=137.88,660.42,278.07,669.51       :   10    PRED din9      10   0000000
line=1162 fonts=F0-9.0 iscore=0.25 bbox=162.12,649.38,168.09,658.35              :         []
line=1163 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.17 bbox=162.12,638.46,270.92,647.43:         [1→[e:z < f:z], 2→[h:z < i:z]]

doc_id=42 page=27 block_id=27-2 bbox=290.24,638.46,431.51,703.0 label=ttr 1164 1169
line=1164 fonts=F0-6.0,F0-9.0 bbox=290.63,693.78,421.07,703.0                    :                                         0000000    0000000    b      [d^{1}]
line=1165 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.17 bbox=290.28,682.98,386.11,691.95:                                         [0→[g:z ≪ c:z, d:z < x:z]]
line=1166 fonts=F0-9.0 iscore=0.17 bbox=290.24,671.82,296.21,680.79              :                                         []
line=1167 fonts=F0-6.0,F0-9.0 iscore=0.20 bbox=290.67,660.42,431.51,669.64       :                                         0000000    0000000    d      [e^{1}, f^{2}]
line=1168 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.17 bbox=290.28,649.62,386.11,658.59:                                         [0→[g:z ≪ c:z, d:z < x:z]]
line=1169 fonts=F0-9.0 iscore=0.17 bbox=290.24,638.46,296.21,647.43              :                                         []

doc_id=42 page=27 block_id=27-3 bbox=126.0,585.78,485.98,621.06 label=tbtt 1170 1172
line=1170 fonts=F0-10.0 bbox=126.0,611.1,484.17,621.06                                    :Completing  a category, the order constraints are updated to note the location of the cat-
line=1171 fonts=F0-10.0,F0-7.0,F1-10.0,F3-10.0 iscore=0.17 bbox=126.0,597.66,485.98,609.06:egory found; at this point, the right-most e found within the domain is at position 2 _{10} =
line=1172 fonts=F0-10.0,F0-7.0 iscore=0.06 bbox=126.0,585.78,167.37,597.18                :0000010_{2}.

doc_id=42 page=27 block_id=27-4 bbox=137.88,538.62,278.07,569.67 label=tbtbl 1173 1175
line=1173 fonts=F0-9.0,F8-9.0 bbox=137.88,560.58,278.07,569.67                   :   11    COMP 10, 2     11    0000010
line=1174 fonts=F0-9.0 iscore=0.20 bbox=162.12,549.66,168.09,558.63              :         []
line=1175 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.17 bbox=162.12,538.62,271.54,547.59:         [1→[e:2 < f:z], 2→[h:z < i:z]]

doc_id=42 page=27 block_id=27-5 bbox=290.26,538.62,419.51,569.8 label=tbtbr 1176 1178
line=1176 fonts=F0-6.0,F0-9.0 bbox=290.67,560.58,419.51,569.8                   :                                         0000010    0000000    d      [f^{2}]
line=1177 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.17 bbox=290.28,549.9,386.11,558.87:                                         [0→[g:z ≪ c:z, d:z < x:z]]
line=1178 fonts=F0-9.0 iscore=0.17 bbox=290.26,538.62,296.24,547.59             :                                         []

doc_id=42 page=27 block_id=27-6 bbox=126.0,475.38,484.71,521.22 label=tbb 1179 1182
line=1179 fonts=F0-10.0,F3-10.0 bbox=126.0,511.26,484.71,521.22           :At this point, the parser completes edge 11 with the f in first position. This violates the
line=1180 fonts=F0-10.0,F4-10.0 iscore=0.12 bbox=126.0,499.26,484.1,509.22:dormant constraint in domain 1, which is now updated to read void; any future attempts
line=1181 fonts=F0-10.0 iscore=0.24 bbox=126.0,487.38,484.46,497.34       :to complete this edge into domain 1 will fail. As the parser completes further edges in the
line=1182 fonts=F0-10.0 iscore=0.12 bbox=126.0,475.38,391.23,485.34       :same domain  from edge 11, each will be ‘tainted’ in the same way.

doc_id=42 page=27 block_id=27-7 bbox=126.0,332.1,432.95,457.23 label=bt 1183 1192
line=1183 fonts=F0-9.0,F8-9.0 bbox=137.88,448.14,414.05,457.23                   :   12    COMP 11, 1     12   0000011    0000011   0000000    d      []
line=1184 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.33 bbox=162.12,437.1,386.11,446.31 :         []                             [0→[g:z ≪ c:z, d:z < x:z]]
line=1185 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.29 bbox=162.12,426.18,296.32,435.15:         [1→[void], 2→[h:z < i:z]]      []
line=1186 fonts=F0-9.0,F8-9.0 iscore=0.20 bbox=137.88,414.66,414.05,423.75       :   13    COMP 9, 12     13   0000011    0000011   0000000    b      []
line=1187 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.33 bbox=162.12,403.74,386.74,412.95:         []                             [0→[g:z ≪ c:z, d:3 < x:z]]
line=1188 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.29 bbox=162.12,392.82,296.32,401.79:         [1→[void], 2→[h:z < i:z]]      []
line=1189 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.18 bbox=137.88,381.3,432.95,390.52 :   14    COMP 8, 13     14   0000011    0000011   1111111    a      [c^{2}, g^{3}]
line=1190 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.40 bbox=162.12,370.62,386.86,379.59:         [p3 < c2]                      [0→[g:z ≪ c:z, d:3 < x:z]]
line=1191 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.22 bbox=162.12,359.46,296.32,368.43:         [1→[void], 2→[h:z < i:z]]      []
line=1192 fonts=F0-10.0,F3-10.0 iscore=0.00 bbox=126.0,332.1,315.27,342.06       :The parser now begins to work on finding the c.

doc_id=42 page=27 block_id=27-8 bbox=137.88,282.9,278.07,313.83 label=bbttl 1193 1195
line=1193 fonts=F0-9.0,F8-9.0 bbox=137.88,304.74,278.07,313.83                  :   15    PRED cin14     15   0000000
line=1194 fonts=F0-9.0 iscore=0.25 bbox=162.12,293.82,168.09,302.79             :         []
line=1195 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.25 bbox=162.12,282.9,256.75,291.87:         [1→[void], 2→[h:z < i:z]]

doc_id=42 page=27 block_id=27-9 bbox=290.28,282.9,443.99,314.08 label=bbttr 1196 1198
line=1196 fonts=F0-6.0,F0-9.0 bbox=290.67,304.74,443.99,314.08                   :                                           0000011     0000000     c      [h^{1}, d^{2}, i^{3}]
line=1197 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.33 bbox=290.28,294.06,386.74,303.03:                                           [0→[g:z  ≪  c:z, d:3 < x:z]]
line=1198 fonts=F0-9.0 iscore=0.33 bbox=290.35,282.9,358.66,291.87               :                                           [d:[2]:1, x:[1, 3]:2]

doc_id=42 page=27 block_id=27-10 bbox=126.0,171.78,485.97,265.38 label=bbtb 1199 1206
line=1199 fonts=F0-10.0,F3-10.0 bbox=126.0,255.42,484.35,265.38                   :Finding an h at sixth position yields a state in which only some of the information about the
line=1200 fonts=F0-10.0 iscore=0.28 bbox=126.0,243.54,484.42,253.5                :members  of a domain  is known; this is referred to as an ‘in-progress isolation statement’.
line=1201 fonts=F0-10.0,F8-10.0 iscore=0.20 bbox=126.0,231.54,484.77,241.5        :Here, the statement indicates that the location of constituent 3, COMBINEd with the posi-
line=1202 fonts=F0-10.0 iscore=0.14 bbox=126.0,219.54,484.09,229.5                :tion vector 0100000, will form a contiguous unit. In-progress isolation statements need
line=1203 fonts=F0-10.0 iscore=0.31 bbox=126.0,207.66,484.3,217.62                :to store their own sets of active and dormant order constraints, since the active and dor-
line=1204 fonts=F0-10.0,F3-10.0 iscore=0.24 bbox=126.0,195.66,484.53,205.62       :mant constraints on the edge itself are for the LHS category’s domain. Thus h is listed as
line=1205 fonts=F0-10.0,F0-7.0,F1-10.0 iscore=0.06 bbox=126.0,182.34,485.97,193.74:as-yet unseen on the edge itself, but has the frontier value of 32 _{10} = 0100000_{2} inside the
line=1206 fonts=F0-10.0 iscore=0.11 bbox=126.0,171.78,250.38,181.74               :in-progress isolation statement.

doc_id=42 page=27 block_id=27-11 bbox=137.88,117.3,278.07,153.63 label=bbbl 1207 1209
line=1207 fonts=F0-9.0,F8-9.0 bbox=137.88,144.54,278.07,153.63                  :   16    COMP 15, 6     16   0100000
line=1208 fonts=F0-9.0 iscore=0.20 bbox=162.12,133.5,168.09,142.47              :         []
line=1209 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.25 bbox=162.12,117.3,256.75,126.27:         [1→[void], 2→[h:z < i:z]]

doc_id=42 page=27 block_id=27-12 bbox=290.28,48.06,446.93,153.76 label=bbbr 1210 1214
line=1210 fonts=F0-6.0,F0-9.0 bbox=290.67,144.54,431.51,153.76                   :                                          0100011    0000000    c       [d^{2}, i^{3}]
line=1211 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.33 bbox=290.28,133.74,386.74,142.71:                                          [0→[g:z ≪  c:z, d:3 < x:z]]
line=1212 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.33 bbox=290.28,123.06,446.93,132.03:                                          [d:[2]:1, [x:[3]+0100000, [2→[h:32 < i:z]],
line=1213 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.22 bbox=290.28,112.02,445.82,120.99:                                          [0→[g:z ≪  c:z, d:z < x:z], 1→[e:z < f:z]]]]
line=1214 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02               :                                             27

doc_id=42 page=28 block_id=28-1 bbox=126.0,668.1,484.35,701.94 label=tt 1215 1217
line=1215 fonts=F0-10.0,F3-10.0 bbox=126.0,691.98,484.23,701.94    :Predicting the d in edge 16 moves the parser into a new domain, so the active and dor-
line=1216 fonts=F0-10.0 iscore=0.33 bbox=126.0,679.98,484.35,689.94:mant constraints are re-initialized; now the constraint for domain 1 is active and those for
line=1217 fonts=F0-10.0 iscore=0.20 bbox=126.0,668.1,243.85,678.06 :domains 0 and 2 are dormant.

doc_id=42 page=28 block_id=28-2 bbox=137.88,525.54,278.07,651.87 label=tbtl 1218 1229
line=1218 fonts=F0-9.0,F8-9.0 bbox=137.88,642.78,278.07,651.87                   :   17    PRED din16     17   0000000
line=1219 fonts=F0-9.0 iscore=0.25 bbox=162.12,631.86,168.09,640.83              :         []
line=1220 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.17 bbox=162.12,621.06,257.21,630.03:         [0→[g:z ≪ c:z, d:z < x:z],
line=1221 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.17 bbox=162.12,610.14,214.32,619.11:         2→[h:z < i:z]]
line=1222 fonts=F0-9.0,F8-9.0 iscore=0.17 bbox=137.88,600.54,278.07,609.63       :   18    COMP 17, 4     18   0001000
line=1223 fonts=F0-9.0 iscore=0.20 bbox=162.12,589.62,168.09,598.59              :         []
line=1224 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.17 bbox=162.12,578.82,257.21,587.79:         [0→[g:z ≪ c:z, d:z < x:z],
line=1225 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.17 bbox=162.12,567.9,214.32,576.87 :         2→[h:z < i:z]]
line=1226 fonts=F0-9.0,F8-9.0 iscore=0.17 bbox=137.88,558.3,278.07,567.39        :   19    COMP 18, 5     19   0011000
line=1227 fonts=F0-9.0 iscore=0.20 bbox=162.12,547.26,168.09,556.23              :         []
line=1228 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.17 bbox=162.12,536.58,257.21,545.55:         [0→[g:z ≪ c:z, d:z < x:z],
line=1229 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.17 bbox=162.12,525.54,214.32,534.51:         2→[h:z < i:z]]

doc_id=42 page=28 block_id=28-3 bbox=290.25,531.06,431.51,652.12 label=tbtr 1230 1238
line=1230 fonts=F0-6.0,F0-9.0 bbox=290.67,642.78,431.51,652.12                   :                                         0100011    0000000    d      [e^{1}, f^{2}]
line=1231 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.20 bbox=290.25,631.86,345.43,640.83:                                         [1→[e:z < f:z]]
line=1232 fonts=F0-9.0 iscore=0.33 bbox=290.28,615.66,296.25,624.63              :                                         []
line=1233 fonts=F0-6.0,F0-9.0 iscore=0.25 bbox=290.67,600.54,419.51,609.76       :                                         0101011    0000000    d      [f^{2}]
line=1234 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.25 bbox=290.25,589.62,346.05,598.59:                                         [1→[e:8 < f:z]]
line=1235 fonts=F0-9.0 iscore=0.33 bbox=290.28,573.3,296.25,582.27               :                                         []
line=1236 fonts=F0-9.0 iscore=0.25 bbox=290.67,558.3,414.05,567.27               :                                         0011000    0000000    d      []
line=1237 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.25 bbox=290.25,547.26,351.04,556.23:                                         [1→[e:8 < f:16]]
line=1238 fonts=F0-9.0 iscore=0.33 bbox=290.28,531.06,296.25,540.03              :                                         []

doc_id=42 page=28 block_id=28-4 bbox=126.0,464.22,484.39,509.94 label=tbb 1239 1242
line=1239 fonts=F0-10.0,F3-10.0 bbox=126.0,499.98,484.39,509.94    :Even  though this d was originally predicted as part of the process of locating a c, it will
line=1240 fonts=F0-10.0 iscore=0.17 bbox=126.0,488.1,484.28,498.06 :first be picked up by edge 9. Note that in contrast to the handling of rule-level constraints,
line=1241 fonts=F0-10.0 iscore=0.22 bbox=126.0,476.1,484.37,486.06 :the constraint in domain 1 remains a part of the edge. This arises from the fact that there
line=1242 fonts=F0-10.0 iscore=0.17 bbox=126.0,464.22,411.57,474.18:are no limits on how often a description may be satisfied in any domain.

doc_id=42 page=28 block_id=28-5 bbox=137.4,351.78,432.95,445.95 label=btt 1243 1249
line=1243 fonts=F0-9.0,F8-9.0 bbox=137.88,436.86,414.05,445.95                   :   20    COMP 9, 19     20    0011000   0011000    0000000    b      []
line=1244 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.33 bbox=162.12,425.94,391.22,435.15:         []                             [0→[g:z ≪  c:z, d:24 < x:z]]
line=1245 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.29 bbox=162.12,404.22,296.25,424.11:         [2→1→[[he::z8<<i:fz:16]] ],    []
line=1246 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.18 bbox=137.88,394.62,432.95,403.84:   21    COMP 8, 20     21    0011000   0011000    1111111    a      [c^{2}, g^{3}]
line=1247 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.30 bbox=162.12,383.94,391.39,392.91:         [p24 < c2]                     [0→[g:z ≪  c:z, d:24 < x:z]]
line=1248 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.22 bbox=162.12,361.86,296.25,381.87:         [2→1→[[he::z8<<i:fz:16]] ],    []
line=1249 fonts=F0-9.0,F8-9.0 iscore=0.07 bbox=137.4,351.78,358.48,361.47        :   22    PRED c in 21 fails – no room for 3 elements in 0011111

doc_id=42 page=28 block_id=28-6 bbox=126.0,301.14,485.21,334.98 label=btb 1250 1252
line=1250 fonts=F0-10.0,F3-10.0 bbox=126.0,325.02,484.41,334.98                   :At this point, the parser can complete the d it found into edge 16. Notice that the frontier
line=1251 fonts=F0-10.0,F0-7.0,F3-10.0 iscore=0.20 bbox=126.0,311.58,485.21,322.98:value of d has been updated from 3_{10} to 24_{10} – the fact that d forms a domain only means
line=1252 fonts=F0-10.0 iscore=0.20 bbox=126.0,301.14,361.33,311.1                :that its subconstituents are not visible to higher constraints.

doc_id=42 page=28 block_id=28-7 bbox=137.88,246.66,278.07,282.99 label=bbttl 1253 1255
line=1253 fonts=F0-9.0,F8-9.0 bbox=137.88,273.9,278.07,282.99                    :   23    COMP 16, 19    22   0111000
line=1254 fonts=F0-9.0 iscore=0.20 bbox=162.12,262.86,168.09,271.83              :         []
line=1255 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.25 bbox=162.12,246.66,256.75,255.63:         [1→[void], 2→[h:z < i:z]]

doc_id=42 page=28 block_id=28-8 bbox=290.28,241.38,445.82,283.12 label=bbttr 1256 1259
line=1256 fonts=F0-6.0,F0-9.0 bbox=290.67,273.9,419.03,283.12                    :                                         0111011    0000000    c       [i^{3}]
line=1257 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.33 bbox=290.28,263.1,391.22,272.07 :                                         [0→[g:z ≪  c:z, d:24 < x:z]]
line=1258 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.17 bbox=290.28,252.42,418.12,261.39:                                         [[x:[3]+0100000, [2→[h:32 < i:z]],
line=1259 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.11 bbox=290.28,241.38,445.82,250.35:                                         [0→[g:z ≪  c:z, d:z < x:z], 1→[e:z < f:z]]]]

doc_id=42 page=28 block_id=28-9 bbox=126.0,190.02,485.22,225.3 label=bbtbt 1260 1262
line=1260 fonts=F0-10.0,F0-7.0,F3-10.0 bbox=126.0,213.9,485.22,225.3              :Finding the i at position 64_{10} finishes the in-progress isolation statement: the position vector
line=1261 fonts=F0-10.0,F6-10.0 iscore=0.20 bbox=126.0,203.34,484.14,213.3        :1100000  is indeed contiguous, and 32 < 64, so domain  2’s constraints are satisfied. The
line=1262 fonts=F0-10.0,F0-7.0,F3-10.0 iscore=0.27 bbox=126.0,190.02,381.45,201.42:resulting edge is updated to indicate an x found at position 96 _{10}.

doc_id=42 page=28 block_id=28-10 bbox=137.88,142.26,278.07,173.19 label=bbtbbl 1263 1265
line=1263 fonts=F0-9.0,F8-9.0 bbox=137.88,164.1,278.07,173.19                    :   24    COMP 22, 7     23   1111000
line=1264 fonts=F0-9.0 iscore=0.20 bbox=162.12,153.18,168.09,162.15              :         []
line=1265 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.25 bbox=162.12,142.26,256.75,151.23:         [1→[void], 2→[h:z < i:z]]

doc_id=42 page=28 block_id=28-11 bbox=290.28,142.26,414.03,173.07 label=bbtbbr 1266 1268
line=1266 fonts=F0-9.0 bbox=290.67,164.1,414.03,173.07                           :                                        1111000    0000000   c      []
line=1267 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.17 bbox=290.28,153.42,396.21,162.39:                                        [0→[g:z ≪ c:z, d:24 < x:96]]
line=1268 fonts=F0-9.0 iscore=0.17 bbox=290.35,142.26,296.32,151.23              :                                        []

doc_id=42 page=28 block_id=28-12 bbox=126.0,48.06,484.13,124.86 label=bbb 1269 1272
line=1269 fonts=F0-10.0,F3-10.0 bbox=126.0,114.9,484.13,124.86           :The c located, the original prediction can be advanced. Note the form of the updated
line=1270 fonts=F0-10.0,F3-10.0 iscore=0.20 bbox=126.0,102.9,484.0,112.86:immediate  precedence statement on edge 24, indicating that (o)ne c has been found at
line=1271 fonts=F0-10.0,F0-7.0 iscore=0.07 bbox=126.0,89.58,150.93,100.98:120_{10}.
line=1272 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02       :                                        28

doc_id=42 page=29 block_id=29-1 bbox=137.88,671.82,278.07,702.87 label=ttl 1273 1275
line=1273 fonts=F0-9.0,F8-9.0 bbox=137.88,693.78,278.07,702.87                   :   25    COMP 14, 23    24   1111011
line=1274 fonts=F0-9.0 iscore=0.20 bbox=162.12,682.74,168.09,691.71              :         []
line=1275 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.25 bbox=162.12,671.82,256.75,680.79:         [1→[void], 2→[h:z < i:z]]

doc_id=42 page=29 block_id=29-2 bbox=290.28,671.82,421.07,703.0 label=ttr 1276 1278
line=1276 fonts=F0-6.0,F0-9.0 bbox=290.67,693.78,421.07,703.0                    :                                        1111011    1111111    a      [g^{3}]
line=1277 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.33 bbox=290.28,682.98,416.25,691.95:                                        [0→[g:z ≪  c:o(120), d:24 < x:96]]
line=1278 fonts=F0-9.0 iscore=0.17 bbox=290.35,671.82,296.32,680.79              :                                        []

doc_id=42 page=29 block_id=29-3 bbox=126.0,632.58,484.23,654.42 label=tb 1279 1280
line=1279 fonts=F0-10.0,F3-10.0 bbox=126.0,644.46,484.23,654.42    :After completing with the remaining g, the success edge is obtained. The remainder of the
line=1280 fonts=F0-10.0 iscore=0.40 bbox=126.0,632.58,467.21,642.54:parse investigates the remaining choicepoints to see if any other analyses are possible.

doc_id=42 page=29 block_id=29-4 bbox=137.4,48.06,446.93,609.39 label=b 1281 1321
line=1281 fonts=F0-9.0,F8-9.0 bbox=137.88,600.3,414.03,609.39                    :   26    COMP 24, 3     25    1111111    1111111    0000000   a       []
line=1282 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.22 bbox=162.12,589.38,427.21,598.59:         []                              [0→[g:o(4) ≪ c:o(120), d:24 < x:96]]
line=1283 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.29 bbox=162.12,578.34,296.32,587.31:         [1→[void], 2→[h:z < i:z]]       []
line=1284 fonts=F0-9.0,F8-9.0 iscore=0.20 bbox=137.88,566.94,414.05,576.03       :   27    COMP 11, 5     26    0010010    0010010    0000000   d       []
line=1285 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.22 bbox=162.12,555.9,386.11,565.11 :         []                              [0→[g:z ≪ c:z, d:z < x:z]]
line=1286 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.29 bbox=162.12,534.18,296.25,554.07:         [2→1→[[he::z2<<i:fz:16]] ],     []
line=1287 fonts=F0-9.0,F8-9.0 iscore=0.20 bbox=137.88,524.58,414.05,533.67       :   28    COMP 9, 26     27    0010010    0010010    0000000   b       []
line=1288 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.22 bbox=162.12,513.66,391.22,522.87:         []                              [0→[g:z ≪ c:z, d:18 < x:z]]
line=1289 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.29 bbox=162.12,491.94,296.25,511.83:         [2→1→[[he::z2<<i:fz:16]] ],     []
line=1290 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.18 bbox=137.88,482.34,432.95,491.56:   29    COMP 8, 27     28    0010010    0010010    1111111   a       [c^{2}, g^{3}]
line=1291 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.40 bbox=162.12,471.66,391.39,480.63:         [p18 < c2]                      [0→[g:z ≪ c:z, d:18 < x:z]]
line=1292 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.22 bbox=162.12,449.58,296.25,469.59:         [2→1→[[he::z2<<i:fz:16]] ],     []
line=1293 fonts=F0-9.0,F8-9.0 iscore=0.07 bbox=137.4,439.5,358.48,449.19         :   30    PRED c in 28 fails – no room for 3 elements in 0011111
line=1294 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.29 bbox=137.88,428.7,419.51,437.92 :   31    COMP 10, 4     29    0001000    0001000    0000000   d       [f^{2}]
line=1295 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.22 bbox=162.12,417.78,386.11,426.99:         []                              [0→[g:z ≪ c:z, d:z < x:z]]
line=1296 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.29 bbox=162.12,406.74,296.24,415.71:         [1→[e:8 < f:z], 2→[h:z < i:z]]  []
line=1297 fonts=F0-9.0,F8-9.0 iscore=0.40 bbox=137.88,395.34,414.05,404.43       :   32    COMP 29, 1     30    0001001    0001001    0000000   d       []
line=1298 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.22 bbox=162.12,384.3,386.11,393.51 :         []                              [0→[g:z ≪ c:z, d:z < x:z]]
line=1299 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.29 bbox=162.12,373.38,296.32,382.35:         [1→[void], 2→[h:z < i:z]]       []
line=1300 fonts=F0-9.0,F8-9.0 iscore=0.20 bbox=137.88,361.86,414.05,370.95       :   33    COMP 9, 30     31    0001001    0001001    0000000   b       []
line=1301 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.22 bbox=162.12,350.94,386.74,360.15:         []                              [0→[g:z ≪ c:z, d:9 < x:z]]
line=1302 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.29 bbox=162.12,340.02,296.32,348.99:         [1→[void], 2→[h:z < i:z]]       []
line=1303 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.18 bbox=137.88,328.5,432.95,337.72 :   34    COMP 8, 31     32    0001001    0001001    1111111   a       [c^{2}, g^{3}]
line=1304 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.30 bbox=162.12,317.82,386.86,326.79:         [p9 < c2]                       [0→[g:z ≪ c:z, d:9 < x:z]]
line=1305 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.22 bbox=162.12,306.66,296.32,315.63:         [1→[void], 2→[h:z < i:z]]       []
line=1306 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.18 bbox=137.88,295.14,443.99,304.36:   35    PRED cin32     33    0000000    0001111    0000000   c       [h^{1}, d^{2}, i^{3}]
line=1307 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.20 bbox=162.12,284.22,386.74,293.43:         []                              [0→[g:z ≪ c:z, d:9 < x:z]]
line=1308 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.43 bbox=162.12,273.18,358.66,282.15:         [1→[void], 2→[h:z < i:z]]       [d:[2]:1, x:[1, 3]:2]
line=1309 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.18 bbox=137.88,261.78,431.51,271.0 :   36    COMP 33, 6     34    0100000    0101111    0000000   c       [d^{2}, i^{3}]
line=1310 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.20 bbox=162.12,250.74,386.74,259.95:         []                              [0→[g:z          ≪ c:z,       d:9        < x:z]]
line=1311 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.67 bbox=162.12,229.38,446.93,249.27:         [1→[void], 2→[h:z < i:z]]       [[d0→:[2[]:g1:z, [≪x:[c3:]+z, d0100000:z < x:z,],[2→1→[[he::z32<<f:iz:]]]]z]],
line=1312 fonts=F0-6.0,F0-9.0,F8-9.0 iscore=0.20 bbox=137.88,219.18,431.51,228.4 :   37    PRED din34     35    0000000    0101111    0000000   d       [e^{1}, f^{2}]
line=1313 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.22 bbox=162.12,208.26,345.43,217.23:         []                              [1→[e:z < f:z]]
line=1314 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.40 bbox=162.12,186.54,296.25,206.43:         [2→0→[[hg:z:z<≪i:zc]]:z, d:z < x:z], []
line=1315 fonts=F0-9.0,F8-9.0 iscore=0.20 bbox=137.88,176.94,414.05,186.03       :   38    COMP 29, 5     36    0011000    0011000    0000000   d       []
line=1316 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.22 bbox=162.12,166.02,386.11,175.23:         []                              [0→[g:z ≪ c:z, d:z < x:z]]
line=1317 fonts=F0-9.0,F5-9.0,F6-9.0 iscore=0.29 bbox=162.12,144.18,296.25,164.19:         [2→1→[[he::z8<<i:fz:16]] ],     []
line=1318 fonts=F0-9.0,F8-9.0 iscore=0.17 bbox=137.4,134.7,319.84,143.91         :   39    COMP 9, 36 is already in the chart as edge 20
line=1319 fonts=F0-9.0,F8-9.0 iscore=0.25 bbox=137.4,123.42,324.33,132.63        :   40    COMP 16, 36 is already in the chart as edge 22
line=1320 fonts=F0-9.0,F8-9.0 iscore=0.25 bbox=137.4,111.3,202.98,120.99         :   41    SUCCESS: 25
line=1321 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02               :                                           29

doc_id=42 page=30 block_id=30-1 bbox=126.0,656.34,193.67,668.3 label=tt 1322 1322
line=1322 fonts=F3-12.0 bbox=126.0,656.34,193.67,668.3:6 Evaluation

doc_id=42 page=30 block_id=30-2 bbox=126.0,592.26,484.59,638.1 label=tb 1323 1326
line=1323 fonts=F0-10.0 bbox=126.0,628.14,484.16,638.1                    :In general, a new parsing algorithm should contribute to the state of the art in either (or
line=1324 fonts=F0-10.0 iscore=0.29 bbox=126.0,616.14,484.59,626.1        :both) of two ways:  it is more efficient than previous approaches, or it allows grammars
line=1325 fonts=F0-10.0 iscore=0.27 bbox=126.0,604.26,484.26,614.22       :to express concepts more transparently. The paper now addresses each of these areas in
line=1326 fonts=F0-10.0,F0-7.0 iscore=0.07 bbox=126.0,592.26,151.69,602.83:turn.^{17}

doc_id=42 page=30 block_id=30-3 bbox=126.0,403.62,484.63,569.7 label=btt 1327 1339
line=1327 fonts=F3-10.0 bbox=126.0,559.74,184.74,569.7                     :6.1 Efficiency
line=1328 fonts=F0-10.0 iscore=0.08 bbox=126.0,535.14,483.72,545.1         :Suhre (1999) shows that the membership problem for a formally-equivalent grammar for-
line=1329 fonts=F0-10.0 iscore=0.21 bbox=126.0,523.14,484.4,533.1          :malism is NP-complete, both when considering the grammar plus the string as input (gen-
line=1330 fonts=F0-10.0 iscore=0.27 bbox=126.0,511.14,484.58,521.1         :eral membership problem) as well as when only the string is considered as input (fixed
line=1331 fonts=F0-10.0 iscore=0.13 bbox=126.0,499.26,484.01,509.22        :membership  problem). It has been known since Huynh (1983) that the general membership
line=1332 fonts=F0-10.0,F1-10.0 iscore=0.15 bbox=126.0,487.26,484.01,497.22:problem for unordered context-free grammars (ID/LP grammars without LP statements) is
line=1333 fonts=F0-10.0 iscore=0.14 bbox=126.0,475.26,484.56,485.22        :also NP-complete, so Suhre’s first result is not surprising. That the fixed membership prob-
line=1334 fonts=F0-10.0 iscore=0.36 bbox=126.0,463.38,484.63,473.34        :lem for GIDLP  grammars  is also NP-complete is less straightforward; fortunately, Suhre
line=1335 fonts=F0-10.0 iscore=0.29 bbox=126.0,451.38,484.24,461.34        :(1999, 61ff) demonstrates that it stems from the potential for recursive growth of discon-
line=1336 fonts=F0-10.0 iscore=0.24 bbox=126.0,439.5,484.1,449.46          :tinuities. As a result, when the parser can assume an upper bound on the number of dis-
line=1337 fonts=F0-10.0 iscore=0.12 bbox=126.0,427.5,484.29,437.46         :continuities in any given constituent, the fixed membership problem becomes polynomial.
line=1338 fonts=F0-10.0 iscore=0.08 bbox=126.0,415.5,484.25,425.46         :Formally, this can be achieved by requiring that the number of discontinuities introduced
line=1339 fonts=F0-10.0 iscore=0.15 bbox=126.0,403.62,354.25,413.58        :by a recursive non-terminal is bounded by some constant.

doc_id=42 page=30 block_id=30-4 bbox=126.0,337.86,485.89,395.58 label=btbt 1340 1344
line=1340 fonts=F0-10.0 bbox=126.0,385.62,484.48,395.58                   :Interestingly, a related practical proposal based on linguistic argumentation is discussed
line=1341 fonts=F0-10.0 iscore=0.18 bbox=126.0,373.74,484.12,383.7        :by Müller  (1999b).  He proposes  a continuity constraint for linearization-based HPSG
line=1342 fonts=F0-10.0,F0-7.0 iscore=0.08 bbox=126.0,361.74,485.89,372.31:which requires saturated phrasal elements (that is, maximal projections) to be continuous. ^{18}
line=1343 fonts=F0-10.0 iscore=0.29 bbox=126.0,349.74,484.55,359.7        :Müller shows  that adding his continuity constraint results in a significant reduction in the
line=1344 fonts=F0-10.0 iscore=0.36 bbox=126.0,337.86,472.01,347.82       :number  of passive edges and thereby significant improvements in parsing performance.

doc_id=42 page=30 block_id=30-5 bbox=126.0,260.1,484.48,329.82 label=btbbt 1345 1350
line=1345 fonts=F0-10.0 bbox=126.0,319.86,484.22,329.82            :This continuity constraint is weaker than Suhre’s condition in that recursion on the level of
line=1346 fonts=F0-10.0 iscore=0.19 bbox=126.0,307.98,484.48,317.94:adjunction is not restricted. It is, however, interesting to note in this context that a grammar
line=1347 fonts=F0-10.0 iscore=0.25 bbox=126.0,295.98,483.97,305.94:incorporating the X-schema  (Jackendoff 1977)  will require all non-head constituents to
line=1348 fonts=F0-10.0 iscore=0.17 bbox=126.0,283.98,484.43,293.94:be maximal  projections. In sum,  Müller’s result strongly suggests that further research
line=1349 fonts=F0-10.0 iscore=0.42 bbox=126.0,272.1,484.47,282.06 :on linguistically-motivated continuity constraints can result in efficient parsing of those
line=1350 fonts=F0-10.0 iscore=0.18 bbox=126.0,260.1,324.53,270.06 :GIDLP   grammars  which include such constraints.

doc_id=42 page=30 block_id=30-6 bbox=126.0,182.46,484.58,252.18 label=btbbbt 1351 1356
line=1351 fonts=F0-10.0 bbox=126.0,242.22,484.36,252.18            :This raises the question of how the parsing algorithm proposed in this paper performs
line=1352 fonts=F0-10.0 iscore=0.29 bbox=126.0,230.22,484.21,240.18:when  used to parse grammars incorporating linear precedence and isolation constraints
line=1353 fonts=F0-10.0 iscore=0.38 bbox=126.0,218.22,484.58,228.18:(since the worst-case performance results are based on the absence of such constraints).
line=1354 fonts=F0-10.0 iscore=0.15 bbox=126.0,206.34,484.34,216.3 :As mentioned earlier, the GIDLP grammars form a superset of the context-free grammars.
line=1355 fonts=F0-10.0 iscore=0.22 bbox=126.0,194.34,484.56,204.3 :Thus it would be desirable for a GIDLP parser to be just as efficient as a context-free parser
line=1356 fonts=F0-10.0 iscore=0.11 bbox=126.0,182.46,426.77,192.42:when  presented with a context-free grammar encoded in the GIDLP format.

doc_id=42 page=30 block_id=30-7 bbox=126.0,152.58,484.45,174.42 label=btbbbb 1357 1358
line=1357 fonts=F0-10.0 bbox=126.0,164.46,484.45,174.42            :To investigate this, the parser’s performance has been tested with the three types of context-
line=1358 fonts=F0-10.0 iscore=0.07 bbox=126.0,152.58,484.01,162.54:free grammars  discussed in Earley (1970) – those that require linear, quadratic, and cubic

doc_id=42 page=30 block_id=30-8 bbox=126.12,48.06,488.65,138.04 label=bb 1359 1364
line=1359 fonts=F0-6.0,F0-8.0,F1-8.0 bbox=126.12,129.18,488.43,138.04    :^{17} An interesting point of reference is the ID/LP parsing literature. Volk (1996) showed that in terms of efficiency
line=1360 fonts=F0-8.0,F1-8.0 iscore=0.39 bbox=133.92,119.7,488.65,127.67:  and expressivity, it is advantageous to be able to combine ID/LP and ordinary context-free rules in one grammar.
line=1361 fonts=F0-8.0 iscore=0.28 bbox=133.92,110.34,488.07,118.31      :  While  this paper has focused on the issue of discontinuity, the GIDLP  parsing algorithm does seamlessly
line=1362 fonts=F0-8.0,F1-8.0 iscore=0.06 bbox=133.92,100.86,269.0,108.83:  integrate context-free and (G)ID/LP rules.
line=1363 fonts=F0-6.0,F0-8.0 iscore=0.07 bbox=126.12,91.02,444.2,99.88  :^{18} If extraposition is handled via discontinuous constituents, a more complex constraint is required.
line=1364 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02       :                                                    30

doc_id=42 page=31 block_id=31-1 bbox=126.0,668.1,484.69,701.94 label=ttt 1365 1367
line=1365 fonts=F0-10.0 bbox=126.0,691.98,484.12,701.94                    :time for strings to be recognized; following Earley, the number of edge insertion attempts
line=1366 fonts=F0-10.0,F3-10.0 iscore=0.07 bbox=126.0,679.98,484.69,689.94:(whether successful or unsuccessful) is used as a metric (represented as cost in the charts
line=1367 fonts=F0-10.0 iscore=0.07 bbox=126.0,668.1,174.92,678.06         :that follow).

doc_id=42 page=31 block_id=31-2 bbox=126.0,638.22,484.09,660.06 label=ttb 1368 1369
line=1368 fonts=F0-10.0 bbox=126.0,650.1,484.09,660.06             :Earley uses the context-free grammar in (17) (presented here with its GIDLP equivalent) to
line=1369 fonts=F0-10.0 iscore=0.21 bbox=126.0,638.22,335.83,648.18:test the linear and quadratic aspects of the algorithm.

doc_id=42 page=31 block_id=31-3 bbox=126.0,553.5,477.63,623.22 label=tbt 1370 1375
line=1370 fonts=F0-10.0 bbox=126.0,613.26,254.2,623.22                            :(17) root(X)      root(X, [])
line=1371 fonts=F0-10.0,F0-7.0,F5-10.0 iscore=0.11 bbox=153.0,601.26,301.66,611.95:      X → A       X → A^{1} ;;〈[1], [], A〉
line=1372 fonts=F0-10.0,F0-7.0,F5-10.0 iscore=0.47 bbox=153.0,589.38,388.63,599.95:      X → XB      X→  X^{1} B^{2} ; 1≪ 2 ;〈[1], [], X〉, 〈[2], [], B〉
line=1373 fonts=F0-10.0,F0-7.0,F5-10.0 iscore=0.93 bbox=153.0,577.38,389.66,587.95:      X → YA      X→  Y^{1} A^{2} ; 1≪ 2 ;〈[1], [], Y〉, 〈[2], [], A〉
line=1374 fonts=F0-10.0,F0-7.0,F5-10.0 iscore=0.40 bbox=153.0,565.5,299.48,576.07 :      Y → E       Y → E^{1} ;;〈[1], [], E〉
line=1375 fonts=F0-10.0,F0-7.0,F5-10.0 iscore=0.32 bbox=153.0,553.5,477.63,564.07 :      Y → YDY     Y→  Y^{1} D^{2} Y^{3} ; 1≪ 2, 2 ≪ 3; 〈[1], [], Y〉, 〈[2], [], D〉, 〈[3], [], Y〉

doc_id=42 page=31 block_id=31-4 bbox=126.0,505.26,485.45,539.71 label=tbbt 1376 1378
line=1376 fonts=F0-10.0,F3-10.0,F4-10.0,F4-7.0 bbox=126.0,529.14,485.45,539.71:Consider the input string (ed)^{x}eab^{y} (where a^{x} abbreviates x copies of a). With this gram-
line=1377 fonts=F0-10.0 iscore=0.20 bbox=126.0,517.26,484.24,527.22           :mar, Earley reports that the number of edge insertion attempts for his algorithm increases
line=1378 fonts=F0-10.0,F4-10.0 iscore=0.07 bbox=126.0,505.26,284.36,515.22   :linearly with y and quadratically with x.

doc_id=42 page=31 block_id=31-5 bbox=126.0,475.38,484.45,497.34 label=tbbb 1379 1380
line=1379 fonts=F0-10.0 bbox=126.0,487.38,484.45,497.34            :With the linear case, a constant amount of additional work is expected for each additional
line=1380 fonts=F0-10.0 iscore=0.13 bbox=126.0,475.38,428.19,485.34:character. The results below show that this is obtained by the GIDLP parser.

doc_id=42 page=31 block_id=31-6 bbox=187.68,387.3,289.15,457.86 label=btl 1381 1386
line=1381 fonts=F0-10.0 bbox=187.68,447.9,289.14,457.86                            :             Input      Cost   Size
line=1382 fonts=F0-10.0,F3-10.0 iscore=0.33 bbox=187.68,435.54,289.09,445.5        :             ededeab      97     1
line=1383 fonts=F0-10.0,F0-7.0,F3-10.0 iscore=0.67 bbox=187.68,423.18,289.09,433.75:             ededeab^{2}  110    2
line=1384 fonts=F0-10.0,F0-7.0,F3-10.0 iscore=1.00 bbox=187.68,411.3,289.09,421.87 :             ededeab^{3}  123    3
line=1385 fonts=F0-10.0,F0-7.0,F3-10.0 iscore=1.00 bbox=187.68,399.3,289.09,409.87 :             ededeab^{5}  149    5
line=1386 fonts=F0-10.0,F0-7.0,F3-10.0 iscore=0.67 bbox=187.68,387.3,289.15,397.87 :             ededeab^{10} 214   10

doc_id=42 page=31 block_id=31-7 bbox=301.14,387.3,424.19,457.86 label=btr 1387 1392
line=1387 fonts=F0-10.0,F1-10.0 bbox=301.14,447.9,424.19,457.86            :                                     ∆Cost   ∆Size   ∆Cost/∆Size
line=1388 fonts=F0-10.0,F1-10.0 iscore=0.00 bbox=313.57,435.54,423.99,445.5:                                        n/a    n/a           n/a
line=1389 fonts=F0-10.0 iscore=0.33 bbox=320.77,423.18,423.91,433.14       :                                         1      13           13
line=1390 fonts=F0-10.0 iscore=1.00 bbox=320.77,411.3,423.91,421.26        :                                         2      26           13
line=1391 fonts=F0-10.0 iscore=1.00 bbox=320.77,399.3,423.91,409.26        :                                         4      52           13
line=1392 fonts=F0-10.0 iscore=0.67 bbox=320.71,387.3,423.79,397.26        :                                         9     117           13

doc_id=42 page=31 block_id=31-8 bbox=126.0,347.7,484.14,369.66 label=bbttt 1393 1394
line=1393 fonts=F0-10.0 bbox=126.0,359.7,484.14,369.66                            :In these charts, size refers to the length of the relevant portion of the input string (here, the
line=1394 fonts=F0-10.0,F1-10.0,F3-10.0 iscore=0.28 bbox=126.0,347.7,451.53,357.66:number  of bs); all ∆ values are computed with respect to the first line of the chart.

doc_id=42 page=31 block_id=31-9 bbox=126.0,305.94,484.25,339.78 label=bbttb 1395 1397
line=1395 fonts=F0-10.0 bbox=126.0,329.82,484.03,339.78            :For the quadratic case, the additional work required should be proportional to the difference
line=1396 fonts=F0-10.0 iscore=0.27 bbox=126.0,317.82,484.25,327.78:of the squares of the input length. The data below diverge, indicating that this performance
line=1397 fonts=F0-10.0 iscore=0.07 bbox=126.0,305.94,229.59,315.9 :goal has not yet been met.

doc_id=42 page=31 block_id=31-10 bbox=181.2,217.86,311.07,289.03 label=bbtbl 1398 1403
line=1398 fonts=F0-10.0,F0-7.0 bbox=181.2,278.46,311.07,289.03                           :            Input    Cost   Size^{2} ∆Cost
line=1399 fonts=F0-10.0,F0-7.0,F1-10.0,F3-10.0 iscore=0.25 bbox=181.2,266.1,310.95,276.67:            (ed)^{2}ea 74       4     n/a
line=1400 fonts=F0-10.0,F0-7.0,F3-10.0 iscore=0.50 bbox=181.2,253.74,310.85,264.31       :            (ed)^{3}ea 132      9      58
line=1401 fonts=F0-10.0,F0-7.0,F3-10.0 iscore=0.50 bbox=181.2,241.74,310.73,252.31       :            (ed)^{4}ea 220    16     146
line=1402 fonts=F0-10.0,F0-7.0,F3-10.0 iscore=1.00 bbox=181.2,229.74,310.73,240.43       :            (ed)^{5}ea 347    25     273
line=1403 fonts=F0-10.0,F0-7.0,F3-10.0 iscore=1.00 bbox=181.2,217.86,310.73,228.43       :            (ed)^{6}ea 523    36     449

doc_id=42 page=31 block_id=31-11 bbox=323.07,217.86,430.76,289.03 label=bbtbr 1404 1409
line=1404 fonts=F0-10.0,F0-7.0,F1-10.0 bbox=323.07,278.46,430.76,289.03    :                                             ∆(Size^{2}) ∆Cost/∆(Size^{2})
line=1405 fonts=F0-10.0,F1-10.0 iscore=0.00 bbox=344.79,266.1,430.44,276.06:                                                  n/a              n/a
line=1406 fonts=F0-10.0 iscore=0.00 bbox=351.89,253.74,430.35,263.7        :                                                    5            11.6
line=1407 fonts=F0-10.0 iscore=0.50 bbox=346.73,241.74,430.17,251.7        :                                                  12             12.2
line=1408 fonts=F0-10.0 iscore=1.00 bbox=346.73,229.74,430.17,239.7        :                                                  21             13.0
line=1409 fonts=F0-10.0 iscore=1.00 bbox=346.73,217.86,430.17,227.82       :                                                  32             14.0

doc_id=42 page=31 block_id=31-12 bbox=126.0,158.34,269.29,200.1 label=bbbt 1410 1412
line=1410 fonts=F0-10.0 bbox=126.0,190.14,269.29,200.1                      :The simplest cubic-time grammar is
line=1411 fonts=F0-10.0,F5-10.0 iscore=0.00 bbox=150.96,170.22,188.06,180.18:     B → BB
line=1412 fonts=F0-10.0,F5-10.0 iscore=1.00 bbox=150.96,158.34,179.32,168.3 :     B → A

doc_id=42 page=31 block_id=31-13 bbox=126.0,48.06,337.27,148.38 label=bbbb 1413 1414
line=1413 fonts=F0-10.0 bbox=126.0,138.42,337.27,148.38           :The corresponding results show a similar divergence.
line=1414 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02:                                         31

doc_id=42 page=32 block_id=32-1 bbox=185.64,632.94,306.63,704.11 label=tl 1415 1420
line=1415 fonts=F0-10.0,F0-7.0 bbox=185.64,693.54,306.63,704.11                    :            Input  Cost  Size^{3} ∆Cost
line=1416 fonts=F0-10.0,F0-7.0,F1-10.0 iscore=0.25 bbox=185.64,681.18,306.29,691.75:            A^{5}   105    125     n/a
line=1417 fonts=F0-10.0,F0-7.0 iscore=1.00 bbox=185.64,668.82,306.25,679.39        :            A^{6}   182    216     77
line=1418 fonts=F0-10.0,F0-7.0 iscore=0.75 bbox=185.64,656.94,306.31,667.51        :            A^{7}   294    343    189
line=1419 fonts=F0-10.0,F0-7.0 iscore=1.00 bbox=185.64,644.94,306.31,655.51        :            A^{8}   450    512    345
line=1420 fonts=F0-10.0,F0-7.0 iscore=0.75 bbox=185.64,632.94,306.25,643.63        :            A^{10}  935   1000    830

doc_id=42 page=32 block_id=32-2 bbox=318.63,632.94,426.32,704.11 label=tr 1421 1426
line=1421 fonts=F0-10.0,F0-7.0,F1-10.0 bbox=318.63,693.54,426.32,704.11    :                                            ∆(Size^{3}) ∆Cost/∆(Size^{3})
line=1422 fonts=F0-10.0,F1-10.0 iscore=0.00 bbox=340.25,681.18,425.9,691.14:                                                n/a              n/a
line=1423 fonts=F0-10.0 iscore=0.00 bbox=342.37,668.82,425.69,678.78       :                                                 91             0.85
line=1424 fonts=F0-10.0 iscore=0.50 bbox=337.27,656.94,425.57,666.9        :                                                218             0.87
line=1425 fonts=F0-10.0 iscore=1.00 bbox=337.27,644.94,425.57,654.9        :                                                387             0.89
line=1426 fonts=F0-10.0 iscore=1.00 bbox=337.21,632.94,425.51,642.9        :                                                875             0.94

doc_id=42 page=32 block_id=32-3 bbox=126.0,552.06,484.28,610.62 label=btt 1427 1430
line=1427 fonts=F3-10.0 bbox=126.0,600.66,326.16,610.62            :6.2 Natural Description of Efficient Grammars
line=1428 fonts=F0-10.0 iscore=0.11 bbox=126.0,576.06,484.28,586.02:Recall that in the GIDLP grammar format defined in section 2.1, the order of the RHS of a
line=1429 fonts=F0-10.0 iscore=0.28 bbox=126.0,564.06,484.08,574.02:grammar  rule does not encode the terminal order of the daughters. Instead, it expresses the
line=1430 fonts=F0-10.0 iscore=0.13 bbox=126.0,552.06,457.58,562.02:order in which the parser will search for these elements, as discussed in section 3.4.

doc_id=42 page=32 block_id=32-4 bbox=126.0,474.42,484.74,544.14 label=btb 1431 1436
line=1431 fonts=F0-10.0 bbox=126.0,534.18,484.33,544.14            :To see why this is valuable, consider a grammar covering raising verbs in Icelandic. Many
line=1432 fonts=F0-10.0 iscore=0.13 bbox=126.0,522.18,484.32,532.14:verbs in Icelandic assign “quirky case” (i.e. non-nominative) to their subjects; these case
line=1433 fonts=F0-10.0 iscore=0.12 bbox=126.0,510.3,484.74,520.26 :assignments persist when the subject is raised to be the subject or object of a matrix verb.
line=1434 fonts=F0-10.0 iscore=0.12 bbox=126.0,498.3,484.01,508.26 :From  a parsing perspective, the embedded verb must be known before it can be determined
line=1435 fonts=F0-10.0 iscore=0.19 bbox=126.0,486.3,484.34,496.26 :whether a given noun phrase is an acceptable subject for the matrix verb. This is illustrated
line=1436 fonts=F0-10.0 iscore=0.06 bbox=126.0,474.42,227.55,484.38:by the data in (18) – (23).

doc_id=42 page=32 block_id=32-5 bbox=126.0,422.94,267.1,459.42 label=bbttt 1437 1439
line=1437 tag=L span_id=42-1 lang_name=Icelandic lang_code=isl fonts=F0-10.0 bbox=126.0,449.46,267.1,459.42                      :(18) Hana    virðist vanta   peninga
line=1438 tag=G span_id=42-1 lang_name=Icelandic lang_code=isl fonts=F0-10.0,F8-10.0 iscore=1.00 bbox=147.12,437.58,262.56,447.54:     her.ACC seems   to-lack money
line=1439 tag=T span_id=42-1 lang_name=Icelandic lang_code=isl fonts=F0-9.0 iscore=0.20 bbox=147.12,422.94,244.82,431.91         :     ‘She seems to lack money.’

doc_id=42 page=32 block_id=32-6 bbox=126.0,376.26,368.62,412.74 label=bbttbt 1440 1442
line=1440 tag=L span_id=42-2 lang_name=Icelandic lang_code=isl fonts=F0-10.0 bbox=126.0,402.78,349.15,412.74                     :(19) Barninu       virðist hafa    batnað         veikin
line=1441 tag=G span_id=42-2 lang_name=Icelandic lang_code=isl fonts=F0-10.0,F8-10.0 iscore=1.00 bbox=147.12,390.78,368.62,400.74:     the-child.DAT seems   to-have recovered-from the-disease
line=1442 tag=T span_id=42-2 lang_name=Icelandic lang_code=isl fonts=F0-9.0 iscore=0.11 bbox=147.12,376.26,339.94,385.23         :     ‘The child seems to have recovered from the disease.’

doc_id=42 page=32 block_id=32-7 bbox=126.0,329.46,314.94,366.06 label=bbttbbt 1443 1445
line=1443 tag=L span_id=42-3 lang_name=Icelandic lang_code=isl fonts=F0-10.0 bbox=126.0,356.1,269.02,366.06                     :(20) Verkjanna     virðist ekki gæta
line=1444 tag=G span_id=42-3 lang_name=Icelandic lang_code=isl fonts=F0-10.0,F8-10.0 iscore=1.00 bbox=147.12,344.1,314.94,354.06:     the-pains.GEN seem    not  to-be-noticeable
line=1445 tag=T span_id=42-3 lang_name=Icelandic lang_code=isl fonts=F0-9.0 iscore=0.29 bbox=147.12,329.46,290.81,338.43        :     ‘The pains don’t seem to be noticeable.’

doc_id=42 page=32 block_id=32-8 bbox=126.0,282.78,304.3,319.38 label=bbttbbbt 1446 1448
line=1446 tag=L span_id=42-4 lang_name=Icelandic lang_code=isl fonts=F0-10.0 bbox=126.0,309.42,304.3,319.38                      :(21) Hann   telur    mig    vanta   peninga
line=1447 tag=G span_id=42-4 lang_name=Icelandic lang_code=isl fonts=F0-10.0,F8-10.0 iscore=1.00 bbox=147.12,297.42,299.76,307.38:     he.NOM believes me.ACC to-lack money
line=1448 tag=T span_id=42-4 lang_name=Icelandic lang_code=isl fonts=F0-9.0 iscore=0.33 bbox=147.12,282.78,260.55,291.75         :     ‘He believes that I lack money.’

doc_id=42 page=32 block_id=32-9 bbox=126.0,236.1,399.46,272.58 label=bbttbbbb 1449 1451
line=1449 tag=L span_id=42-5 lang_name=Icelandic lang_code=isl fonts=F0-10.0 bbox=126.0,262.62,379.99,272.58                    :(22) Hann  telur    barninu       hafa    batnað         veikin
line=1450 tag=G span_id=42-5 lang_name=Icelandic lang_code=isl fonts=F0-10.0,F8-10.0 iscore=1.00 bbox=147.12,250.74,399.46,260.7:     he    believes the-child.DAT to-have recovered-from the-disease
line=1451 tag=T span_id=42-5 lang_name=Icelandic lang_code=isl fonts=F0-9.0 iscore=0.30 bbox=147.12,236.1,356.79,245.07         :     ‘He believes the child to have recovered from the disease.’

doc_id=42 page=32 block_id=32-10 bbox=126.0,189.42,345.78,225.9 label=bbtb 1452 1454
line=1452 tag=L span_id=42-6 lang_name=Icelandic lang_code=isl fonts=F0-10.0 bbox=126.0,215.94,299.86,225.9                      :(23) Hann  telur    verkjanna     ekki gæta
line=1453 tag=G span_id=42-6 lang_name=Icelandic lang_code=isl fonts=F0-10.0,F8-10.0 iscore=1.00 bbox=147.12,204.06,345.78,214.02:     he    believes the-pains.GEN not  to-be-noticeable
line=1454 tag=T span_id=42-6 lang_name=Icelandic lang_code=isl fonts=F0-9.0 iscore=0.38 bbox=147.12,189.42,303.93,198.39         :     ‘He believes the pains to be not noticeable.’

doc_id=42 page=32 block_id=32-11 bbox=126.0,48.06,484.55,174.42 label=bbb 1455 1460
line=1455 fonts=F0-10.0 bbox=126.0,164.46,484.34,174.42            :In other words, the fact that the subject in (18) and (21) is accusative is a reflection of the
line=1456 fonts=F0-10.0 iscore=0.21 bbox=126.0,152.58,484.11,162.54:embedded   verb ‘lack’ rather than the matrix verbs ‘seem’ or ‘believe’; the same situation
line=1457 fonts=F0-10.0 iscore=0.20 bbox=126.0,140.58,483.73,150.54:holds for the dative [(19), (22)] and genitive [(20), (23)] examples. In all other respects,
line=1458 fonts=F0-10.0 iscore=0.33 bbox=126.0,128.58,484.55,138.54:however, the matrix verb is still the head of its clause (it must agree in number with the
line=1459 fonts=F0-10.0 iscore=0.06 bbox=126.0,116.7,212.45,126.66 :subject, for example).
line=1460 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02 :                                          32

doc_id=42 page=33 block_id=33-1 bbox=126.0,656.1,484.24,701.94 label=tt 1461 1464
line=1461 fonts=F0-10.0 bbox=126.0,691.98,483.73,701.94            :Consider a head-driven parser (van Noord 1997): a variant of a phrase-structure parser in
line=1462 fonts=F0-10.0 iscore=0.21 bbox=126.0,679.98,484.15,689.94:which a designated element (the head) is parsed before any other complement); the non-
line=1463 fonts=F0-10.0 iscore=0.27 bbox=126.0,668.1,484.24,678.06 :head daughters are then parsed in the usual left-to-right order. With such a parser, the
line=1464 fonts=F0-10.0 iscore=0.20 bbox=126.0,656.1,412.02,666.06 :grammar  writer would write a rule like (24) to license the matrix clause.

doc_id=42 page=33 block_id=33-2 bbox=126.0,629.82,238.39,641.83 label=tbtt 1465 1465
line=1465 fonts=F0-10.0,F0-7.0,F5-10.0 bbox=126.0,629.82,238.39,641.83:(24) S → NP_{subj} V^{head} VP_{inf}

doc_id=42 page=33 block_id=33-3 bbox=126.0,570.42,484.63,616.26 label=tbtbt 1466 1469
line=1466 fonts=F0-10.0,F3-10.0 bbox=126.0,606.3,484.56,616.26             :With such a rule, the parser will first locate the head (here, the V), then the NP, and finally
line=1467 fonts=F0-10.0,F3-10.0 iscore=0.26 bbox=126.0,594.3,484.63,604.26 :the VP. As a consequence, the constraints in the VP on the case of the subject will not be
line=1468 fonts=F0-10.0,F3-10.0 iscore=0.21 bbox=126.0,582.42,484.19,592.38:known  until after the subject has been found. The parser will therefore try all possible NPs
line=1469 fonts=F0-10.0 iscore=0.19 bbox=126.0,570.42,386.34,580.38        :as subjects, and then see which the embedded verb phrase rejects.

doc_id=42 page=33 block_id=33-4 bbox=126.0,540.54,484.54,562.5 label=tbtbb 1470 1471
line=1470 fonts=F0-10.0 bbox=126.0,552.54,484.54,562.5            :With the GIDLP  formalism, in contrast, the grammar writer could specify the rule as (25)
line=1471 fonts=F0-10.0 iscore=0.07 bbox=126.0,540.54,277.92,550.5:to avoid this generate-and-test pattern.

doc_id=42 page=33 block_id=33-5 bbox=126.0,512.22,231.59,526.27 label=tbbt 1472 1472
line=1472 fonts=F0-10.0,F0-7.0,F5-10.0 bbox=126.0,512.22,231.59,526.27:(25) S → V^{1} VP^{2}inf^{,} ^{NP3}subj

doc_id=42 page=33 block_id=33-6 bbox=126.0,478.74,484.23,500.7 label=tbbb 1473 1474
line=1473 fonts=F0-10.0 bbox=126.0,490.74,484.23,500.7                    :Now  the parser will not look for the subject of the clause until the embedded verb phrase
line=1474 fonts=F0-10.0,F3-10.0 iscore=0.24 bbox=126.0,478.74,462.35,488.7:has been located, and so only NPs with the appropriate case will even be considered.

doc_id=42 page=33 block_id=33-7 bbox=126.0,443.22,205.1,455.18 label=bt 1475 1475
line=1475 fonts=F3-12.0 bbox=126.0,443.22,205.1,455.18:7 Future Work

doc_id=42 page=33 block_id=33-8 bbox=126.0,391.02,484.52,424.86 label=bbtt 1476 1478
line=1476 fonts=F0-10.0 bbox=126.0,414.9,484.34,424.86             :To advance  towards the general goal of efficient parsing with linearization-based HPSG
line=1477 fonts=F0-10.0 iscore=0.15 bbox=126.0,403.02,484.52,412.98:grammars,  the next step is to replace atomic categories with complex categories, encoded
line=1478 fonts=F0-10.0 iscore=0.08 bbox=126.0,391.02,233.94,400.98:by typed feature structures.

doc_id=42 page=33 block_id=33-9 bbox=126.0,241.62,484.63,382.98 label=bbtb 1479 1490
line=1479 fonts=F0-10.0 bbox=126.0,373.02,484.26,382.98                    :This move  brings with it a number of complications. Apart from the well-known issues
line=1480 fonts=F0-10.0 iscore=0.14 bbox=126.0,361.14,483.92,371.1         :generally involved in adding complex categories to a chart-parser – for example, subsump-
line=1481 fonts=F0-10.0 iscore=0.19 bbox=126.0,349.14,484.12,359.1         :tion checking or the use of a restrictor (see, for instance, Shieber 1985; Pereira and Shieber
line=1482 fonts=F0-10.0 iscore=0.25 bbox=126.0,337.26,484.37,347.22        :1987; Gerdemann  1991) – the most interesting challenge in this context is the observation
line=1483 fonts=F0-10.0,F1-10.0 iscore=0.36 bbox=126.0,325.26,484.31,335.22:by Seiffert (1991) on ID/LP parsing that word order constraints cannot always be verified
line=1484 fonts=F0-10.0 iscore=0.29 bbox=126.0,313.26,484.63,323.22        :when  a local domain is constructed. While Seiffert addresses the issue by checking word
line=1485 fonts=F0-10.0 iscore=0.21 bbox=126.0,301.38,484.58,311.34        :order constraints in a second pass once the entire tree has been constructed, Morawietz
line=1486 fonts=F0-10.0 iscore=0.36 bbox=126.0,289.38,484.2,299.34         :(1995) shows that by explicitly retaining the relevant information, this second pass can be
line=1487 fonts=F0-10.0 iscore=0.21 bbox=126.0,277.38,484.18,287.34        :avoided. By  making  use of the co-routining capabilities of SICStus Prolog, however, it
line=1488 fonts=F0-10.0 iscore=0.36 bbox=126.0,265.5,484.46,275.46         :should be possible to retain the relevant information implicitly. It may also be possible
line=1489 fonts=F0-10.0 iscore=0.21 bbox=126.0,253.5,484.19,263.46         :to adapt the dormant constraint mechanism so that no more information is retained than
line=1490 fonts=F0-10.0 iscore=0.07 bbox=126.0,241.62,166.62,251.58        :necessary.

doc_id=42 page=33 block_id=33-10 bbox=126.0,48.06,484.7,233.58 label=bbb 1491 1501
line=1491 fonts=F0-10.0 bbox=126.0,223.62,484.07,233.58            :The move  to complex categories also brings with it the opportunity for more practical eval-
line=1492 fonts=F0-10.0 iscore=0.13 bbox=126.0,211.62,484.37,221.58:uation metrics. It is generally accepted, for instance, that the dominating factor in feature
line=1493 fonts=F0-10.0 iscore=0.21 bbox=126.0,199.74,484.17,209.7 :structure-based algorithms is the number of unifications that must be performed; such a
line=1494 fonts=F0-10.0 iscore=0.25 bbox=126.0,187.74,484.52,197.7 :metric is easily calculated once one has a grammar which can be used for testing. One
line=1495 fonts=F0-10.0 iscore=0.19 bbox=126.0,175.86,484.37,185.82:future offshoot of this project is the recoding of the linearization-based Babel grammar
line=1496 fonts=F0-10.0 iscore=0.29 bbox=126.0,163.86,484.1,173.82 :(Müller 1996), one of the most comprehensive grammars of German, as a GIDLP grammar
line=1497 fonts=F0-10.0 iscore=0.17 bbox=126.0,151.86,484.7,161.82 :so it can be used as a test case for the extended parser. This should allow the substantia-
line=1498 fonts=F0-10.0 iscore=0.17 bbox=126.0,139.98,484.07,149.94:tion (or refutation) of the claim that processing comprehensive linearization grammars of
line=1499 fonts=F0-10.0 iscore=0.14 bbox=126.0,127.98,484.54,137.94:natural languages is efficient once all available word order constraints are used to guide
line=1500 fonts=F0-10.0 iscore=0.07 bbox=126.0,115.98,272.57,125.94:processing in a well-engineered way.
line=1501 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02 :                                         33

doc_id=42 page=34 block_id=34-1 bbox=126.0,691.98,188.45,703.94 label=tt 1502 1502
line=1502 fonts=F3-12.0 bbox=126.0,691.98,188.45,703.94:8 Summary

doc_id=42 page=34 block_id=34-2 bbox=126.0,580.02,484.53,673.74 label=tb 1503 1510
line=1503 fonts=F0-10.0 bbox=126.0,663.78,484.24,673.74            :This paper has described a number of optimizations for parsing with a formalism licensing
line=1504 fonts=F0-10.0 iscore=0.29 bbox=126.0,651.78,484.53,661.74:discontinuous constituents. Using bitvectors encoded as integers to model subsets of the
line=1505 fonts=F0-10.0 iscore=0.31 bbox=126.0,639.78,484.03,649.74:terminal yield, the required bitvector operations can be computed in constant time. To
line=1506 fonts=F0-10.0 iscore=0.25 bbox=126.0,627.9,484.27,637.86 :efficiently access edges and rules in a way that makes use of word order information, two
line=1507 fonts=F0-10.0 iscore=0.19 bbox=126.0,615.9,484.35,625.86 :kinds of bitmasks are used to constrain possible coverage vectors, specifying the positions
line=1508 fonts=F0-10.0 iscore=0.12 bbox=126.0,603.9,483.95,613.86 :that can, must, and must not be covered by an edge. The algorithm can thereby take order
line=1509 fonts=F0-10.0 iscore=0.12 bbox=126.0,592.02,484.36,601.98:constraints into account in a more interleaved fashion, restricting the search space of the
line=1510 fonts=F0-10.0 iscore=0.07 bbox=126.0,580.02,152.23,589.98:parser.

doc_id=42 page=34 block_id=34-3 bbox=126.0,544.38,181.52,556.34 label=bt 1511 1511
line=1511 fonts=F3-12.0 bbox=126.0,544.38,181.52,556.34:References

doc_id=42 page=34 block_id=34-4 bbox=126.0,510.18,484.47,532.14 label=bbt 1512 1513
line=1512 fonts=F0-10.0 bbox=126.0,522.18,484.47,532.14             :Blevins, James (1990). Syntactic Complexity: Evidence for Discontinuity and Multidomi-
line=1513 fonts=F0-10.0 iscore=0.11 bbox=135.96,510.18,394.27,520.14:  nation. Ph.D. thesis, University of Massachusetts, Amherst, MA.

doc_id=42 page=34 block_id=34-5 bbox=126.0,444.42,484.82,502.26 label=bbbt 1514 1518
line=1514 fonts=F0-10.0 bbox=126.0,492.3,484.04,502.26                      :Bonami, Olivier, Danièle Godard and Jean-Marie Marandin (1999). Constituency and word
line=1515 fonts=F0-10.0 iscore=0.15 bbox=135.96,480.3,484.31,490.26         :  order in French subject inversion. In Gosse Bouma, Erhard W. Hinrichs, Geert-Jan M.
line=1516 fonts=F0-10.0,F4-10.0 iscore=0.15 bbox=135.96,468.42,484.82,478.38:  Kruijff and Richard T. Oehrle (eds.), Constraints and Resources in Natural Language
line=1517 fonts=F0-10.0,F4-10.0 iscore=0.42 bbox=135.96,456.42,484.82,466.38:  Syntax and Semantics, Stanford, CA: CSLI Publications, Studies in Constraint-Based
line=1518 fonts=F0-10.0 iscore=0.20 bbox=135.96,444.42,227.14,454.38        :  Lexicalism, pp. 21–40.

doc_id=42 page=34 block_id=34-6 bbox=126.0,402.66,484.48,436.5 label=bbbbt 1519 1521
line=1519 fonts=F0-10.0 bbox=126.0,426.54,483.96,436.5                      :Brew, Chris (1992). Letting the cat out of the bag: generation for shake-and-bake MT. In
line=1520 fonts=F0-10.0,F4-10.0 iscore=0.29 bbox=135.96,414.54,484.48,424.5 :  Proceedings of the 14th International Conference on Computational Linguistics. Nantes,
line=1521 fonts=F0-10.0,F2-10.0 iscore=0.20 bbox=135.96,402.66,471.21,412.62:  France, pp. 610–616. Available from http://arxiv.org/abs/cmp-lg/9511002.

doc_id=42 page=34 block_id=34-7 bbox=126.0,372.78,484.29,394.62 label=bbbbbt 1522 1523
line=1522 fonts=F0-10.0 bbox=126.0,384.66,484.29,394.62            :Bröker, Norbert (1998). Separating Surface Order and Syntactic Relations in a Dependency
line=1523 fonts=F0-10.0 iscore=0.18 bbox=135.96,372.78,336.3,382.74:  Grammar.  In COLING-ACL   (1998), pp. 174–180.

doc_id=42 page=34 block_id=34-8 bbox=126.0,342.78,483.93,364.74 label=bbbbbbt 1524 1525
line=1524 fonts=F0-10.0,F4-10.0 bbox=126.0,354.78,483.93,364.74             :Bunt, Harry and Arthur van Horck (eds.) (1996). Discontinuous Constituency, vol. 6of
line=1525 fonts=F0-10.0,F4-10.0 iscore=0.00 bbox=135.96,342.78,449.56,352.74:  Natural Language Processing. Berlin and New York, NY: Mouton De Gruyter.

doc_id=42 page=34 block_id=34-9 bbox=126.0,312.9,484.45,334.86 label=bbbbbbbtt 1526 1527
line=1526 fonts=F0-10.0,F4-10.0 bbox=126.0,324.9,484.45,334.86             :COLING-ACL    (1998). Proceedings of the 17th International Conference on Computa-
line=1527 fonts=F0-10.0,F4-10.0 iscore=0.23 bbox=135.96,312.9,483.96,322.86:  tional Linguistics (COLING) and the 36th Annual meeting of the ACL (ACL), Montreal.

doc_id=42 page=34 block_id=34-10 bbox=126.0,283.02,484.05,304.98 label=bbbbbbbtbt 1528 1529
line=1528 fonts=F0-10.0 bbox=126.0,295.02,484.05,304.98                     :Covington, Michael A. (1990). Parsing discontinuous constituents in dependency grammar.
line=1529 fonts=F0-10.0,F4-10.0 iscore=0.00 bbox=135.96,283.02,307.75,292.98:  Computational Linguistics 16(4), 234–236.

doc_id=42 page=34 block_id=34-11 bbox=126.0,229.26,484.63,275.1 label=bbbbbbbtbb 1530 1533
line=1530 fonts=F0-10.0 bbox=126.0,265.14,483.78,275.1                      :Covington, Michael A. (1992). A dependency parser for variable-word-order languages.
line=1531 fonts=F0-10.0,F4-10.0 iscore=0.00 bbox=135.96,253.14,484.63,263.1 :  In K. R. Billingsley, Hilton U. Brown III and Ed Derohanes (eds.), Computer assisted
line=1532 fonts=F0-10.0,F4-10.0 iscore=0.21 bbox=135.96,241.26,484.35,251.22:  modeling on the IBM 3090:  Papers from the 1989 IBM Supercomputing Competition,
line=1533 fonts=F0-10.0 iscore=0.25 bbox=135.96,229.26,330.3,239.22         :  Athens, GA: Baldwin Press, vol. 2, pp. 799–845.

doc_id=42 page=34 block_id=34-12 bbox=126.0,163.5,484.44,221.34 label=bbbbbbbbt 1534 1538
line=1534 fonts=F0-10.0 bbox=126.0,211.38,484.36,221.34                     :Daniels, Michael W. and W. Detmar Meurers (2002). Improving the efficiency of parsing
line=1535 fonts=F0-10.0,F4-10.0 iscore=0.17 bbox=135.96,199.38,484.35,209.34:  with discontinuous constituents. In Shuly Wintner (ed.), Proceedings of NLULP-02: The
line=1536 fonts=F4-10.0 iscore=0.27 bbox=135.96,187.38,484.14,197.34        :  Seventh International Workshop on Natural Language Understanding and Logic Pro-
line=1537 fonts=F0-10.0,F4-10.0 iscore=0.10 bbox=135.96,175.5,484.44,185.46 :  gramming. Roskilde University, Computer Science Department, Copenhagen, Denmark,
line=1538 fonts=F0-10.0 iscore=0.12 bbox=135.96,163.5,178.21,173.46         :  pp. 49–68.

doc_id=42 page=34 block_id=34-13 bbox=126.0,133.62,484.27,155.58 label=bbbbbbbbbt 1539 1540
line=1539 fonts=F0-10.0 bbox=126.0,145.62,484.27,155.58             :Davis, Paul C. (2002). Stone Soup Translation: The Linked Automata Model. Ph.D. thesis,
line=1540 fonts=F0-10.0 iscore=0.00 bbox=135.96,133.62,288.85,143.58:  Ohio State University, Columbus, OH.

doc_id=42 page=34 block_id=34-14 bbox=126.0,48.06,484.16,125.7 label=bbbbbbbbbb 1541 1544
line=1541 fonts=F0-10.0,F4-10.0 bbox=126.0,115.74,484.16,125.7                     :Donohue, Cathryn and Ivan A. Sag (1999). Domains in Warlpiri. In Abstracts of the Sixth
line=1542 fonts=F0-10.0,F2-10.0,F4-10.0 iscore=0.07 bbox=135.96,103.74,484.06,113.7:  Int. Conference on HPSG. Edinburgh: University of Edinburgh, pp. 101–106. http://
line=1543 fonts=F0-10.0,F2-10.0 iscore=0.09 bbox=135.96,91.74,374.49,101.7         :  www-csli.stanford.edu/~sag/papers/warlpiri.ps.
line=1544 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02                 :                                      34

doc_id=42 page=35 block_id=35-1 bbox=126.0,679.98,484.23,701.94 label=tt 1545 1546
line=1545 fonts=F0-10.0 bbox=126.0,691.98,484.23,701.94             :Dowty, David R. (1996). Towards a Minimalist Theory of Syntactic Structure. In Bunt and
line=1546 fonts=F0-10.0 iscore=0.00 bbox=135.96,679.98,208.73,689.94:  van Horck (1996).

doc_id=42 page=35 block_id=35-2 bbox=126.0,650.1,484.37,672.06 label=tb 1547 1548
line=1547 fonts=F0-10.0,F4-10.0 bbox=126.0,662.1,484.37,672.06             :Earley, Jay (1970). An Efficient Context-Free Parsing Algorithm. Communications of the
line=1548 fonts=F0-10.0,F4-10.0 iscore=0.00 bbox=135.96,650.1,330.01,660.06:  ACM   13(2), 94–102. Also in Grosz et al. (1986).

doc_id=42 page=35 block_id=35-3 bbox=126.0,620.22,484.31,642.18 label=bt 1549 1550
line=1549 fonts=F0-10.0,F4-10.0 bbox=126.0,632.22,484.31,642.18            :Gazdar, Gerald, Ewan Klein, Geoffrey K. Pullum and Ivan A. Sag (1985). Generalized
line=1550 fonts=F0-10.0,F4-10.0 iscore=0.17 bbox=135.96,620.22,423.3,630.18:  Phrase Structure Grammar. Cambridge, MA: Harvard University Press.

doc_id=42 page=35 block_id=35-4 bbox=126.0,590.34,484.13,612.3 label=bbt 1551 1552
line=1551 fonts=F0-10.0,F4-10.0 bbox=126.0,602.34,484.13,612.3     :Gerdemann,  Dale (1991). Parsing and Generation of Unification Grammars. Tech. Rep.
line=1552 fonts=F0-10.0 iscore=0.10 bbox=135.96,590.34,342.22,600.3:  CS-91-06, Beckman  Institute, University of Illinois.

doc_id=42 page=35 block_id=35-5 bbox=126.0,548.46,485.5,582.42 label=bbbt 1553 1555
line=1553 fonts=F0-10.0,F4-10.0 bbox=126.0,572.46,483.91,582.42             :Götz, Thilo and Gerald Penn (1997). A Proposed Linear Specification Language. Volume
line=1554 fonts=F0-10.0,F2-10.0 iscore=0.09 bbox=135.96,560.46,485.5,570.42 :  134 in Arbeitspapiere des SFB 340., Universität Tübingen. http://www.sfs.uni-
line=1555 fonts=F0-10.0,F2-10.0 iscore=0.11 bbox=135.96,548.46,395.49,558.42:  tuebingen.de/sfb/reports/berichte/134/134abs.html.

doc_id=42 page=35 block_id=35-6 bbox=126.0,518.58,483.9,540.54 label=bbbbt 1556 1557
line=1556 fonts=F0-10.0,F4-10.0 bbox=126.0,530.58,483.9,540.54              :Grosz, Barbara, Karen Sparck Jones and Bonnie Lynn Webber (eds.) (1986). Readings in
line=1557 fonts=F0-10.0,F4-10.0 iscore=0.08 bbox=135.96,518.58,401.85,528.54:  Natural Language Processing. Los Altos, CA: Morgan Kaufmann.

doc_id=42 page=35 block_id=35-7 bbox=126.0,476.82,484.64,510.66 label=bbbbbt 1558 1560
line=1558 fonts=F0-10.0,F4-10.0 bbox=126.0,500.7,484.25,510.66              :Hepple, Mark (1994). Discontinuity and the Lambek Calculus. In Proceedings of the
line=1559 fonts=F0-10.0,F4-10.0 iscore=0.09 bbox=135.96,488.7,484.64,498.66 :  15th Conference on Computational Linguistics (COLING-94). Kyoto. Available from
line=1560 fonts=F0-10.0,F2-10.0 iscore=0.11 bbox=135.96,476.82,426.81,486.78:  ftp://ftp.dcs.shef.ac.uk/home/hepple/papers/coling94.ps.

doc_id=42 page=35 block_id=35-8 bbox=126.0,422.94,484.71,468.78 label=bbbbbbtt 1561 1564
line=1561 fonts=F0-10.0 bbox=126.0,458.82,484.71,468.78                    :Hinrichs, Erhard, Julia Bartels, Yasuhiro Kawata, Valia Kordoni and Heike Telljohann
line=1562 fonts=F0-10.0 iscore=0.00 bbox=135.96,446.94,483.7,456.9         :  (2000). The Tübingen Treebanks for Spoken German,  English, and Japanese. In Wolf-
line=1563 fonts=F0-10.0,F4-10.0 iscore=0.17 bbox=135.96,434.94,484.03,444.9:  gang Wahlster (ed.), Verbmobil: Foundations of Speech-to-Speech Translation,, Berlin:
line=1564 fonts=F0-10.0 iscore=0.11 bbox=135.96,422.94,226.78,432.9        :  Springer, pp. 552–576.

doc_id=42 page=35 block_id=35-9 bbox=126.0,381.18,485.01,415.02 label=bbbbbbtb 1565 1567
line=1565 fonts=F0-10.0,F4-10.0 bbox=126.0,405.06,483.79,415.02             :Huck, Geoffrey (1985). Exclusivity and discontinuity in phrase structure grammar. In West
line=1566 fonts=F0-10.0,F4-10.0 iscore=0.09 bbox=135.96,393.06,485.01,403.02:  Coast Conference on Formal  Linguistics (WCCFL). Stanford University, CSLI Publica-
line=1567 fonts=F0-10.0 iscore=0.20 bbox=135.96,381.18,229.74,391.14        :  tions, vol. 4, pp. 92–98.

doc_id=42 page=35 block_id=35-10 bbox=126.0,351.3,484.06,373.14 label=bbbbbbbt 1568 1569
line=1568 fonts=F0-10.0,F4-10.0 bbox=126.0,363.18,484.06,373.14    :Huck, Geoffrey and Almerindo Ojeda (eds.) (1987). Discontinuous Constituency. No. 20
line=1569 fonts=F0-10.0 iscore=0.00 bbox=135.96,351.3,351.03,361.26:  in Syntax and Semantics. New York: Academic Press.

doc_id=42 page=35 block_id=35-11 bbox=126.0,321.42,484.05,343.26 label=bbbbbbbbt 1570 1571
line=1570 fonts=F0-10.0 bbox=126.0,333.3,484.05,343.26                      :Huynh, Dung  T. (1983). Commutative Grammars: The Complexity of Uniform Word
line=1571 fonts=F0-10.0,F4-10.0 iscore=0.00 bbox=135.96,321.42,333.23,331.38:  Problems. Information and Control 57(1), 21–39.

doc_id=42 page=35 block_id=35-12 bbox=126.0,291.42,484.2,313.38 label=bbbbbbbbbt 1572 1573
line=1572 fonts=F0-10.0,F4-10.0 bbox=126.0,303.42,484.2,313.38      :Jackendoff, Ray (1977). X-Bar Syntax: A Study of Phrase Structure. Cambridge, Mass.:
line=1573 fonts=F0-10.0 iscore=0.00 bbox=135.96,291.42,180.15,301.38:  MIT  Press.

doc_id=42 page=35 block_id=35-13 bbox=126.0,261.54,484.11,283.5 label=bbbbbbbbbbt 1574 1575
line=1574 fonts=F0-10.0,F4-10.0 bbox=126.0,273.54,484.11,283.5            :Johnson, Mark (1985). Parsing with discontinuous constituents. In Proceedings of the 23rd
line=1575 fonts=F0-10.0,F4-10.0 iscore=0.00 bbox=135.96,261.54,342.4,271.5:  Annual Meeting of the ACL,. Chicago, pp. 127–132.

doc_id=42 page=35 block_id=35-14 bbox=126.0,231.66,484.04,253.62 label=bbbbbbbbbbbt 1576 1577
line=1576 fonts=F0-10.0 bbox=126.0,243.66,484.04,253.62                     :Kasami, T. and K. Torii (1969). A syntax-analysis procedure for unambiguous context-free
line=1577 fonts=F0-10.0,F4-10.0 iscore=0.00 bbox=135.96,231.66,457.81,241.62:  grammars.  Journal of the Association for Computing Machinery 16(3), 423–431.

doc_id=42 page=35 block_id=35-15 bbox=126.0,189.9,484.62,223.74 label=bbbbbbbbbbbbt 1578 1580
line=1578 fonts=F0-10.0 bbox=126.0,213.78,484.47,223.74             :Kasper, Robert T., Mike Calcagno and Paul C. Davis (1998). Know When to Hold ’Em:
line=1579 fonts=F0-10.0 iscore=0.07 bbox=135.96,201.78,484.62,211.74:  Shuffling Deterministically in a Parser for Nonconcatenative Grammars. In COLING-
line=1580 fonts=F0-10.0 iscore=0.10 bbox=135.96,189.9,241.35,199.86 :  ACL  (1998), pp. 663–669.

doc_id=42 page=35 block_id=35-16 bbox=126.0,160.02,484.29,181.86 label=bbbbbbbbbbbbbt 1581 1582
line=1581 fonts=F0-10.0 bbox=126.0,171.9,484.29,181.86              :Kathol, Andreas (1995). Linearization-Based German Syntax. Ph.D. thesis, The Ohio State
line=1582 fonts=F0-10.0 iscore=0.00 bbox=135.96,160.02,179.56,169.98:  University.

doc_id=42 page=35 block_id=35-17 bbox=126.0,48.06,485.69,151.98 label=bbbbbbbbbbbbbb 1583 1587
line=1583 fonts=F0-10.0 bbox=126.0,142.02,484.4,151.98                             :Kathol, Andreas and Carl Pollard (1995). Extraposition via Complex Domain Formation.
line=1584 fonts=F0-10.0,F4-10.0 iscore=0.08 bbox=135.96,130.14,484.34,140.1        :  In Proceedings of the 1995 Annual Meeting of the Association for Computational Lin-
line=1585 fonts=F0-10.0,F2-10.0,F4-10.0 iscore=0.15 bbox=135.96,118.14,485.69,128.1:  guistics. pp. 174–180. Available from http://www.linguistics.berkeley.edu/~
line=1586 fonts=F0-10.0,F2-10.0 iscore=0.17 bbox=135.96,106.14,233.38,116.1        :  kathol/papers.html.
line=1587 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.93,58.02                 :                                      35

doc_id=42 page=36 block_id=36-1 bbox=126.0,679.98,484.29,701.94 label=tt 1588 1589
line=1588 fonts=F0-10.0 bbox=126.0,691.98,484.29,701.94             :Kay, Martin (1980). Algorithm  schemata and data structures in syntactic processing. In
line=1589 fonts=F0-10.0 iscore=0.00 bbox=135.96,679.98,257.41,689.94:  Grosz et al. (1986), pp. 35–70.

doc_id=42 page=36 block_id=36-2 bbox=126.0,638.22,484.31,672.06 label=tb 1590 1592
line=1590 fonts=F0-10.0,F4-10.0 bbox=126.0,662.1,484.31,672.06             :Kay, Martin (1990).  Head-Driven Parsing. In Masaru  Tomita (ed.), Current Issues in
line=1591 fonts=F0-10.0,F4-10.0 iscore=0.18 bbox=135.96,650.1,484.27,660.06:  Parsing Technology, Dordrecht: Kluwer Academic Publishers. Previously published in
line=1592 fonts=F0-10.0 iscore=0.10 bbox=135.96,638.22,446.68,648.18       :  the proceedings of the International Workshop on Parsing Technologies, 1989.

doc_id=42 page=36 block_id=36-3 bbox=126.0,596.34,485.68,630.18 label=bt 1593 1595
line=1593 fonts=F0-10.0 bbox=126.0,620.22,484.04,630.18                            :Knuth, Donald E. (2002). Generating all n-tuples. Pre-fascicle 2A (revision 8) of Volume
line=1594 fonts=F0-10.0,F2-10.0,F4-10.0 iscore=0.08 bbox=135.96,608.34,485.68,618.3:  4ofThe  Art of Computer Programming. Available from http://sunburn.stanford.
line=1595 fonts=F0-10.0,F2-10.0 iscore=0.12 bbox=135.96,596.34,259.53,606.3        :  edu/~knuth/fasc2a.ps.gz.

doc_id=42 page=36 block_id=36-4 bbox=126.0,566.46,483.97,588.42 label=bbt 1596 1597
line=1596 fonts=F0-10.0 bbox=126.0,578.46,483.97,588.42             :Kroch, Anthony S. and Aravind K. Joshi (1987). Analyzing Extraposition in a Tree Ad-
line=1597 fonts=F0-10.0 iscore=0.08 bbox=135.96,566.46,316.49,576.42:  joining Grammar. In Huck and Ojeda (1987).

doc_id=42 page=36 block_id=36-5 bbox=126.0,524.58,484.48,558.42 label=bbbt 1598 1600
line=1598 fonts=F0-10.0 bbox=126.0,548.46,484.09,558.42                     :Lenerz, Jürgen (2001). Word Order Variation: Competition or Co-Operation. In Gereon
line=1599 fonts=F0-10.0,F4-10.0 iscore=0.08 bbox=135.96,536.58,484.48,546.54:  Müller and Wolfgang Sternefeld (eds.), Competition in Syntax, Berlin and New York,
line=1600 fonts=F0-10.0 iscore=0.08 bbox=135.96,524.58,290.01,534.54        :  NY: Mouton  De Gruyter, pp. 249–281.

doc_id=42 page=36 block_id=36-6 bbox=126.0,494.7,484.52,516.66 label=bbbbt 1601 1602
line=1601 fonts=F0-10.0,F4-10.0 bbox=126.0,506.7,484.52,516.66             :McCawley,  James  D. (1982). Parentheticals and discontinuous constituent structure. Lin-
line=1602 fonts=F0-10.0,F4-10.0 iscore=0.00 bbox=135.96,494.7,255.27,504.66:  guistic Inquiry 13(1), 91–106.

doc_id=42 page=36 block_id=36-7 bbox=126.0,452.82,484.68,486.78 label=bbbbbt 1603 1605
line=1603 fonts=F0-10.0,F14-10.0,F4-10.0 bbox=126.0,476.82,484.23,486.78            :Morawietz, Frank (1995). Formalization and Parsing of Unification–Based ID/LP Gram-
line=1604 fonts=F0-10.0,F2-10.0,F4-10.0 iscore=0.33 bbox=135.96,464.82,484.68,474.78:  mars. Arbeitspapiere des SFB 340. Nr. 68, Universität Tübingen. Available from http:
line=1605 fonts=F0-10.0,F2-10.0 iscore=0.08 bbox=135.96,452.82,458.26,462.78        :  //www.sfs.uni-tuebingen.de/sfb/reports/berichte/68/68abs.html.

doc_id=42 page=36 block_id=36-8 bbox=126.0,422.94,484.2,444.9 label=bbbbbbtt 1606 1607
line=1606 fonts=F0-10.0,F4-10.0 bbox=126.0,434.94,484.2,444.9      :Morrill, Glynn V. (1995). Discontinuity in categorial grammar. Linguistics and Philosophy
line=1607 fonts=F0-10.0 iscore=0.00 bbox=135.96,422.94,188.17,432.9:  18, 175–219.

doc_id=42 page=36 block_id=36-9 bbox=126.0,369.18,485.32,415.02 label=bbbbbbtb 1608 1611
line=1608 fonts=F0-10.0,F4-10.0 bbox=126.0,405.06,484.36,415.02             :Müller, Stefan (1996). The Babel-System – An HPSG Prolog Implementation. In Pro-
line=1609 fonts=F4-10.0 iscore=0.00 bbox=135.96,393.06,484.29,403.02        :  ceedings of the Fourth International Conference on the Practical Application of Prolog,.
line=1610 fonts=F0-10.0,F2-10.0 iscore=0.17 bbox=135.96,381.18,485.32,391.14:  London, pp. 263–277. Revised version available at http://www.dfki.de/~stefan/
line=1611 fonts=F0-10.0,F2-10.0 iscore=0.12 bbox=135.96,369.18,212.37,379.14:  Pub/babel.html.

doc_id=42 page=36 block_id=36-10 bbox=126.0,327.3,484.62,361.26 label=bbbbbbbt 1612 1614
line=1612 fonts=F0-10.0,F4-10.0 bbox=126.0,351.3,484.45,361.26             :Müller, Stefan (1999a). Deutsche Syntax deklarativ. Head-Driven Phrase Structure Gram-
line=1613 fonts=F0-10.0,F4-10.0 iscore=0.08 bbox=135.96,339.3,484.62,349.26:  mar  für das Deutsche. No. 394 in Linguistische Arbeiten. Tübingen: Max Niemeyer
line=1614 fonts=F0-10.0 iscore=0.08 bbox=135.96,327.3,164.48,337.26        :  Verlag.

doc_id=42 page=36 block_id=36-11 bbox=126.0,285.54,484.4,319.38 label=bbbbbbbbt 1615 1617
line=1615 fonts=F0-10.0,F4-10.0 bbox=126.0,309.42,484.4,319.38              :Müller, Stefan (1999b). Restricting Discontinuity. Verbmobil Report 237, DFKI, Saar-
line=1616 fonts=F0-10.0,F1-10.0 iscore=0.00 bbox=135.96,297.42,484.22,307.38:  brücken. Also published in the Proceedings of GLDV 99 (Frankfurt/Main). Available
line=1617 fonts=F0-10.0,F2-10.0 iscore=0.09 bbox=135.96,285.54,417.14,295.5 :  from http://www.dfki.de/~stefan/Pub/e_restricting.html.

doc_id=42 page=36 block_id=36-12 bbox=126.0,243.66,484.48,277.5 label=bbbbbbbbbt 1618 1620
line=1618 fonts=F0-10.0 bbox=126.0,267.54,484.35,277.5                              :Müller, Stefan (2003). Continuous or Discontinuous Constituents? A Comparison between
line=1619 fonts=F0-10.0,F4-10.0 iscore=0.00 bbox=135.96,255.66,484.48,265.62        :  Syntactic Analyses for Constituent Order and Their Processing Systems. Language and
line=1620 fonts=F0-10.0,F2-10.0,F4-10.0 iscore=0.09 bbox=135.96,243.66,461.72,253.62:  Computation To appear. http://www.dfki.de/~stefan/Pub/discont.html.

doc_id=42 page=36 block_id=36-13 bbox=126.0,213.78,483.55,235.74 label=bbbbbbbbbbt 1621 1622
line=1621 fonts=F0-10.0 bbox=126.0,225.78,483.55,235.74             :Ojeda, Almerindo (1987). Discontinuity, multidominances and unbounded dependency in
line=1622 fonts=F0-10.0 iscore=0.00 bbox=135.96,213.78,404.15,223.74:  Generalized Phrase Structure Grammar. In Huck and Ojeda (1987).

doc_id=42 page=36 block_id=36-14 bbox=126.0,171.9,484.42,205.74 label=bbbbbbbbbbbt 1623 1625
line=1623 fonts=F0-10.0 bbox=126.0,195.78,484.3,205.74                     :Penn, Gerald (1999). Linearization and WH-extraction in HPSG: Evidence from Serbo-
line=1624 fonts=F0-10.0,F4-10.0 iscore=0.15 bbox=135.96,183.9,484.42,193.86:  Croatian. In Robert D. Borsley and Adam Przepiórkowski (eds.), Slavic in HPSG, Stan-
line=1625 fonts=F0-10.0 iscore=0.15 bbox=135.96,171.9,306.7,181.86         :  ford, CA: CSLI Publications, pp. 149–182.

doc_id=42 page=36 block_id=36-15 bbox=126.0,48.06,483.93,163.98 label=bbbbbbbbbbbb 1626 1628
line=1626 fonts=F0-10.0,F4-10.0 bbox=126.0,154.02,483.93,163.98    :Pereira, Fernando and Stuart Shieber (1987). Prolog and Natural-LanguageAnalysis. CSLI
line=1627 fonts=F0-10.0 iscore=0.11 bbox=135.96,142.02,221.0,151.98:  Lecture Notes. CSLI.
line=1628 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.93,58.02 :                                       36

doc_id=42 page=37 block_id=37-1 bbox=126.0,656.1,485.04,701.94 label=t 1629 1632
line=1629 fonts=F0-10.0 bbox=126.0,691.98,485.04,701.94                     :Plátek, Martin, Tomáš Holan, Vladimir Kuboň and Karel Oliva (2001). Word-Order Relax-
line=1630 fonts=F0-10.0,F4-10.0 iscore=0.00 bbox=135.96,679.98,484.38,689.94:  ations and Restrictions within a Dependency Grammar. In G. Satta (ed.), Proceedings of
line=1631 fonts=F0-10.0,F4-10.0 iscore=0.08 bbox=135.96,668.1,484.5,678.06  :  the Seventh International Workshop on Parsing Technologies (IWPT). Beijing: Tsinghua
line=1632 fonts=F0-10.0 iscore=0.10 bbox=135.96,656.1,258.08,666.06         :  University Press, pp. 237–240.

doc_id=42 page=37 block_id=37-2 bbox=126.0,626.22,484.54,648.18 label=bt 1633 1634
line=1633 fonts=F0-10.0,F4-10.0 bbox=126.0,638.22,484.54,648.18     :Pollard, Carl and Ivan Sag (1994). Head-Driven Phrase Structure Grammar. Chicago:
line=1634 fonts=F0-10.0 iscore=0.10 bbox=135.96,626.22,249.65,636.18:  University of Chicago Press.

doc_id=42 page=37 block_id=37-3 bbox=126.0,572.46,484.61,618.3 label=bbt 1635 1638
line=1635 fonts=F0-10.0 bbox=126.0,608.34,484.05,618.3                      :Rambow,  Owen and Aravind Joshi (1994). A Formal Look at Dependency Grammars and
line=1636 fonts=F0-10.0 iscore=0.25 bbox=135.96,596.34,484.34,606.3         :  Phrase-Structure Grammars, with Special Consideration of Word-Order Phenomena. In
line=1637 fonts=F0-10.0,F4-10.0 iscore=0.30 bbox=135.96,584.34,484.61,594.3 :  L. Wanner (ed.), Current Issues in Meaning-Text-Theory, London: Pinter. Available
line=1638 fonts=F0-10.0,F2-10.0 iscore=0.10 bbox=135.96,572.46,343.94,582.42:  from http://arxiv.org/abs/cmp-lg/9410007.

doc_id=42 page=37 block_id=37-4 bbox=126.0,542.58,484.6,564.42 label=bbbt 1639 1640
line=1639 fonts=F0-10.0,F4-10.0 bbox=126.0,554.46,484.6,564.42              :Ramsay, Allan M. (1999). Direct parsing with discontinuous phrases. Natural Language
line=1640 fonts=F0-10.0,F4-10.0 iscore=0.10 bbox=135.96,542.58,246.11,552.54:  Engineering 5(3), 271–300.

doc_id=42 page=37 block_id=37-5 bbox=126.0,500.7,484.26,534.54 label=bbbbt 1641 1643
line=1641 fonts=F0-10.0 bbox=126.0,524.58,483.96,534.54                    :Reape, Mike (1989). A logical treatment of semi-free word order and bounded discontinu-
line=1642 fonts=F0-10.0,F4-10.0 iscore=0.00 bbox=135.96,512.7,484.26,522.66:  ous constituency. In Proceedings of the Fourth Meeting of the European Association for
line=1643 fonts=F0-10.0,F4-10.0 iscore=0.08 bbox=135.96,500.7,298.75,510.66:  Computational  Linguistics. pp. 103–110.

doc_id=42 page=37 block_id=37-6 bbox=126.0,434.94,484.56,492.78 label=bbbbbtt 1644 1648
line=1644 fonts=F0-10.0 bbox=126.0,482.82,484.09,492.78                     :Reape, Mike (1990). A Theory of Word Order and Discontinuous Constituency in West
line=1645 fonts=F0-10.0,F4-10.0 iscore=0.25 bbox=135.96,470.82,484.56,480.78:  Continental Germanic. In Elisabeth Engdahl and Mike Reape (eds.), Parametric Vari-
line=1646 fonts=F0-10.0,F4-10.0 iscore=0.18 bbox=135.96,458.82,484.32,468.78:  ation in Germanic and Romance:  Preliminary Investigations, Edinburgh: Centre for
line=1647 fonts=F0-10.0 iscore=0.10 bbox=135.96,446.94,484.53,456.9         :  Cognitive Science, University of Edinburgh, DYANA Deliverable R1.1.A, ESPRIT Ba-
line=1648 fonts=F0-10.0 iscore=0.20 bbox=135.96,434.94,300.62,444.9         :  sic Research Action BR 3175, pp. 25–39.

doc_id=42 page=37 block_id=37-7 bbox=126.0,405.06,484.55,427.02 label=bbbbbtb 1649 1650
line=1649 fonts=F0-10.0 bbox=126.0,417.06,484.55,427.02             :Reape, Mike (1991a). Parsing Bounded Discontinuous Constituents: Generalisations of
line=1650 fonts=F0-10.0 iscore=0.25 bbox=135.96,405.06,361.21,415.02:  some common   algorithms. In Reape (1991b), pp. 41–70.

doc_id=42 page=37 block_id=37-8 bbox=126.0,363.18,485.03,397.14 label=bbbbbbt 1651 1653
line=1651 fonts=F0-10.0,F4-10.0 bbox=126.0,387.18,484.65,397.14     :Reape, Mike (ed.) (1991b). Word Order in Germanic and Parsing. DYANA Deliverable
line=1652 fonts=F0-10.0 iscore=0.17 bbox=135.96,375.18,485.03,385.14:  R1.1.C, ESPRIT  Basic Research Action BR 3175. Centre for Cognitive Science, Uni-
line=1653 fonts=F0-10.0 iscore=0.08 bbox=135.96,363.18,220.13,373.14:  versity of Edinburgh.

doc_id=42 page=37 block_id=37-9 bbox=126.0,333.3,484.61,355.26 label=bbbbbbbt 1654 1655
line=1654 fonts=F0-10.0 bbox=126.0,345.3,484.61,355.26             :Reape, Mike (1993). A Formal Theory of Word Order: A Case Study in West Germanic.
line=1655 fonts=F0-10.0 iscore=0.07 bbox=135.96,333.3,285.15,343.26:  PhD  thesis., University of Edinburgh.

doc_id=42 page=37 block_id=37-10 bbox=126.0,291.42,484.79,325.38 label=bbbbbbbbt 1656 1658
line=1656 fonts=F0-10.0 bbox=126.0,315.42,484.03,325.38                     :Reape, Mike (1994). Domain Union and Word Order Variation in German. In John Ner-
line=1657 fonts=F0-10.0,F4-10.0 iscore=0.08 bbox=135.96,303.42,484.67,313.38:  bonne, Klaus Netter and Carl Pollard (eds.), German in Head-Driven Phrase Structure
line=1658 fonts=F0-10.0,F4-10.0 iscore=0.23 bbox=135.96,291.42,484.79,301.38:  Grammar,  Stanford, CA: CSLI Publications, no. 46 in CSLI Lecture Notes, pp. 151–197.

doc_id=42 page=37 block_id=37-11 bbox=126.0,261.54,483.87,283.5 label=bbbbbbbbbt 1659 1660
line=1659 fonts=F0-10.0 bbox=126.0,273.54,483.87,283.5             :Reape, Mike (1996). Getting things in order. In Bunt and van Horck (1996), pp. 209–253.
line=1660 fonts=F0-10.0 iscore=0.21 bbox=135.96,261.54,288.48,271.5:  Published version of a Ms. from 1990.

doc_id=42 page=37 block_id=37-12 bbox=126.0,207.78,484.9,253.62 label=bbbbbbbbbbt 1661 1664
line=1661 fonts=F0-10.0 bbox=126.0,243.66,484.19,253.62                     :Richter, Frank and Manfred Sailer (2001). On the Left Periphery of German Finite Sen-
line=1662 fonts=F0-10.0,F4-10.0 iscore=0.00 bbox=135.96,231.66,484.51,241.62:  tences. In W. Detmar Meurers and Tibor Kiss (eds.), Constraint-Based Approaches to
line=1663 fonts=F0-10.0,F4-10.0 iscore=0.17 bbox=135.96,219.78,484.9,229.74 :  Germanic  Syntax, Stanford, CA: CSLI Publications, Studies in Constraint-Based Lexi-
line=1664 fonts=F0-10.0 iscore=0.10 bbox=135.96,207.78,219.08,217.74        :  calism, pp. 257–300.

doc_id=42 page=37 block_id=37-13 bbox=126.0,165.9,484.65,199.86 label=bbbbbbbbbbbtt 1665 1667
line=1665 fonts=F0-10.0,F1-10.0 bbox=126.0,189.9,484.46,199.86             :Seiffert, Roland (1991). Unification–ID/LP Grammars:   Formalization and Parsing. In
line=1666 fonts=F0-10.0,F4-10.0 iscore=0.00 bbox=135.96,177.9,484.65,187.86:  Otthein Herzog and Claus-Rolf Rollinger (eds.), Text Understanding in LILOG, Berlin:
line=1667 fonts=F0-10.0 iscore=0.25 bbox=135.96,165.9,446.63,175.86        :  Springer Verlag, no. 546 in Lecture Notes in Artificial Intelligence, pp. 63–73.

doc_id=42 page=37 block_id=37-14 bbox=126.0,124.14,484.42,157.98 label=bbbbbbbbbbbtb 1668 1670
line=1668 fonts=F0-10.0 bbox=126.0,148.02,484.42,157.98                     :Shieber, Stuart (1985). Using restriction to extend parsing algorithms for complex-feature-
line=1669 fonts=F0-10.0,F4-10.0 iscore=0.21 bbox=135.96,136.02,484.37,145.98:  based formalisms. In Proceedings of the 23rd Annual Meeting of the ACL,. Chicago, pp.
line=1670 fonts=F0-10.0 iscore=0.07 bbox=135.96,124.14,168.34,134.1         :  145–52.

doc_id=42 page=37 block_id=37-15 bbox=126.0,48.06,484.48,116.1 label=bbbbbbbbbbbb 1671 1673
line=1671 fonts=F0-10.0,F1-10.0,F4-10.0 bbox=126.0,106.14,484.48,116.1:Shieber, Stuart M. (1984). Direct Parsing of ID/LP Grammars. Linguistics and Philosophy
line=1672 fonts=F0-10.0 iscore=0.00 bbox=135.96,94.26,183.19,104.22   :  7, 135–154.
line=1673 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02    :                                        37

doc_id=42 page=38 block_id=38-1 bbox=126.0,656.1,484.72,701.94 label=t 1674 1677
line=1674 fonts=F0-10.0 bbox=126.0,691.98,484.52,701.94                            :Skut, Wojciech, Brigitte Krenn, Thorsten Brants and Hans Uszkoreit (1997). An Annota-
line=1675 fonts=F0-10.0,F4-10.0 iscore=0.14 bbox=135.96,679.98,484.26,689.94       :  tion Scheme for Free Word Order Languages. In Proceedings of the 5th Conference on
line=1676 fonts=F0-10.0,F2-10.0,F4-10.0 iscore=0.29 bbox=135.96,668.1,484.72,678.06:  Applied Natural Language Processing (ANLP). Washington, D.C. Available from http:
line=1677 fonts=F0-10.0,F2-10.0 iscore=0.10 bbox=135.96,656.1,473.97,666.06        :  //www.coli.uni-sb.de/~thorsten/publications/Skut-ea-ANLP97.ps.gz.

doc_id=42 page=38 block_id=38-2 bbox=126.0,602.34,484.96,648.18 label=bt 1678 1681
line=1678 fonts=F0-10.0 bbox=126.0,638.22,484.38,648.18                     :Suhre, Oliver (1999). Computational Aspects of a Grammar Formalism for Languages
line=1679 fonts=F0-10.0 iscore=0.09 bbox=135.96,626.22,484.35,636.18        :  with Freer Word Order. Diplomarbeit., Department of Computer Science, University of
line=1680 fonts=F0-10.0,F2-10.0 iscore=0.17 bbox=135.96,614.22,484.96,624.18:  Tübingen. Published 2000 as Volume 154 in Arbeitspapiere des SFB 340, http://www.
line=1681 fonts=F0-10.0,F2-10.0 iscore=0.08 bbox=135.96,602.34,437.25,612.3 :  sfs.uni-tuebingen.de/sfb/reports/berichte/154/154abs.html.

doc_id=42 page=38 block_id=38-3 bbox=126.0,560.46,484.55,594.3 label=bbt 1682 1684
line=1682 fonts=F0-10.0,F4-10.0 bbox=126.0,584.34,484.01,594.3              :van Noord, Gertjan (1991). Head Corner Parsing for Discontinuous Constituency. In Pro-
line=1683 fonts=F0-10.0,F4-10.0 iscore=0.08 bbox=135.96,572.46,484.55,582.42:  ceedings of the 29th Annual Meeting of the Association for Computational Linguistics.
line=1684 fonts=F0-10.0 iscore=0.08 bbox=135.96,560.46,188.17,570.42        :  pp. 114–121.

doc_id=42 page=38 block_id=38-4 bbox=126.0,530.58,484.06,552.54 label=bbbt 1685 1686
line=1685 fonts=F0-10.0,F4-10.0 bbox=126.0,542.58,484.06,552.54             :van Noord, Gertjan (1997). An Efficient Implementation of the Head-Corner Parser. Com-
line=1686 fonts=F0-10.0,F4-10.0 iscore=0.00 bbox=135.96,530.58,249.29,540.54:  putational Linguistics 23(3).

doc_id=42 page=38 block_id=38-5 bbox=126.0,488.7,484.63,522.66 label=bbbbt 1687 1689
line=1687 fonts=F0-10.0,F1-10.0,F4-10.0 bbox=126.0,512.7,484.43,522.66     :Volk, Martin (1996). Parsing with ID/LP and PS rules. In Natural Language Processing
line=1688 fonts=F0-10.0,F4-10.0 iscore=0.25 bbox=135.96,500.7,484.63,510.66:  and Speech Technology. Results of the 3rd KONVENS Conference (Bielefeld), Berlin:
line=1689 fonts=F0-10.0 iscore=0.09 bbox=135.96,488.7,269.08,498.66        :  Mouton  de Gruyter, pp. 342–353.

doc_id=42 page=38 block_id=38-6 bbox=126.0,434.94,485.08,480.78 label=bbbbbt 1690 1693
line=1690 fonts=F0-10.0 bbox=126.0,470.82,484.31,480.78                            :Yatabe, Shuichi (1996). Long-distance scrambling via Partial Compaction. In Masatoshi
line=1691 fonts=F0-10.0,F4-10.0 iscore=0.00 bbox=135.96,458.82,484.6,468.78        :  Koizumi, Masayuki Oishi and Uli Sauerland (eds.), Formal Approaches to Japanese
line=1692 fonts=F0-10.0,F2-10.0,F4-10.0 iscore=0.09 bbox=135.96,446.94,485.08,456.9:  Linguistics 2, Cambridge, MA: MITWPL, pp. 303–317. Available from http://gamp.
line=1693 fonts=F0-10.0,F2-10.0 iscore=0.10 bbox=135.96,434.94,306.57,444.9        :  c.u-tokyo.ac.jp/~yatabe/fajl.pdf.

doc_id=42 page=38 block_id=38-7 bbox=126.0,48.06,485.97,427.63 label=bbbbbb 1694 1696
line=1694 fonts=F0-10.0,F0-7.0,F4-10.0 bbox=126.0,417.06,485.97,427.63     :Younger, D. H. (1967).  Recognition and parsing of context-free languages in time n ^{3}.
line=1695 fonts=F0-10.0,F4-10.0 iscore=0.00 bbox=135.96,405.06,288.2,415.02:  Information and Control 10, 189–208.
line=1696 fonts=F0-10.0 iscore=0.00 bbox=300.96,48.06,310.92,58.02         :                                        38